
Obstacle_Avoiding_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001560  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00001560  000015f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800088  00800088  0000161c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cd9  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e6f  00000000  00000000  00004671  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018df  00000000  00000000  000054e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d4  00000000  00000000  00006dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b70  00000000  00000000  00007594  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000178b  00000000  00000000  00008104  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000988f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__vector_1>
       8:	0c 94 16 03 	jmp	0x62c	; 0x62c <__vector_2>
       c:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__vector_3>
      10:	0c 94 fe 07 	jmp	0xffc	; 0xffc <__vector_4>
      14:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 62 07 	jmp	0xec4	; 0xec4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__vector_9>
      28:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__vector_10>
      2c:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3a       	cpi	r26, 0xAC	; 172
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c7 03 	call	0x78e	; 0x78e <main>
      8a:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <MOTORS_Init>:
	
	
	// Motor2 Control
	
	DIO_setPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_LOW);
	DIO_setPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_LOW);
      92:	41 e0       	ldi	r20, 0x01	; 1
      94:	64 e0       	ldi	r22, 0x04	; 4
      96:	81 e0       	ldi	r24, 0x01	; 1
      98:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_setPinDirection>
      9c:	41 e0       	ldi	r20, 0x01	; 1
      9e:	65 e0       	ldi	r22, 0x05	; 5
      a0:	81 e0       	ldi	r24, 0x01	; 1
      a2:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_setPinDirection>
      a6:	41 e0       	ldi	r20, 0x01	; 1
      a8:	66 e0       	ldi	r22, 0x06	; 6
      aa:	81 e0       	ldi	r24, 0x01	; 1
      ac:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_setPinDirection>
      b0:	41 e0       	ldi	r20, 0x01	; 1
      b2:	60 e0       	ldi	r22, 0x00	; 0
      b4:	81 e0       	ldi	r24, 0x01	; 1
      b6:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_setPinDirection>
      ba:	40 e0       	ldi	r20, 0x00	; 0
      bc:	64 e0       	ldi	r22, 0x04	; 4
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
      c4:	40 e0       	ldi	r20, 0x00	; 0
      c6:	65 e0       	ldi	r22, 0x05	; 5
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
      ce:	40 e0       	ldi	r20, 0x00	; 0
      d0:	66 e0       	ldi	r22, 0x06	; 6
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
      d8:	40 e0       	ldi	r20, 0x00	; 0
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
      e2:	08 95       	ret

000000e4 <CAR_MoveForward>:
      e4:	40 e0       	ldi	r20, 0x00	; 0
      e6:	64 e0       	ldi	r22, 0x04	; 4
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
      ee:	41 e0       	ldi	r20, 0x01	; 1
      f0:	65 e0       	ldi	r22, 0x05	; 5
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
      f8:	40 e0       	ldi	r20, 0x00	; 0
      fa:	66 e0       	ldi	r22, 0x06	; 6
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     102:	41 e0       	ldi	r20, 0x01	; 1
     104:	60 e0       	ldi	r22, 0x00	; 0
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     10c:	08 95       	ret

0000010e <CAR_MoveBackward>:
     10e:	41 e0       	ldi	r20, 0x01	; 1
     110:	64 e0       	ldi	r22, 0x04	; 4
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     118:	40 e0       	ldi	r20, 0x00	; 0
     11a:	65 e0       	ldi	r22, 0x05	; 5
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     122:	41 e0       	ldi	r20, 0x01	; 1
     124:	66 e0       	ldi	r22, 0x06	; 6
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     12c:	40 e0       	ldi	r20, 0x00	; 0
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     136:	08 95       	ret

00000138 <CAR_Stop>:
     138:	40 e0       	ldi	r20, 0x00	; 0
     13a:	64 e0       	ldi	r22, 0x04	; 4
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     142:	40 e0       	ldi	r20, 0x00	; 0
     144:	65 e0       	ldi	r22, 0x05	; 5
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     14c:	40 e0       	ldi	r20, 0x00	; 0
     14e:	66 e0       	ldi	r22, 0x06	; 6
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     156:	40 e0       	ldi	r20, 0x00	; 0
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     160:	08 95       	ret

00000162 <CAR_MoveForwardRight>:
     162:	40 e0       	ldi	r20, 0x00	; 0
     164:	64 e0       	ldi	r22, 0x04	; 4
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     16c:	41 e0       	ldi	r20, 0x01	; 1
     16e:	65 e0       	ldi	r22, 0x05	; 5
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	66 e0       	ldi	r22, 0x06	; 6
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     180:	40 e0       	ldi	r20, 0x00	; 0
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     18a:	08 95       	ret

0000018c <CAR_MoveForwardleft>:
     18c:	40 e0       	ldi	r20, 0x00	; 0
     18e:	64 e0       	ldi	r22, 0x04	; 4
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	65 e0       	ldi	r22, 0x05	; 5
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	66 e0       	ldi	r22, 0x06	; 6
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     1aa:	41 e0       	ldi	r20, 0x01	; 1
     1ac:	60 e0       	ldi	r22, 0x00	; 0
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     1b4:	08 95       	ret

000001b6 <CAR_SendDutyCycleAndStart>:
}


void CAR_SendDutyCycleAndStart(u8 speed)
{
     1b6:	cf 93       	push	r28
     1b8:	c8 2f       	mov	r28, r24
	MOTORS_Init();
     1ba:	0e 94 49 00 	call	0x92	; 0x92 <MOTORS_Init>
	TMR2_init();
     1be:	0e 94 94 07 	call	0xf28	; 0xf28 <TMR2_init>
	TMR2_SetDutyCycleValue_FastPWM(speed); // RANGE FROM 0 to 100
     1c2:	6c 2f       	mov	r22, r28
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 4e 09 	call	0x129c	; 0x129c <__floatunsisf>
     1ce:	0e 94 ab 07 	call	0xf56	; 0xf56 <TMR2_SetDutyCycleValue_FastPWM>
	TMR2_Start();
     1d2:	0e 94 a1 07 	call	0xf42	; 0xf42 <TMR2_Start>
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <LCD_sendCmnd>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1da:	cf 93       	push	r28
     1dc:	c8 2f       	mov	r28, r24
     1de:	40 e0       	ldi	r20, 0x00	; 0
     1e0:	61 e0       	ldi	r22, 0x01	; 1
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     1e8:	40 e0       	ldi	r20, 0x00	; 0
     1ea:	62 e0       	ldi	r22, 0x02	; 2
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     1f2:	c4 fb       	bst	r28, 4
     1f4:	44 27       	eor	r20, r20
     1f6:	40 f9       	bld	r20, 0
     1f8:	64 e0       	ldi	r22, 0x04	; 4
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     200:	c5 fb       	bst	r28, 5
     202:	44 27       	eor	r20, r20
     204:	40 f9       	bld	r20, 0
     206:	65 e0       	ldi	r22, 0x05	; 5
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     20e:	c6 fb       	bst	r28, 6
     210:	44 27       	eor	r20, r20
     212:	40 f9       	bld	r20, 0
     214:	66 e0       	ldi	r22, 0x06	; 6
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     21c:	4c 2f       	mov	r20, r28
     21e:	44 1f       	adc	r20, r20
     220:	44 27       	eor	r20, r20
     222:	44 1f       	adc	r20, r20
     224:	67 e0       	ldi	r22, 0x07	; 7
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     22c:	41 e0       	ldi	r20, 0x01	; 1
     22e:	63 e0       	ldi	r22, 0x03	; 3
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     236:	8f e9       	ldi	r24, 0x9F	; 159
     238:	9f e0       	ldi	r25, 0x0F	; 15
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_sendCmnd+0x60>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_sendCmnd+0x66>
     240:	00 00       	nop
     242:	40 e0       	ldi	r20, 0x00	; 0
     244:	63 e0       	ldi	r22, 0x03	; 3
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     24c:	4c 2f       	mov	r20, r28
     24e:	41 70       	andi	r20, 0x01	; 1
     250:	64 e0       	ldi	r22, 0x04	; 4
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     258:	c1 fb       	bst	r28, 1
     25a:	44 27       	eor	r20, r20
     25c:	40 f9       	bld	r20, 0
     25e:	65 e0       	ldi	r22, 0x05	; 5
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     266:	c2 fb       	bst	r28, 2
     268:	44 27       	eor	r20, r20
     26a:	40 f9       	bld	r20, 0
     26c:	66 e0       	ldi	r22, 0x06	; 6
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     274:	c3 fb       	bst	r28, 3
     276:	44 27       	eor	r20, r20
     278:	40 f9       	bld	r20, 0
     27a:	67 e0       	ldi	r22, 0x07	; 7
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     282:	41 e0       	ldi	r20, 0x01	; 1
     284:	63 e0       	ldi	r22, 0x03	; 3
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     28c:	8f e9       	ldi	r24, 0x9F	; 159
     28e:	9f e0       	ldi	r25, 0x0F	; 15
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <LCD_sendCmnd+0xb6>
     294:	00 c0       	rjmp	.+0      	; 0x296 <LCD_sendCmnd+0xbc>
     296:	00 00       	nop
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	63 e0       	ldi	r22, 0x03	; 3
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <LCD_init>:
     2a6:	41 e0       	ldi	r20, 0x01	; 1
     2a8:	61 e0       	ldi	r22, 0x01	; 1
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_setPinDirection>
     2b0:	41 e0       	ldi	r20, 0x01	; 1
     2b2:	62 e0       	ldi	r22, 0x02	; 2
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_setPinDirection>
     2ba:	41 e0       	ldi	r20, 0x01	; 1
     2bc:	63 e0       	ldi	r22, 0x03	; 3
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_setPinDirection>
     2c4:	41 e0       	ldi	r20, 0x01	; 1
     2c6:	64 e0       	ldi	r22, 0x04	; 4
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_setPinDirection>
     2ce:	41 e0       	ldi	r20, 0x01	; 1
     2d0:	65 e0       	ldi	r22, 0x05	; 5
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_setPinDirection>
     2d8:	41 e0       	ldi	r20, 0x01	; 1
     2da:	66 e0       	ldi	r22, 0x06	; 6
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_setPinDirection>
     2e2:	41 e0       	ldi	r20, 0x01	; 1
     2e4:	67 e0       	ldi	r22, 0x07	; 7
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_setPinDirection>
     2ec:	2f e7       	ldi	r18, 0x7F	; 127
     2ee:	85 eb       	ldi	r24, 0xB5	; 181
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	21 50       	subi	r18, 0x01	; 1
     2f4:	80 40       	sbci	r24, 0x00	; 0
     2f6:	90 40       	sbci	r25, 0x00	; 0
     2f8:	e1 f7       	brne	.-8      	; 0x2f2 <LCD_init+0x4c>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <LCD_init+0x56>
     2fc:	00 00       	nop
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	61 e0       	ldi	r22, 0x01	; 1
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     308:	40 e0       	ldi	r20, 0x00	; 0
     30a:	62 e0       	ldi	r22, 0x02	; 2
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     312:	40 e0       	ldi	r20, 0x00	; 0
     314:	64 e0       	ldi	r22, 0x04	; 4
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     31c:	41 e0       	ldi	r20, 0x01	; 1
     31e:	65 e0       	ldi	r22, 0x05	; 5
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	66 e0       	ldi	r22, 0x06	; 6
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     330:	40 e0       	ldi	r20, 0x00	; 0
     332:	67 e0       	ldi	r22, 0x07	; 7
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     33a:	41 e0       	ldi	r20, 0x01	; 1
     33c:	63 e0       	ldi	r22, 0x03	; 3
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     344:	8f e9       	ldi	r24, 0x9F	; 159
     346:	9f e0       	ldi	r25, 0x0F	; 15
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <LCD_init+0xa2>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <LCD_init+0xa8>
     34e:	00 00       	nop
     350:	40 e0       	ldi	r20, 0x00	; 0
     352:	63 e0       	ldi	r22, 0x03	; 3
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     35a:	88 e2       	ldi	r24, 0x28	; 40
     35c:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_sendCmnd>
     360:	90 ef       	ldi	r25, 0xF0	; 240
     362:	9a 95       	dec	r25
     364:	f1 f7       	brne	.-4      	; 0x362 <LCD_init+0xbc>
     366:	8f e0       	ldi	r24, 0x0F	; 15
     368:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_sendCmnd>
     36c:	20 ef       	ldi	r18, 0xF0	; 240
     36e:	2a 95       	dec	r18
     370:	f1 f7       	brne	.-4      	; 0x36e <LCD_init+0xc8>
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_sendCmnd>
     378:	8f e3       	ldi	r24, 0x3F	; 63
     37a:	9f e1       	ldi	r25, 0x1F	; 31
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <LCD_init+0xd6>
     380:	00 c0       	rjmp	.+0      	; 0x382 <LCD_init+0xdc>
     382:	00 00       	nop
     384:	86 e0       	ldi	r24, 0x06	; 6
     386:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_sendCmnd>
     38a:	08 95       	ret

0000038c <LCD_sendChar>:
     38c:	cf 93       	push	r28
     38e:	c8 2f       	mov	r28, r24
     390:	41 e0       	ldi	r20, 0x01	; 1
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     39a:	40 e0       	ldi	r20, 0x00	; 0
     39c:	62 e0       	ldi	r22, 0x02	; 2
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     3a4:	c4 fb       	bst	r28, 4
     3a6:	44 27       	eor	r20, r20
     3a8:	40 f9       	bld	r20, 0
     3aa:	64 e0       	ldi	r22, 0x04	; 4
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     3b2:	c5 fb       	bst	r28, 5
     3b4:	44 27       	eor	r20, r20
     3b6:	40 f9       	bld	r20, 0
     3b8:	65 e0       	ldi	r22, 0x05	; 5
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     3c0:	c6 fb       	bst	r28, 6
     3c2:	44 27       	eor	r20, r20
     3c4:	40 f9       	bld	r20, 0
     3c6:	66 e0       	ldi	r22, 0x06	; 6
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     3ce:	4c 2f       	mov	r20, r28
     3d0:	44 1f       	adc	r20, r20
     3d2:	44 27       	eor	r20, r20
     3d4:	44 1f       	adc	r20, r20
     3d6:	67 e0       	ldi	r22, 0x07	; 7
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     3de:	41 e0       	ldi	r20, 0x01	; 1
     3e0:	63 e0       	ldi	r22, 0x03	; 3
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     3e8:	8f e9       	ldi	r24, 0x9F	; 159
     3ea:	9f e0       	ldi	r25, 0x0F	; 15
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <LCD_sendChar+0x60>
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <LCD_sendChar+0x66>
     3f2:	00 00       	nop
     3f4:	40 e0       	ldi	r20, 0x00	; 0
     3f6:	63 e0       	ldi	r22, 0x03	; 3
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     3fe:	4c 2f       	mov	r20, r28
     400:	41 70       	andi	r20, 0x01	; 1
     402:	64 e0       	ldi	r22, 0x04	; 4
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     40a:	c1 fb       	bst	r28, 1
     40c:	44 27       	eor	r20, r20
     40e:	40 f9       	bld	r20, 0
     410:	65 e0       	ldi	r22, 0x05	; 5
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     418:	c2 fb       	bst	r28, 2
     41a:	44 27       	eor	r20, r20
     41c:	40 f9       	bld	r20, 0
     41e:	66 e0       	ldi	r22, 0x06	; 6
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     426:	c3 fb       	bst	r28, 3
     428:	44 27       	eor	r20, r20
     42a:	40 f9       	bld	r20, 0
     42c:	67 e0       	ldi	r22, 0x07	; 7
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     434:	41 e0       	ldi	r20, 0x01	; 1
     436:	63 e0       	ldi	r22, 0x03	; 3
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     43e:	8f e9       	ldi	r24, 0x9F	; 159
     440:	9f e0       	ldi	r25, 0x0F	; 15
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	f1 f7       	brne	.-4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     446:	00 c0       	rjmp	.+0      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     448:	00 00       	nop
     44a:	40 e0       	ldi	r20, 0x00	; 0
     44c:	63 e0       	ldi	r22, 0x03	; 3
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <LCD_clear>:
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_sendCmnd>
     45e:	8f e3       	ldi	r24, 0x3F	; 63
     460:	9f e1       	ldi	r25, 0x1F	; 31
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <LCD_clear+0xa>
     466:	00 c0       	rjmp	.+0      	; 0x468 <LCD_clear+0x10>
     468:	00 00       	nop
     46a:	08 95       	ret

0000046c <LCD_writeString>:
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	00 97       	sbiw	r24, 0x00	; 0
     474:	29 f4       	brne	.+10     	; 0x480 <LCD_writeString+0x14>
     476:	0c c0       	rjmp	.+24     	; 0x490 <LCD_writeString+0x24>
     478:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_sendChar>
     47c:	cf 5f       	subi	r28, 0xFF	; 255
     47e:	02 c0       	rjmp	.+4      	; 0x484 <LCD_writeString+0x18>
     480:	8c 01       	movw	r16, r24
     482:	c0 e0       	ldi	r28, 0x00	; 0
     484:	f8 01       	movw	r30, r16
     486:	ec 0f       	add	r30, r28
     488:	f1 1d       	adc	r31, r1
     48a:	80 81       	ld	r24, Z
     48c:	81 11       	cpse	r24, r1
     48e:	f4 cf       	rjmp	.-24     	; 0x478 <LCD_writeString+0xc>
     490:	cf 91       	pop	r28
     492:	1f 91       	pop	r17
     494:	0f 91       	pop	r16
     496:	08 95       	ret

00000498 <LCD_goToSpecificPosition>:
}


void LCD_goToSpecificPosition(u8 LineNumber, u8 Position)
{
	switch(LineNumber)
     498:	81 30       	cpi	r24, 0x01	; 1
     49a:	19 f0       	breq	.+6      	; 0x4a2 <LCD_goToSpecificPosition+0xa>
     49c:	82 30       	cpi	r24, 0x02	; 2
     49e:	49 f0       	breq	.+18     	; 0x4b2 <LCD_goToSpecificPosition+0x1a>
     4a0:	08 95       	ret
	{
		case LCD_LINE_ONE:
		LCD_sendCmnd(0x80+Position);
     4a2:	80 e8       	ldi	r24, 0x80	; 128
     4a4:	86 0f       	add	r24, r22
     4a6:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_sendCmnd>
     4aa:	80 ef       	ldi	r24, 0xF0	; 240
     4ac:	8a 95       	dec	r24
     4ae:	f1 f7       	brne	.-4      	; 0x4ac <LCD_goToSpecificPosition+0x14>
     4b0:	08 95       	ret
		_delay_us(45);
		break;
		
		case LCD_LINE_TWO:
		LCD_sendCmnd(0xc0+Position);
     4b2:	80 ec       	ldi	r24, 0xC0	; 192
     4b4:	86 0f       	add	r24, r22
     4b6:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_sendCmnd>
     4ba:	80 ef       	ldi	r24, 0xF0	; 240
     4bc:	8a 95       	dec	r24
     4be:	f1 f7       	brne	.-4      	; 0x4bc <LCD_goToSpecificPosition+0x24>
     4c0:	08 95       	ret

000004c2 <LCD_writeNumber>:
	}
}


void LCD_writeNumber(u32 number)
{
     4c2:	cf 92       	push	r12
     4c4:	df 92       	push	r13
     4c6:	ef 92       	push	r14
     4c8:	ff 92       	push	r15
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	8b 01       	movw	r16, r22
     4d0:	9c 01       	movw	r18, r24
	u32 reversedNum = 1;
	
	if(number == 0)
     4d2:	67 2b       	or	r22, r23
     4d4:	68 2b       	or	r22, r24
     4d6:	69 2b       	or	r22, r25
     4d8:	49 f5       	brne	.+82     	; 0x52c <LCD_writeNumber+0x6a>
	{
		LCD_sendChar('0');
     4da:	80 e3       	ldi	r24, 0x30	; 48
     4dc:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_sendChar>
     4e0:	45 c0       	rjmp	.+138    	; 0x56c <LCD_writeNumber+0xaa>
	else
	{
		// reverse the number
		while(number != 0)
		{
			reversedNum = reversedNum*10 + number%10;
     4e2:	dc 01       	movw	r26, r24
     4e4:	cb 01       	movw	r24, r22
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	aa 1f       	adc	r26, r26
     4ec:	bb 1f       	adc	r27, r27
     4ee:	6c 01       	movw	r12, r24
     4f0:	7d 01       	movw	r14, r26
     4f2:	cc 0c       	add	r12, r12
     4f4:	dd 1c       	adc	r13, r13
     4f6:	ee 1c       	adc	r14, r14
     4f8:	ff 1c       	adc	r15, r15
     4fa:	cc 0c       	add	r12, r12
     4fc:	dd 1c       	adc	r13, r13
     4fe:	ee 1c       	adc	r14, r14
     500:	ff 1c       	adc	r15, r15
     502:	c8 0e       	add	r12, r24
     504:	d9 1e       	adc	r13, r25
     506:	ea 1e       	adc	r14, r26
     508:	fb 1e       	adc	r15, r27
     50a:	c9 01       	movw	r24, r18
     50c:	b8 01       	movw	r22, r16
     50e:	2a e0       	ldi	r18, 0x0A	; 10
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__udivmodsi4>
     51a:	6c 0d       	add	r22, r12
     51c:	7d 1d       	adc	r23, r13
     51e:	8e 1d       	adc	r24, r14
     520:	9f 1d       	adc	r25, r15
			number /= 10;
     522:	02 2f       	mov	r16, r18
     524:	13 2f       	mov	r17, r19
     526:	24 2f       	mov	r18, r20
     528:	35 2f       	mov	r19, r21
     52a:	04 c0       	rjmp	.+8      	; 0x534 <LCD_writeNumber+0x72>
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
		LCD_sendChar('0');
	}
	else
	{
		// reverse the number
		while(number != 0)
     534:	01 15       	cp	r16, r1
     536:	11 05       	cpc	r17, r1
     538:	21 05       	cpc	r18, r1
     53a:	31 05       	cpc	r19, r1
     53c:	91 f6       	brne	.-92     	; 0x4e2 <LCD_writeNumber+0x20>
		}
		
		
		do
		{
			LCD_sendChar(reversedNum%10 + '0');
     53e:	2a e0       	ldi	r18, 0x0A	; 10
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	40 e0       	ldi	r20, 0x00	; 0
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__udivmodsi4>
     54a:	e2 2e       	mov	r14, r18
     54c:	f3 2e       	mov	r15, r19
     54e:	04 2f       	mov	r16, r20
     550:	15 2f       	mov	r17, r21
     552:	80 e3       	ldi	r24, 0x30	; 48
     554:	86 0f       	add	r24, r22
     556:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_sendChar>
			reversedNum /= 10;
     55a:	6e 2d       	mov	r22, r14
     55c:	7f 2d       	mov	r23, r15
     55e:	80 2f       	mov	r24, r16
     560:	91 2f       	mov	r25, r17
		}
		while(reversedNum != 1);
     562:	61 30       	cpi	r22, 0x01	; 1
     564:	71 05       	cpc	r23, r1
     566:	81 05       	cpc	r24, r1
     568:	91 05       	cpc	r25, r1
     56a:	49 f7       	brne	.-46     	; 0x53e <LCD_writeNumber+0x7c>
	}
     56c:	1f 91       	pop	r17
     56e:	0f 91       	pop	r16
     570:	ff 90       	pop	r15
     572:	ef 90       	pop	r14
     574:	df 90       	pop	r13
     576:	cf 90       	pop	r12
     578:	08 95       	ret

0000057a <SERVO_Init>:


void SERVO_Init(void)
{
	/* OC1A pin as output pin */
	DIO_setPinDirection(SERVO_PORT, SERVO_PIN, DIO_PIN_OUTPUT);
     57a:	41 e0       	ldi	r20, 0x01	; 1
     57c:	65 e0       	ldi	r22, 0x05	; 5
     57e:	83 e0       	ldi	r24, 0x03	; 3
     580:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_setPinDirection>
	
	/* TMR1 init at pwm mode 14 */
	TMR1_init();
     584:	0e 94 cc 06 	call	0xd98	; 0xd98 <TMR1_init>
     588:	08 95       	ret

0000058a <SERVO_ON>:


void SERVO_ON(f32 Angle)
{
	f32 DutyCycle;
	DutyCycle=5.0+(Angle/36.0);
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	40 e1       	ldi	r20, 0x10	; 16
     590:	52 e4       	ldi	r21, 0x42	; 66
     592:	0e 94 ad 08 	call	0x115a	; 0x115a <__divsf3>
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	40 ea       	ldi	r20, 0xA0	; 160
     59c:	50 e4       	ldi	r21, 0x40	; 64
     59e:	0e 94 3c 08 	call	0x1078	; 0x1078 <__addsf3>
	TMR1_setFastPWM_usingMode14(DutyCycle , 50 );
     5a2:	42 e3       	ldi	r20, 0x32	; 50
     5a4:	50 e0       	ldi	r21, 0x00	; 0
     5a6:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <TMR1_setFastPWM_usingMode14>
	TMR1_start();
     5aa:	0e 94 df 06 	call	0xdbe	; 0xdbe <TMR1_start>
     5ae:	08 95       	ret

000005b0 <ULTRASONIC_Init>:
u32 timer_counter=0;
f64 distance;

void ULTRASONIC_Init(void)
{
	DIO_setPinDirection(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_PIN_OUTPUT);
     5b0:	41 e0       	ldi	r20, 0x01	; 1
     5b2:	66 e0       	ldi	r22, 0x06	; 6
     5b4:	83 e0       	ldi	r24, 0x03	; 3
     5b6:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_setPinDirection>
	DIO_setPinDirection(ULTRASONIC_ECHO_PORT,ULTRASONIC_ECHO_PIN,DIO_PIN_INPUT);
     5ba:	40 e0       	ldi	r20, 0x00	; 0
     5bc:	63 e0       	ldi	r22, 0x03	; 3
     5be:	83 e0       	ldi	r24, 0x03	; 3
     5c0:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_setPinDirection>
	DIO_setPinValue(ULTRASONIC_ECHO_PORT,ULTRASONIC_ECHO_PIN,DIO_PIN_HIGH);
     5c4:	41 e0       	ldi	r20, 0x01	; 1
     5c6:	63 e0       	ldi	r22, 0x03	; 3
     5c8:	83 e0       	ldi	r24, 0x03	; 3
     5ca:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
	EXTI_enable(EXTI_INT1,EXTI_ANY_LOGICAL_CHANGE);
     5ce:	63 e0       	ldi	r22, 0x03	; 3
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	0e 94 bf 05 	call	0xb7e	; 0xb7e <EXTI_enable>
	TMR0_init();
     5d6:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <TMR0_init>
	TMR0_Start();
     5da:	0e 94 85 06 	call	0xd0a	; 0xd0a <TMR0_Start>
     5de:	08 95       	ret

000005e0 <Ultrasonic_Get_Distance>:
	
}
void Ultrasonic_Get_Distance(f64* DistanceValue)
{
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	ec 01       	movw	r28, r24
	if (!sensor_working)
     5e6:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <sensor_working>
     5ea:	81 11       	cpse	r24, r1
     5ec:	10 c0       	rjmp	.+32     	; 0x60e <Ultrasonic_Get_Distance+0x2e>
	{
		DIO_setPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_PIN_HIGH);
     5ee:	41 e0       	ldi	r20, 0x01	; 1
     5f0:	66 e0       	ldi	r22, 0x06	; 6
     5f2:	83 e0       	ldi	r24, 0x03	; 3
     5f4:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     5f8:	80 e5       	ldi	r24, 0x50	; 80
     5fa:	8a 95       	dec	r24
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <Ultrasonic_Get_Distance+0x1a>
		_delay_us(15);
		DIO_setPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_PIN_LOW);
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	66 e0       	ldi	r22, 0x06	; 6
     602:	83 e0       	ldi	r24, 0x03	; 3
     604:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
		sensor_working=1;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <sensor_working>

	}
	*DistanceValue=distance;
     60e:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <distance>
     612:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <distance+0x1>
     616:	a0 91 aa 00 	lds	r26, 0x00AA	; 0x8000aa <distance+0x2>
     61a:	b0 91 ab 00 	lds	r27, 0x00AB	; 0x8000ab <distance+0x3>
     61e:	88 83       	st	Y, r24
     620:	99 83       	std	Y+1, r25	; 0x01
     622:	aa 83       	std	Y+2, r26	; 0x02
     624:	bb 83       	std	Y+3, r27	; 0x03
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <__vector_2>:


void  __vector_2(void) __attribute__((signal));
void  __vector_2(void)
{
     62c:	1f 92       	push	r1
     62e:	0f 92       	push	r0
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	0f 92       	push	r0
     634:	11 24       	eor	r1, r1
     636:	2f 93       	push	r18
     638:	3f 93       	push	r19
     63a:	4f 93       	push	r20
     63c:	5f 93       	push	r21
     63e:	6f 93       	push	r22
     640:	7f 93       	push	r23
     642:	8f 93       	push	r24
     644:	9f 93       	push	r25
     646:	af 93       	push	r26
     648:	bf 93       	push	r27
     64a:	ef 93       	push	r30
     64c:	ff 93       	push	r31
	if(sensor_working==1)
     64e:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <sensor_working>
     652:	81 30       	cpi	r24, 0x01	; 1
     654:	09 f0       	breq	.+2      	; 0x658 <__vector_2+0x2c>
     656:	51 c0       	rjmp	.+162    	; 0x6fa <__vector_2+0xce>
	{
		if (rising_edge==0)
     658:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <rising_edge>
     65c:	81 11       	cpse	r24, r1
     65e:	0d c0       	rjmp	.+26     	; 0x67a <__vector_2+0x4e>
		{
			TCNT0=0X00;
     660:	12 be       	out	0x32, r1	; 50
			rising_edge=1;
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <rising_edge>
			timer_counter=0;
     668:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
     66c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__data_end+0x1>
     670:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end+0x2>
     674:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__data_end+0x3>
     678:	40 c0       	rjmp	.+128    	; 0x6fa <__vector_2+0xce>
		}
		else
		{
			distance=(343*(timer_counter*256+TCNT0)/320000)+1;
     67a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
     67e:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
     682:	a0 91 8a 00 	lds	r26, 0x008A	; 0x80008a <__data_end+0x2>
     686:	b0 91 8b 00 	lds	r27, 0x008B	; 0x80008b <__data_end+0x3>
     68a:	44 27       	eor	r20, r20
     68c:	58 2f       	mov	r21, r24
     68e:	69 2f       	mov	r22, r25
     690:	7a 2f       	mov	r23, r26
     692:	82 b7       	in	r24, 0x32	; 50
     694:	9a 01       	movw	r18, r20
     696:	ab 01       	movw	r20, r22
     698:	28 0f       	add	r18, r24
     69a:	31 1d       	adc	r19, r1
     69c:	41 1d       	adc	r20, r1
     69e:	51 1d       	adc	r21, r1
     6a0:	a7 e5       	ldi	r26, 0x57	; 87
     6a2:	b1 e0       	ldi	r27, 0x01	; 1
     6a4:	0e 94 94 0a 	call	0x1528	; 0x1528 <__muluhisi3>
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	32 ee       	ldi	r19, 0xE2	; 226
     6ac:	44 e0       	ldi	r20, 0x04	; 4
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__udivmodsi4>
     6b4:	ca 01       	movw	r24, r20
     6b6:	b9 01       	movw	r22, r18
     6b8:	6f 5f       	subi	r22, 0xFF	; 255
     6ba:	7f 4f       	sbci	r23, 0xFF	; 255
     6bc:	8f 4f       	sbci	r24, 0xFF	; 255
     6be:	9f 4f       	sbci	r25, 0xFF	; 255
     6c0:	0e 94 4e 09 	call	0x129c	; 0x129c <__floatunsisf>
     6c4:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <distance>
     6c8:	70 93 a9 00 	sts	0x00A9, r23	; 0x8000a9 <distance+0x1>
     6cc:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <distance+0x2>
     6d0:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <distance+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d4:	2f ef       	ldi	r18, 0xFF	; 255
     6d6:	83 ef       	ldi	r24, 0xF3	; 243
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	21 50       	subi	r18, 0x01	; 1
     6dc:	80 40       	sbci	r24, 0x00	; 0
     6de:	90 40       	sbci	r25, 0x00	; 0
     6e0:	e1 f7       	brne	.-8      	; 0x6da <__vector_2+0xae>
     6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <__vector_2+0xb8>
     6e4:	00 00       	nop
			_delay_ms(40);
			timer_counter=0;
     6e6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
     6ea:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__data_end+0x1>
     6ee:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end+0x2>
     6f2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__data_end+0x3>
			rising_edge=0;
     6f6:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <rising_edge>
		}
	}
}
     6fa:	ff 91       	pop	r31
     6fc:	ef 91       	pop	r30
     6fe:	bf 91       	pop	r27
     700:	af 91       	pop	r26
     702:	9f 91       	pop	r25
     704:	8f 91       	pop	r24
     706:	7f 91       	pop	r23
     708:	6f 91       	pop	r22
     70a:	5f 91       	pop	r21
     70c:	4f 91       	pop	r20
     70e:	3f 91       	pop	r19
     710:	2f 91       	pop	r18
     712:	0f 90       	pop	r0
     714:	0f be       	out	0x3f, r0	; 63
     716:	0f 90       	pop	r0
     718:	1f 90       	pop	r1
     71a:	18 95       	reti

0000071c <__vector_11>:


void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     71c:	1f 92       	push	r1
     71e:	0f 92       	push	r0
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	0f 92       	push	r0
     724:	11 24       	eor	r1, r1
     726:	2f 93       	push	r18
     728:	8f 93       	push	r24
     72a:	9f 93       	push	r25
     72c:	af 93       	push	r26
     72e:	bf 93       	push	r27
	timer_counter++;
     730:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
     734:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
     738:	a0 91 8a 00 	lds	r26, 0x008A	; 0x80008a <__data_end+0x2>
     73c:	b0 91 8b 00 	lds	r27, 0x008B	; 0x80008b <__data_end+0x3>
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	a1 1d       	adc	r26, r1
     744:	b1 1d       	adc	r27, r1
     746:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
     74a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
     74e:	a0 93 8a 00 	sts	0x008A, r26	; 0x80008a <__data_end+0x2>
     752:	b0 93 8b 00 	sts	0x008B, r27	; 0x80008b <__data_end+0x3>
	if( timer_counter >1462)
     756:	87 3b       	cpi	r24, 0xB7	; 183
     758:	95 40       	sbci	r25, 0x05	; 5
     75a:	a1 05       	cpc	r26, r1
     75c:	b1 05       	cpc	r27, r1
     75e:	68 f0       	brcs	.+26     	; 0x77a <__vector_11+0x5e>
	{
		TCNT0 = 0x00;
     760:	12 be       	out	0x32, r1	; 50
		sensor_working=0;
     762:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <sensor_working>
		rising_edge=0;
     766:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <rising_edge>
		timer_counter=0;
     76a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
     76e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__data_end+0x1>
     772:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end+0x2>
     776:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__data_end+0x3>
	}
	
     77a:	bf 91       	pop	r27
     77c:	af 91       	pop	r26
     77e:	9f 91       	pop	r25
     780:	8f 91       	pop	r24
     782:	2f 91       	pop	r18
     784:	0f 90       	pop	r0
     786:	0f be       	out	0x3f, r0	; 63
     788:	0f 90       	pop	r0
     78a:	1f 90       	pop	r1
     78c:	18 95       	reti

0000078e <main>:


/************************************************************************/
/*                         Main                                          */
/************************************************************************/
int main(void){
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	2c 97       	sbiw	r28, 0x0c	; 12
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
	
	/* Initialization Robot */
	
	LCD_init();
     7a2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_init>
	
	GI_enable();
     7a6:	0e 94 76 06 	call	0xcec	; 0xcec <GI_enable>
	SERVO_Init();
     7aa:	0e 94 bd 02 	call	0x57a	; 0x57a <SERVO_Init>
	SERVO_ON(FORWARD_Angle);
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	87 e0       	ldi	r24, 0x07	; 7
     7b4:	93 e4       	ldi	r25, 0x43	; 67
     7b6:	0e 94 c5 02 	call	0x58a	; 0x58a <SERVO_ON>
	
	ULTRASONIC_Init();
     7ba:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ULTRASONIC_Init>
	
	MOTORS_Init();
     7be:	0e 94 49 00 	call	0x92	; 0x92 <MOTORS_Init>
	CAR_MoveForward();
     7c2:	0e 94 72 00 	call	0xe4	; 0xe4 <CAR_MoveForward>
	CAR_SendDutyCycleAndStart(Speed);
     7c6:	85 e5       	ldi	r24, 0x55	; 85
     7c8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <CAR_SendDutyCycleAndStart>
	
	DIO_setPinDirection( DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT);
     7cc:	41 e0       	ldi	r20, 0x01	; 1
     7ce:	62 e0       	ldi	r22, 0x02	; 2
     7d0:	82 e0       	ldi	r24, 0x02	; 2
     7d2:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_setPinDirection>
	DIO_setPinDirection( DIO_PORTC,DIO_PIN7,DIO_PIN_OUTPUT);
     7d6:	41 e0       	ldi	r20, 0x01	; 1
     7d8:	67 e0       	ldi	r22, 0x07	; 7
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_setPinDirection>
	f64 UltraSonic_LeftValue;
	
    while(1)
    {         
		
		Ultrasonic_Get_Distance(&UltraSonic_ForwardValue);
     7e0:	ce 01       	movw	r24, r28
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <Ultrasonic_Get_Distance>
		
	
		if ( UltraSonic_ForwardValue>=20.00)
     7e8:	69 81       	ldd	r22, Y+1	; 0x01
     7ea:	7a 81       	ldd	r23, Y+2	; 0x02
     7ec:	8b 81       	ldd	r24, Y+3	; 0x03
     7ee:	9c 81       	ldd	r25, Y+4	; 0x04
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	40 ea       	ldi	r20, 0xA0	; 160
     7f6:	51 e4       	ldi	r21, 0x41	; 65
     7f8:	0e 94 00 0a 	call	0x1400	; 0x1400 <__gesf2>
     7fc:	88 23       	and	r24, r24
     7fe:	6c f0       	brlt	.+26     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
		{
			DIO_setPinValue( DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
     800:	41 e0       	ldi	r20, 0x01	; 1
     802:	62 e0       	ldi	r22, 0x02	; 2
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
			CAR_MoveForward();
     80a:	0e 94 72 00 	call	0xe4	; 0xe4 <CAR_MoveForward>
			
			DIO_setPinValue( DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
     80e:	40 e0       	ldi	r20, 0x00	; 0
     810:	62 e0       	ldi	r22, 0x02	; 2
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     818:	e3 cf       	rjmp	.-58     	; 0x7e0 <main+0x52>
		}
		else
		{
			
		DIO_setPinValue( DIO_PORTC,DIO_PIN7,DIO_PIN_HIGH);
     81a:	41 e0       	ldi	r20, 0x01	; 1
     81c:	67 e0       	ldi	r22, 0x07	; 7
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
     824:	2f ef       	ldi	r18, 0xFF	; 255
     826:	83 ed       	ldi	r24, 0xD3	; 211
     828:	90 e3       	ldi	r25, 0x30	; 48
     82a:	21 50       	subi	r18, 0x01	; 1
     82c:	80 40       	sbci	r24, 0x00	; 0
     82e:	90 40       	sbci	r25, 0x00	; 0
     830:	e1 f7       	brne	.-8      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     832:	00 c0       	rjmp	.+0      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     834:	00 00       	nop
		_delay_ms(1000);
		DIO_setPinValue( DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	67 e0       	ldi	r22, 0x07	; 7
     83a:	82 e0       	ldi	r24, 0x02	; 2
     83c:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_setPinValue>
		
			CAR_Stop();
     840:	0e 94 9c 00 	call	0x138	; 0x138 <CAR_Stop>
			CAR_MoveBackward();
     844:	0e 94 87 00 	call	0x10e	; 0x10e <CAR_MoveBackward>
     848:	2f ef       	ldi	r18, 0xFF	; 255
     84a:	89 e6       	ldi	r24, 0x69	; 105
     84c:	98 e1       	ldi	r25, 0x18	; 24
     84e:	21 50       	subi	r18, 0x01	; 1
     850:	80 40       	sbci	r24, 0x00	; 0
     852:	90 40       	sbci	r25, 0x00	; 0
     854:	e1 f7       	brne	.-8      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     856:	00 c0       	rjmp	.+0      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     858:	00 00       	nop
			_delay_ms(500);
			CAR_Stop();
     85a:	0e 94 9c 00 	call	0x138	; 0x138 <CAR_Stop>

			// Measure Distance At Right
			SERVO_ON(RIGHT_Angle);
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	84 e3       	ldi	r24, 0x34	; 52
     864:	92 e4       	ldi	r25, 0x42	; 66
     866:	0e 94 c5 02 	call	0x58a	; 0x58a <SERVO_ON>
	
 			Ultrasonic_Get_Distance(&UltraSonic_RightValue);
     86a:	ce 01       	movw	r24, r28
     86c:	05 96       	adiw	r24, 0x05	; 5
     86e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <Ultrasonic_Get_Distance>
			LCD_clear();
     872:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_clear>
			LCD_goToSpecificPosition(1,1);
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_goToSpecificPosition>
			LCD_writeString("R=");
     87e:	80 e6       	ldi	r24, 0x60	; 96
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_writeString>
			LCD_writeNumber(UltraSonic_RightValue);
     886:	6d 81       	ldd	r22, Y+5	; 0x05
     888:	7e 81       	ldd	r23, Y+6	; 0x06
     88a:	8f 81       	ldd	r24, Y+7	; 0x07
     88c:	98 85       	ldd	r25, Y+8	; 0x08
     88e:	0e 94 1f 09 	call	0x123e	; 0x123e <__fixunssfsi>
     892:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_writeNumber>

			LCD_writeString("CM");
     896:	83 e6       	ldi	r24, 0x63	; 99
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_writeString>
     89e:	2f ef       	ldi	r18, 0xFF	; 255
     8a0:	83 ed       	ldi	r24, 0xD3	; 211
     8a2:	90 e3       	ldi	r25, 0x30	; 48
     8a4:	21 50       	subi	r18, 0x01	; 1
     8a6:	80 40       	sbci	r24, 0x00	; 0
     8a8:	90 40       	sbci	r25, 0x00	; 0
     8aa:	e1 f7       	brne	.-8      	; 0x8a4 <__stack+0x45>
     8ac:	00 c0       	rjmp	.+0      	; 0x8ae <__stack+0x4f>
     8ae:	00 00       	nop

			_delay_ms(1000);
			// Measure Distance At Left
			SERVO_ON(LEFT_Angle);
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	87 e8       	ldi	r24, 0x87	; 135
     8b6:	93 e4       	ldi	r25, 0x43	; 67
     8b8:	0e 94 c5 02 	call	0x58a	; 0x58a <SERVO_ON>
			
			Ultrasonic_Get_Distance(&UltraSonic_LeftValue);
     8bc:	ce 01       	movw	r24, r28
     8be:	09 96       	adiw	r24, 0x09	; 9
     8c0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <Ultrasonic_Get_Distance>
			 LCD_clear();
     8c4:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_clear>
			LCD_goToSpecificPosition(1,2);
     8c8:	62 e0       	ldi	r22, 0x02	; 2
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_goToSpecificPosition>
			LCD_writeString("L=");
     8d0:	86 e6       	ldi	r24, 0x66	; 102
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_writeString>
			LCD_writeNumber(UltraSonic_LeftValue);
     8d8:	69 85       	ldd	r22, Y+9	; 0x09
     8da:	7a 85       	ldd	r23, Y+10	; 0x0a
     8dc:	8b 85       	ldd	r24, Y+11	; 0x0b
     8de:	9c 85       	ldd	r25, Y+12	; 0x0c
     8e0:	0e 94 1f 09 	call	0x123e	; 0x123e <__fixunssfsi>
     8e4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_writeNumber>
			LCD_writeString("CM");
     8e8:	83 e6       	ldi	r24, 0x63	; 99
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_writeString>
     8f0:	2f ef       	ldi	r18, 0xFF	; 255
     8f2:	83 ed       	ldi	r24, 0xD3	; 211
     8f4:	90 e3       	ldi	r25, 0x30	; 48
     8f6:	21 50       	subi	r18, 0x01	; 1
     8f8:	80 40       	sbci	r24, 0x00	; 0
     8fa:	90 40       	sbci	r25, 0x00	; 0
     8fc:	e1 f7       	brne	.-8      	; 0x8f6 <__stack+0x97>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <__stack+0xa1>
     900:	00 00       	nop
			_delay_ms(1000);
			
			
			if (UltraSonic_RightValue > UltraSonic_LeftValue)
     902:	6d 81       	ldd	r22, Y+5	; 0x05
     904:	7e 81       	ldd	r23, Y+6	; 0x06
     906:	8f 81       	ldd	r24, Y+7	; 0x07
     908:	98 85       	ldd	r25, Y+8	; 0x08
     90a:	29 85       	ldd	r18, Y+9	; 0x09
     90c:	3a 85       	ldd	r19, Y+10	; 0x0a
     90e:	4b 85       	ldd	r20, Y+11	; 0x0b
     910:	5c 85       	ldd	r21, Y+12	; 0x0c
     912:	0e 94 00 0a 	call	0x1400	; 0x1400 <__gesf2>
     916:	18 16       	cp	r1, r24
     918:	1c f5       	brge	.+70     	; 0x960 <__stack+0x101>
						{
							//MOVE Right
							LCD_clear();
     91a:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_clear>
							
							LCD_writeString("   Move Right  ");
     91e:	89 e6       	ldi	r24, 0x69	; 105
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_writeString>
							SERVO_ON(FORWARD_Angle);
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	87 e0       	ldi	r24, 0x07	; 7
     92c:	93 e4       	ldi	r25, 0x43	; 67
     92e:	0e 94 c5 02 	call	0x58a	; 0x58a <SERVO_ON>
     932:	2f ef       	ldi	r18, 0xFF	; 255
     934:	81 ee       	ldi	r24, 0xE1	; 225
     936:	94 e0       	ldi	r25, 0x04	; 4
     938:	21 50       	subi	r18, 0x01	; 1
     93a:	80 40       	sbci	r24, 0x00	; 0
     93c:	90 40       	sbci	r25, 0x00	; 0
     93e:	e1 f7       	brne	.-8      	; 0x938 <__stack+0xd9>
     940:	00 c0       	rjmp	.+0      	; 0x942 <__stack+0xe3>
     942:	00 00       	nop
							_delay_ms(100);
							CAR_MoveForwardRight();
     944:	0e 94 b1 00 	call	0x162	; 0x162 <CAR_MoveForwardRight>
     948:	2f ef       	ldi	r18, 0xFF	; 255
     94a:	89 e6       	ldi	r24, 0x69	; 105
     94c:	98 e1       	ldi	r25, 0x18	; 24
     94e:	21 50       	subi	r18, 0x01	; 1
     950:	80 40       	sbci	r24, 0x00	; 0
     952:	90 40       	sbci	r25, 0x00	; 0
     954:	e1 f7       	brne	.-8      	; 0x94e <__stack+0xef>
     956:	00 c0       	rjmp	.+0      	; 0x958 <__stack+0xf9>
     958:	00 00       	nop
							_delay_ms(500);
							CAR_Stop();
     95a:	0e 94 9c 00 	call	0x138	; 0x138 <CAR_Stop>
     95e:	40 cf       	rjmp	.-384    	; 0x7e0 <main+0x52>
 			else
 			{
				 
 				//MOVE Left
				 
				 LCD_clear();
     960:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_clear>
				 LCD_writeString("  Move LEFT   ");
     964:	89 e7       	ldi	r24, 0x79	; 121
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_writeString>
 				SERVO_ON(FORWARD_Angle);
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	87 e0       	ldi	r24, 0x07	; 7
     972:	93 e4       	ldi	r25, 0x43	; 67
     974:	0e 94 c5 02 	call	0x58a	; 0x58a <SERVO_ON>
     978:	2f ef       	ldi	r18, 0xFF	; 255
     97a:	81 ee       	ldi	r24, 0xE1	; 225
     97c:	94 e0       	ldi	r25, 0x04	; 4
     97e:	21 50       	subi	r18, 0x01	; 1
     980:	80 40       	sbci	r24, 0x00	; 0
     982:	90 40       	sbci	r25, 0x00	; 0
     984:	e1 f7       	brne	.-8      	; 0x97e <__stack+0x11f>
     986:	00 c0       	rjmp	.+0      	; 0x988 <__stack+0x129>
     988:	00 00       	nop
 				_delay_ms(100);
 				CAR_MoveForwardleft();	
     98a:	0e 94 c6 00 	call	0x18c	; 0x18c <CAR_MoveForwardleft>
     98e:	2f ef       	ldi	r18, 0xFF	; 255
     990:	89 e6       	ldi	r24, 0x69	; 105
     992:	98 e1       	ldi	r25, 0x18	; 24
     994:	21 50       	subi	r18, 0x01	; 1
     996:	80 40       	sbci	r24, 0x00	; 0
     998:	90 40       	sbci	r25, 0x00	; 0
     99a:	e1 f7       	brne	.-8      	; 0x994 <__stack+0x135>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <__stack+0x13f>
     99e:	00 00       	nop
 				_delay_ms(500);
 				CAR_Stop();
     9a0:	0e 94 9c 00 	call	0x138	; 0x138 <CAR_Stop>
     9a4:	1d cf       	rjmp	.-454    	; 0x7e0 <main+0x52>

000009a6 <DIO_setPinDirection>:
#include "../../MCAL/DIO/DIO_interface.h"
#include "../../MCAL/DIO/DIO_private.h"

void DIO_setPinDirection(u8 PortId, u8 PinId, u8 PinDirection)
{
	if((PortId<=3)&&(PinId<=7)&&((PinDirection == DIO_PIN_INPUT)||(PinDirection == DIO_PIN_OUTPUT)))
     9a6:	84 30       	cpi	r24, 0x04	; 4
     9a8:	08 f0       	brcs	.+2      	; 0x9ac <DIO_setPinDirection+0x6>
     9aa:	72 c0       	rjmp	.+228    	; 0xa90 <DIO_setPinDirection+0xea>
     9ac:	68 30       	cpi	r22, 0x08	; 8
     9ae:	08 f0       	brcs	.+2      	; 0x9b2 <DIO_setPinDirection+0xc>
     9b0:	6f c0       	rjmp	.+222    	; 0xa90 <DIO_setPinDirection+0xea>
     9b2:	42 30       	cpi	r20, 0x02	; 2
     9b4:	08 f0       	brcs	.+2      	; 0x9b8 <DIO_setPinDirection+0x12>
     9b6:	6c c0       	rjmp	.+216    	; 0xa90 <DIO_setPinDirection+0xea>
	{
		switch(PortId)
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	01 f1       	breq	.+64     	; 0x9fc <DIO_setPinDirection+0x56>
     9bc:	30 f0       	brcs	.+12     	; 0x9ca <DIO_setPinDirection+0x24>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	b1 f1       	breq	.+108    	; 0xa2e <DIO_setPinDirection+0x88>
     9c2:	83 30       	cpi	r24, 0x03	; 3
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <DIO_setPinDirection+0x22>
     9c6:	4c c0       	rjmp	.+152    	; 0xa60 <DIO_setPinDirection+0xba>
     9c8:	08 95       	ret
		{
			case DIO_PORTA:
			if(DIO_PIN_OUTPUT == PinDirection) 
     9ca:	41 30       	cpi	r20, 0x01	; 1
     9cc:	59 f4       	brne	.+22     	; 0x9e4 <DIO_setPinDirection+0x3e>
			{
				SET_BIT(DDRA,PinId);
     9ce:	2a b3       	in	r18, 0x1a	; 26
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <DIO_setPinDirection+0x34>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	6a 95       	dec	r22
     9dc:	e2 f7       	brpl	.-8      	; 0x9d6 <DIO_setPinDirection+0x30>
     9de:	82 2b       	or	r24, r18
     9e0:	8a bb       	out	0x1a, r24	; 26
     9e2:	08 95       	ret
			}
			else 
			{
				CLR_BIT(DDRA,PinId);
     9e4:	2a b3       	in	r18, 0x1a	; 26
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <DIO_setPinDirection+0x4a>
     9ec:	88 0f       	add	r24, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	6a 95       	dec	r22
     9f2:	e2 f7       	brpl	.-8      	; 0x9ec <DIO_setPinDirection+0x46>
     9f4:	80 95       	com	r24
     9f6:	82 23       	and	r24, r18
     9f8:	8a bb       	out	0x1a, r24	; 26
     9fa:	08 95       	ret
			}
			break;
			
			case DIO_PORTB:
			if(DIO_PIN_OUTPUT == PinDirection) 
     9fc:	41 30       	cpi	r20, 0x01	; 1
     9fe:	59 f4       	brne	.+22     	; 0xa16 <DIO_setPinDirection+0x70>
			{
				SET_BIT(DDRB,PinId);
     a00:	27 b3       	in	r18, 0x17	; 23
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <DIO_setPinDirection+0x66>
     a08:	88 0f       	add	r24, r24
     a0a:	99 1f       	adc	r25, r25
     a0c:	6a 95       	dec	r22
     a0e:	e2 f7       	brpl	.-8      	; 0xa08 <DIO_setPinDirection+0x62>
     a10:	82 2b       	or	r24, r18
     a12:	87 bb       	out	0x17, r24	; 23
     a14:	08 95       	ret
			}
			else 
			{
				CLR_BIT(DDRB,PinId);
     a16:	27 b3       	in	r18, 0x17	; 23
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <DIO_setPinDirection+0x7c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	6a 95       	dec	r22
     a24:	e2 f7       	brpl	.-8      	; 0xa1e <DIO_setPinDirection+0x78>
     a26:	80 95       	com	r24
     a28:	82 23       	and	r24, r18
     a2a:	87 bb       	out	0x17, r24	; 23
     a2c:	08 95       	ret
			}
			break;
			
			case DIO_PORTC:
			if(DIO_PIN_OUTPUT == PinDirection) 
     a2e:	41 30       	cpi	r20, 0x01	; 1
     a30:	59 f4       	brne	.+22     	; 0xa48 <DIO_setPinDirection+0xa2>
			{
				SET_BIT(DDRC,PinId);
     a32:	24 b3       	in	r18, 0x14	; 20
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <DIO_setPinDirection+0x98>
     a3a:	88 0f       	add	r24, r24
     a3c:	99 1f       	adc	r25, r25
     a3e:	6a 95       	dec	r22
     a40:	e2 f7       	brpl	.-8      	; 0xa3a <DIO_setPinDirection+0x94>
     a42:	82 2b       	or	r24, r18
     a44:	84 bb       	out	0x14, r24	; 20
     a46:	08 95       	ret
			}
			else 
			{
				CLR_BIT(DDRC,PinId);
     a48:	24 b3       	in	r18, 0x14	; 20
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <DIO_setPinDirection+0xae>
     a50:	88 0f       	add	r24, r24
     a52:	99 1f       	adc	r25, r25
     a54:	6a 95       	dec	r22
     a56:	e2 f7       	brpl	.-8      	; 0xa50 <DIO_setPinDirection+0xaa>
     a58:	80 95       	com	r24
     a5a:	82 23       	and	r24, r18
     a5c:	84 bb       	out	0x14, r24	; 20
     a5e:	08 95       	ret
			}
			break;
			
			case DIO_PORTD:
			if(DIO_PIN_OUTPUT == PinDirection) 
     a60:	41 30       	cpi	r20, 0x01	; 1
     a62:	59 f4       	brne	.+22     	; 0xa7a <DIO_setPinDirection+0xd4>
			{
				SET_BIT(DDRD,PinId);
     a64:	21 b3       	in	r18, 0x11	; 17
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <DIO_setPinDirection+0xca>
     a6c:	88 0f       	add	r24, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	6a 95       	dec	r22
     a72:	e2 f7       	brpl	.-8      	; 0xa6c <DIO_setPinDirection+0xc6>
     a74:	82 2b       	or	r24, r18
     a76:	81 bb       	out	0x11, r24	; 17
     a78:	08 95       	ret
			}
			else 
			{
				CLR_BIT(DDRD,PinId);
     a7a:	21 b3       	in	r18, 0x11	; 17
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <DIO_setPinDirection+0xe0>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	6a 95       	dec	r22
     a88:	e2 f7       	brpl	.-8      	; 0xa82 <DIO_setPinDirection+0xdc>
     a8a:	80 95       	com	r24
     a8c:	82 23       	and	r24, r18
     a8e:	81 bb       	out	0x11, r24	; 17
     a90:	08 95       	ret

00000a92 <DIO_setPinValue>:
}


void DIO_setPinValue(u8 PortId, u8 PinId, u8 PinValue)
{
	if((PortId<=3)&&(PinId<=7)&&((PinValue == DIO_PIN_HIGH)||(PinValue == DIO_PIN_LOW)))
     a92:	84 30       	cpi	r24, 0x04	; 4
     a94:	08 f0       	brcs	.+2      	; 0xa98 <DIO_setPinValue+0x6>
     a96:	72 c0       	rjmp	.+228    	; 0xb7c <DIO_setPinValue+0xea>
     a98:	68 30       	cpi	r22, 0x08	; 8
     a9a:	08 f0       	brcs	.+2      	; 0xa9e <DIO_setPinValue+0xc>
     a9c:	6f c0       	rjmp	.+222    	; 0xb7c <DIO_setPinValue+0xea>
     a9e:	42 30       	cpi	r20, 0x02	; 2
     aa0:	08 f0       	brcs	.+2      	; 0xaa4 <DIO_setPinValue+0x12>
     aa2:	6c c0       	rjmp	.+216    	; 0xb7c <DIO_setPinValue+0xea>
	{
		switch(PortId)
     aa4:	81 30       	cpi	r24, 0x01	; 1
     aa6:	01 f1       	breq	.+64     	; 0xae8 <DIO_setPinValue+0x56>
     aa8:	30 f0       	brcs	.+12     	; 0xab6 <DIO_setPinValue+0x24>
     aaa:	82 30       	cpi	r24, 0x02	; 2
     aac:	b1 f1       	breq	.+108    	; 0xb1a <DIO_setPinValue+0x88>
     aae:	83 30       	cpi	r24, 0x03	; 3
     ab0:	09 f4       	brne	.+2      	; 0xab4 <DIO_setPinValue+0x22>
     ab2:	4c c0       	rjmp	.+152    	; 0xb4c <DIO_setPinValue+0xba>
     ab4:	08 95       	ret
		{
			case DIO_PORTA:
			if(PinValue == DIO_PIN_HIGH)
     ab6:	41 30       	cpi	r20, 0x01	; 1
     ab8:	59 f4       	brne	.+22     	; 0xad0 <DIO_setPinValue+0x3e>
			{
				SET_BIT(PORTA,PinId);
     aba:	2b b3       	in	r18, 0x1b	; 27
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <DIO_setPinValue+0x34>
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	6a 95       	dec	r22
     ac8:	e2 f7       	brpl	.-8      	; 0xac2 <DIO_setPinValue+0x30>
     aca:	82 2b       	or	r24, r18
     acc:	8b bb       	out	0x1b, r24	; 27
     ace:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA,PinId);
     ad0:	2b b3       	in	r18, 0x1b	; 27
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <DIO_setPinValue+0x4a>
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	6a 95       	dec	r22
     ade:	e2 f7       	brpl	.-8      	; 0xad8 <DIO_setPinValue+0x46>
     ae0:	80 95       	com	r24
     ae2:	82 23       	and	r24, r18
     ae4:	8b bb       	out	0x1b, r24	; 27
     ae6:	08 95       	ret
			}
			break;
			
			case DIO_PORTB:
			if(PinValue == DIO_PIN_HIGH)
     ae8:	41 30       	cpi	r20, 0x01	; 1
     aea:	59 f4       	brne	.+22     	; 0xb02 <DIO_setPinValue+0x70>
			{
				SET_BIT(PORTB,PinId);
     aec:	28 b3       	in	r18, 0x18	; 24
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <DIO_setPinValue+0x66>
     af4:	88 0f       	add	r24, r24
     af6:	99 1f       	adc	r25, r25
     af8:	6a 95       	dec	r22
     afa:	e2 f7       	brpl	.-8      	; 0xaf4 <DIO_setPinValue+0x62>
     afc:	82 2b       	or	r24, r18
     afe:	88 bb       	out	0x18, r24	; 24
     b00:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB,PinId);
     b02:	28 b3       	in	r18, 0x18	; 24
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <DIO_setPinValue+0x7c>
     b0a:	88 0f       	add	r24, r24
     b0c:	99 1f       	adc	r25, r25
     b0e:	6a 95       	dec	r22
     b10:	e2 f7       	brpl	.-8      	; 0xb0a <DIO_setPinValue+0x78>
     b12:	80 95       	com	r24
     b14:	82 23       	and	r24, r18
     b16:	88 bb       	out	0x18, r24	; 24
     b18:	08 95       	ret
			}
			break;
			
			case DIO_PORTC:
			if(PinValue == DIO_PIN_HIGH)
     b1a:	41 30       	cpi	r20, 0x01	; 1
     b1c:	59 f4       	brne	.+22     	; 0xb34 <DIO_setPinValue+0xa2>
			{
				SET_BIT(PORTC,PinId);
     b1e:	25 b3       	in	r18, 0x15	; 21
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	02 c0       	rjmp	.+4      	; 0xb2a <DIO_setPinValue+0x98>
     b26:	88 0f       	add	r24, r24
     b28:	99 1f       	adc	r25, r25
     b2a:	6a 95       	dec	r22
     b2c:	e2 f7       	brpl	.-8      	; 0xb26 <DIO_setPinValue+0x94>
     b2e:	82 2b       	or	r24, r18
     b30:	85 bb       	out	0x15, r24	; 21
     b32:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC,PinId);
     b34:	25 b3       	in	r18, 0x15	; 21
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <DIO_setPinValue+0xae>
     b3c:	88 0f       	add	r24, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	6a 95       	dec	r22
     b42:	e2 f7       	brpl	.-8      	; 0xb3c <DIO_setPinValue+0xaa>
     b44:	80 95       	com	r24
     b46:	82 23       	and	r24, r18
     b48:	85 bb       	out	0x15, r24	; 21
     b4a:	08 95       	ret
			}
			break;
			
			case DIO_PORTD:
			if(PinValue == DIO_PIN_HIGH)
     b4c:	41 30       	cpi	r20, 0x01	; 1
     b4e:	59 f4       	brne	.+22     	; 0xb66 <DIO_setPinValue+0xd4>
			{
				SET_BIT(PORTD,PinId);
     b50:	22 b3       	in	r18, 0x12	; 18
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <DIO_setPinValue+0xca>
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	6a 95       	dec	r22
     b5e:	e2 f7       	brpl	.-8      	; 0xb58 <DIO_setPinValue+0xc6>
     b60:	82 2b       	or	r24, r18
     b62:	82 bb       	out	0x12, r24	; 18
     b64:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTD,PinId);
     b66:	22 b3       	in	r18, 0x12	; 18
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <DIO_setPinValue+0xe0>
     b6e:	88 0f       	add	r24, r24
     b70:	99 1f       	adc	r25, r25
     b72:	6a 95       	dec	r22
     b74:	e2 f7       	brpl	.-8      	; 0xb6e <DIO_setPinValue+0xdc>
     b76:	80 95       	com	r24
     b78:	82 23       	and	r24, r18
     b7a:	82 bb       	out	0x12, r24	; 18
     b7c:	08 95       	ret

00000b7e <EXTI_enable>:

void EXTI_setCallBackINT2(void (*ptrToFun)(void))
{
	if(ptrToFun!=NULL)
	{
		private_pCallBackINT2 = ptrToFun;
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	61 f1       	breq	.+88     	; 0xbda <EXTI_enable+0x5c>
     b82:	20 f0       	brcs	.+8      	; 0xb8c <EXTI_enable+0xe>
     b84:	82 30       	cpi	r24, 0x02	; 2
     b86:	09 f4       	brne	.+2      	; 0xb8a <EXTI_enable+0xc>
     b88:	4f c0       	rjmp	.+158    	; 0xc28 <EXTI_enable+0xaa>
     b8a:	08 95       	ret
     b8c:	61 30       	cpi	r22, 0x01	; 1
     b8e:	69 f0       	breq	.+26     	; 0xbaa <EXTI_enable+0x2c>
     b90:	28 f0       	brcs	.+10     	; 0xb9c <EXTI_enable+0x1e>
     b92:	62 30       	cpi	r22, 0x02	; 2
     b94:	89 f0       	breq	.+34     	; 0xbb8 <EXTI_enable+0x3a>
     b96:	63 30       	cpi	r22, 0x03	; 3
     b98:	b1 f0       	breq	.+44     	; 0xbc6 <EXTI_enable+0x48>
     b9a:	1b c0       	rjmp	.+54     	; 0xbd2 <EXTI_enable+0x54>
     b9c:	85 b7       	in	r24, 0x35	; 53
     b9e:	81 60       	ori	r24, 0x01	; 1
     ba0:	85 bf       	out	0x35, r24	; 53
     ba2:	85 b7       	in	r24, 0x35	; 53
     ba4:	82 60       	ori	r24, 0x02	; 2
     ba6:	85 bf       	out	0x35, r24	; 53
     ba8:	14 c0       	rjmp	.+40     	; 0xbd2 <EXTI_enable+0x54>
     baa:	85 b7       	in	r24, 0x35	; 53
     bac:	8e 7f       	andi	r24, 0xFE	; 254
     bae:	85 bf       	out	0x35, r24	; 53
     bb0:	85 b7       	in	r24, 0x35	; 53
     bb2:	82 60       	ori	r24, 0x02	; 2
     bb4:	85 bf       	out	0x35, r24	; 53
     bb6:	0d c0       	rjmp	.+26     	; 0xbd2 <EXTI_enable+0x54>
     bb8:	85 b7       	in	r24, 0x35	; 53
     bba:	8e 7f       	andi	r24, 0xFE	; 254
     bbc:	85 bf       	out	0x35, r24	; 53
     bbe:	85 b7       	in	r24, 0x35	; 53
     bc0:	8d 7f       	andi	r24, 0xFD	; 253
     bc2:	85 bf       	out	0x35, r24	; 53
     bc4:	06 c0       	rjmp	.+12     	; 0xbd2 <EXTI_enable+0x54>
     bc6:	85 b7       	in	r24, 0x35	; 53
     bc8:	81 60       	ori	r24, 0x01	; 1
     bca:	85 bf       	out	0x35, r24	; 53
     bcc:	85 b7       	in	r24, 0x35	; 53
     bce:	8d 7f       	andi	r24, 0xFD	; 253
     bd0:	85 bf       	out	0x35, r24	; 53
     bd2:	8b b7       	in	r24, 0x3b	; 59
     bd4:	80 64       	ori	r24, 0x40	; 64
     bd6:	8b bf       	out	0x3b, r24	; 59
     bd8:	08 95       	ret
     bda:	61 30       	cpi	r22, 0x01	; 1
     bdc:	69 f0       	breq	.+26     	; 0xbf8 <EXTI_enable+0x7a>
     bde:	28 f0       	brcs	.+10     	; 0xbea <EXTI_enable+0x6c>
     be0:	62 30       	cpi	r22, 0x02	; 2
     be2:	89 f0       	breq	.+34     	; 0xc06 <EXTI_enable+0x88>
     be4:	63 30       	cpi	r22, 0x03	; 3
     be6:	b1 f0       	breq	.+44     	; 0xc14 <EXTI_enable+0x96>
     be8:	1b c0       	rjmp	.+54     	; 0xc20 <EXTI_enable+0xa2>
     bea:	85 b7       	in	r24, 0x35	; 53
     bec:	84 60       	ori	r24, 0x04	; 4
     bee:	85 bf       	out	0x35, r24	; 53
     bf0:	85 b7       	in	r24, 0x35	; 53
     bf2:	88 60       	ori	r24, 0x08	; 8
     bf4:	85 bf       	out	0x35, r24	; 53
     bf6:	14 c0       	rjmp	.+40     	; 0xc20 <EXTI_enable+0xa2>
     bf8:	85 b7       	in	r24, 0x35	; 53
     bfa:	8b 7f       	andi	r24, 0xFB	; 251
     bfc:	85 bf       	out	0x35, r24	; 53
     bfe:	85 b7       	in	r24, 0x35	; 53
     c00:	88 60       	ori	r24, 0x08	; 8
     c02:	85 bf       	out	0x35, r24	; 53
     c04:	0d c0       	rjmp	.+26     	; 0xc20 <EXTI_enable+0xa2>
     c06:	85 b7       	in	r24, 0x35	; 53
     c08:	8b 7f       	andi	r24, 0xFB	; 251
     c0a:	85 bf       	out	0x35, r24	; 53
     c0c:	85 b7       	in	r24, 0x35	; 53
     c0e:	87 7f       	andi	r24, 0xF7	; 247
     c10:	85 bf       	out	0x35, r24	; 53
     c12:	06 c0       	rjmp	.+12     	; 0xc20 <EXTI_enable+0xa2>
     c14:	85 b7       	in	r24, 0x35	; 53
     c16:	84 60       	ori	r24, 0x04	; 4
     c18:	85 bf       	out	0x35, r24	; 53
     c1a:	85 b7       	in	r24, 0x35	; 53
     c1c:	87 7f       	andi	r24, 0xF7	; 247
     c1e:	85 bf       	out	0x35, r24	; 53
     c20:	8b b7       	in	r24, 0x3b	; 59
     c22:	80 68       	ori	r24, 0x80	; 128
     c24:	8b bf       	out	0x3b, r24	; 59
     c26:	08 95       	ret
     c28:	66 23       	and	r22, r22
     c2a:	19 f0       	breq	.+6      	; 0xc32 <EXTI_enable+0xb4>
     c2c:	61 30       	cpi	r22, 0x01	; 1
     c2e:	29 f0       	breq	.+10     	; 0xc3a <EXTI_enable+0xbc>
     c30:	07 c0       	rjmp	.+14     	; 0xc40 <EXTI_enable+0xc2>
     c32:	84 b7       	in	r24, 0x34	; 52
     c34:	80 64       	ori	r24, 0x40	; 64
     c36:	84 bf       	out	0x34, r24	; 52
     c38:	03 c0       	rjmp	.+6      	; 0xc40 <EXTI_enable+0xc2>
     c3a:	84 b7       	in	r24, 0x34	; 52
     c3c:	8f 7b       	andi	r24, 0xBF	; 191
     c3e:	84 bf       	out	0x34, r24	; 52
     c40:	8b b7       	in	r24, 0x3b	; 59
     c42:	80 62       	ori	r24, 0x20	; 32
     c44:	8b bf       	out	0x3b, r24	; 59
     c46:	08 95       	ret

00000c48 <__vector_1>:
}


void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     c48:	1f 92       	push	r1
     c4a:	0f 92       	push	r0
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	0f 92       	push	r0
     c50:	11 24       	eor	r1, r1
     c52:	2f 93       	push	r18
     c54:	3f 93       	push	r19
     c56:	4f 93       	push	r20
     c58:	5f 93       	push	r21
     c5a:	6f 93       	push	r22
     c5c:	7f 93       	push	r23
     c5e:	8f 93       	push	r24
     c60:	9f 93       	push	r25
     c62:	af 93       	push	r26
     c64:	bf 93       	push	r27
     c66:	ef 93       	push	r30
     c68:	ff 93       	push	r31
	if(private_pCallBackINT0 != NULL)
     c6a:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <private_pCallBackINT0>
     c6e:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <private_pCallBackINT0+0x1>
     c72:	30 97       	sbiw	r30, 0x00	; 0
     c74:	09 f0       	breq	.+2      	; 0xc78 <__vector_1+0x30>
	{
		private_pCallBackINT0();	
     c76:	09 95       	icall
	}
}
     c78:	ff 91       	pop	r31
     c7a:	ef 91       	pop	r30
     c7c:	bf 91       	pop	r27
     c7e:	af 91       	pop	r26
     c80:	9f 91       	pop	r25
     c82:	8f 91       	pop	r24
     c84:	7f 91       	pop	r23
     c86:	6f 91       	pop	r22
     c88:	5f 91       	pop	r21
     c8a:	4f 91       	pop	r20
     c8c:	3f 91       	pop	r19
     c8e:	2f 91       	pop	r18
     c90:	0f 90       	pop	r0
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	0f 90       	pop	r0
     c96:	1f 90       	pop	r1
     c98:	18 95       	reti

00000c9a <__vector_3>:



void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     c9a:	1f 92       	push	r1
     c9c:	0f 92       	push	r0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	0f 92       	push	r0
     ca2:	11 24       	eor	r1, r1
     ca4:	2f 93       	push	r18
     ca6:	3f 93       	push	r19
     ca8:	4f 93       	push	r20
     caa:	5f 93       	push	r21
     cac:	6f 93       	push	r22
     cae:	7f 93       	push	r23
     cb0:	8f 93       	push	r24
     cb2:	9f 93       	push	r25
     cb4:	af 93       	push	r26
     cb6:	bf 93       	push	r27
     cb8:	ef 93       	push	r30
     cba:	ff 93       	push	r31
	if(private_pCallBackINT2 != NULL)
     cbc:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <private_pCallBackINT2>
     cc0:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <private_pCallBackINT2+0x1>
     cc4:	30 97       	sbiw	r30, 0x00	; 0
     cc6:	09 f0       	breq	.+2      	; 0xcca <__vector_3+0x30>
	{
		private_pCallBackINT2();
     cc8:	09 95       	icall
	}
     cca:	ff 91       	pop	r31
     ccc:	ef 91       	pop	r30
     cce:	bf 91       	pop	r27
     cd0:	af 91       	pop	r26
     cd2:	9f 91       	pop	r25
     cd4:	8f 91       	pop	r24
     cd6:	7f 91       	pop	r23
     cd8:	6f 91       	pop	r22
     cda:	5f 91       	pop	r21
     cdc:	4f 91       	pop	r20
     cde:	3f 91       	pop	r19
     ce0:	2f 91       	pop	r18
     ce2:	0f 90       	pop	r0
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	0f 90       	pop	r0
     ce8:	1f 90       	pop	r1
     cea:	18 95       	reti

00000cec <GI_enable>:
     cec:	8f b7       	in	r24, 0x3f	; 63
     cee:	80 68       	ori	r24, 0x80	; 128
     cf0:	8f bf       	out	0x3f, r24	; 63
     cf2:	08 95       	ret

00000cf4 <TMR0_init>:

void TMR0_SetCallBackCTC(void (*PtrToFunc)(void))
{
	if( PtrToFunc!=NULL )
	{
		PRIVATE_PtrCallBackCTC=PtrToFunc;
     cf4:	83 b7       	in	r24, 0x33	; 51
     cf6:	8f 7b       	andi	r24, 0xBF	; 191
     cf8:	83 bf       	out	0x33, r24	; 51
     cfa:	83 b7       	in	r24, 0x33	; 51
     cfc:	87 7f       	andi	r24, 0xF7	; 247
     cfe:	83 bf       	out	0x33, r24	; 51
     d00:	12 be       	out	0x32, r1	; 50
     d02:	89 b7       	in	r24, 0x39	; 57
     d04:	81 60       	ori	r24, 0x01	; 1
     d06:	89 bf       	out	0x39, r24	; 57
     d08:	08 95       	ret

00000d0a <TMR0_Start>:
     d0a:	83 b7       	in	r24, 0x33	; 51
     d0c:	81 60       	ori	r24, 0x01	; 1
     d0e:	83 bf       	out	0x33, r24	; 51
     d10:	83 b7       	in	r24, 0x33	; 51
     d12:	8d 7f       	andi	r24, 0xFD	; 253
     d14:	83 bf       	out	0x33, r24	; 51
     d16:	83 b7       	in	r24, 0x33	; 51
     d18:	8b 7f       	andi	r24, 0xFB	; 251
     d1a:	83 bf       	out	0x33, r24	; 51
     d1c:	08 95       	ret

00000d1e <__vector_10>:



void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     d1e:	1f 92       	push	r1
     d20:	0f 92       	push	r0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	0f 92       	push	r0
     d26:	11 24       	eor	r1, r1
     d28:	2f 93       	push	r18
     d2a:	3f 93       	push	r19
     d2c:	4f 93       	push	r20
     d2e:	5f 93       	push	r21
     d30:	6f 93       	push	r22
     d32:	7f 93       	push	r23
     d34:	8f 93       	push	r24
     d36:	9f 93       	push	r25
     d38:	af 93       	push	r26
     d3a:	bf 93       	push	r27
     d3c:	ef 93       	push	r30
     d3e:	ff 93       	push	r31
	static u16 CTC_Counter =0;
	CTC_Counter++;
     d40:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <CTC_Counter.1626>
     d44:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <CTC_Counter.1626+0x1>
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <CTC_Counter.1626+0x1>
     d4e:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <CTC_Counter.1626>
	
	if( Private_CTC_Counter == CTC_Counter)
     d52:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <Private_CTC_Counter>
     d56:	30 91 95 00 	lds	r19, 0x0095	; 0x800095 <Private_CTC_Counter+0x1>
     d5a:	82 17       	cp	r24, r18
     d5c:	93 07       	cpc	r25, r19
     d5e:	59 f4       	brne	.+22     	; 0xd76 <__vector_10+0x58>
	{
		CTC_Counter = 0;
     d60:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <CTC_Counter.1626+0x1>
     d64:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <CTC_Counter.1626>
		if (PRIVATE_PtrCallBackCTC != NULL)
     d68:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <PRIVATE_PtrCallBackCTC>
     d6c:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <PRIVATE_PtrCallBackCTC+0x1>
     d70:	30 97       	sbiw	r30, 0x00	; 0
     d72:	09 f0       	breq	.+2      	; 0xd76 <__vector_10+0x58>
		{
			PRIVATE_PtrCallBackCTC();
     d74:	09 95       	icall
		}
	}
	
}
     d76:	ff 91       	pop	r31
     d78:	ef 91       	pop	r30
     d7a:	bf 91       	pop	r27
     d7c:	af 91       	pop	r26
     d7e:	9f 91       	pop	r25
     d80:	8f 91       	pop	r24
     d82:	7f 91       	pop	r23
     d84:	6f 91       	pop	r22
     d86:	5f 91       	pop	r21
     d88:	4f 91       	pop	r20
     d8a:	3f 91       	pop	r19
     d8c:	2f 91       	pop	r18
     d8e:	0f 90       	pop	r0
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	0f 90       	pop	r0
     d94:	1f 90       	pop	r1
     d96:	18 95       	reti

00000d98 <TMR1_init>:

void TMR1_setCallBackCTC(void(*ptrToFun)(void))
{
	if(ptrToFun!=NULL)
	{
		private_pCallBackCTC = ptrToFun;
     d98:	8f b5       	in	r24, 0x2f	; 47
     d9a:	8e 7f       	andi	r24, 0xFE	; 254
     d9c:	8f bd       	out	0x2f, r24	; 47
     d9e:	8f b5       	in	r24, 0x2f	; 47
     da0:	82 60       	ori	r24, 0x02	; 2
     da2:	8f bd       	out	0x2f, r24	; 47
     da4:	8e b5       	in	r24, 0x2e	; 46
     da6:	88 60       	ori	r24, 0x08	; 8
     da8:	8e bd       	out	0x2e, r24	; 46
     daa:	8e b5       	in	r24, 0x2e	; 46
     dac:	80 61       	ori	r24, 0x10	; 16
     dae:	8e bd       	out	0x2e, r24	; 46
     db0:	8f b5       	in	r24, 0x2f	; 47
     db2:	8f 7b       	andi	r24, 0xBF	; 191
     db4:	8f bd       	out	0x2f, r24	; 47
     db6:	8f b5       	in	r24, 0x2f	; 47
     db8:	80 68       	ori	r24, 0x80	; 128
     dba:	8f bd       	out	0x2f, r24	; 47
     dbc:	08 95       	ret

00000dbe <TMR1_start>:
     dbe:	8e b5       	in	r24, 0x2e	; 46
     dc0:	81 60       	ori	r24, 0x01	; 1
     dc2:	8e bd       	out	0x2e, r24	; 46
     dc4:	8e b5       	in	r24, 0x2e	; 46
     dc6:	82 60       	ori	r24, 0x02	; 2
     dc8:	8e bd       	out	0x2e, r24	; 46
     dca:	8e b5       	in	r24, 0x2e	; 46
     dcc:	8b 7f       	andi	r24, 0xFB	; 251
     dce:	8e bd       	out	0x2e, r24	; 46
     dd0:	08 95       	ret

00000dd2 <TMR1_setFastPWM_usingMode14>:
	}
}


void TMR1_setFastPWM_usingMode14(f32 dutyCycle, u16 frequency_hz)
{
     dd2:	cf 92       	push	r12
     dd4:	df 92       	push	r13
     dd6:	ef 92       	push	r14
     dd8:	ff 92       	push	r15
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	6b 01       	movw	r12, r22
     de0:	7c 01       	movw	r14, r24
     de2:	ea 01       	movw	r28, r20
	if(dutyCycle <= 100)
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	48 ec       	ldi	r20, 0xC8	; 200
     dea:	52 e4       	ldi	r21, 0x42	; 66
     dec:	0e 94 a8 08 	call	0x1150	; 0x1150 <__cmpsf2>
     df0:	18 16       	cp	r1, r24
     df2:	5c f1       	brlt	.+86     	; 0xe4a <TMR1_setFastPWM_usingMode14+0x78>
	{
		// under condition non inverting fast pwm & tick time 4 MS
		
		ICR1_u16  = ((1000000UL/frequency_hz)/4)-1;
     df4:	9e 01       	movw	r18, r28
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	60 e9       	ldi	r22, 0x90	; 144
     dfc:	70 ed       	ldi	r23, 0xD0	; 208
     dfe:	83 e0       	ldi	r24, 0x03	; 3
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__udivmodsi4>
     e06:	21 50       	subi	r18, 0x01	; 1
     e08:	31 09       	sbc	r19, r1
     e0a:	37 bd       	out	0x27, r19	; 39
     e0c:	26 bd       	out	0x26, r18	; 38
		
		OCR1A_u16 = ((dutyCycle*(ICR1_u16+1))/100.0)-1;
     e0e:	66 b5       	in	r22, 0x26	; 38
     e10:	77 b5       	in	r23, 0x27	; 39
     e12:	6f 5f       	subi	r22, 0xFF	; 255
     e14:	7f 4f       	sbci	r23, 0xFF	; 255
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 4e 09 	call	0x129c	; 0x129c <__floatunsisf>
     e1e:	9b 01       	movw	r18, r22
     e20:	ac 01       	movw	r20, r24
     e22:	c7 01       	movw	r24, r14
     e24:	b6 01       	movw	r22, r12
     e26:	0e 94 05 0a 	call	0x140a	; 0x140a <__mulsf3>
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	48 ec       	ldi	r20, 0xC8	; 200
     e30:	52 e4       	ldi	r21, 0x42	; 66
     e32:	0e 94 ad 08 	call	0x115a	; 0x115a <__divsf3>
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	40 e8       	ldi	r20, 0x80	; 128
     e3c:	5f e3       	ldi	r21, 0x3F	; 63
     e3e:	0e 94 3b 08 	call	0x1076	; 0x1076 <__subsf3>
     e42:	0e 94 1f 09 	call	0x123e	; 0x123e <__fixunssfsi>
     e46:	7b bd       	out	0x2b, r23	; 43
     e48:	6a bd       	out	0x2a, r22	; 42
	}
}
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	ff 90       	pop	r15
     e50:	ef 90       	pop	r14
     e52:	df 90       	pop	r13
     e54:	cf 90       	pop	r12
     e56:	08 95       	ret

00000e58 <__vector_9>:


void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     e58:	1f 92       	push	r1
     e5a:	0f 92       	push	r0
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	0f 92       	push	r0
     e60:	11 24       	eor	r1, r1
     e62:	2f 93       	push	r18
     e64:	3f 93       	push	r19
     e66:	4f 93       	push	r20
     e68:	5f 93       	push	r21
     e6a:	6f 93       	push	r22
     e6c:	7f 93       	push	r23
     e6e:	8f 93       	push	r24
     e70:	9f 93       	push	r25
     e72:	af 93       	push	r26
     e74:	bf 93       	push	r27
     e76:	ef 93       	push	r30
     e78:	ff 93       	push	r31
	static u8 ovfCounter = 0;
	ovfCounter++;
     e7a:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <ovfCounter.1622>
     e7e:	8f 5f       	subi	r24, 0xFF	; 255
     e80:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <ovfCounter.1622>
	
	if(TMR1_OVER_FLOW_COUNTER == ovfCounter)
     e84:	84 31       	cpi	r24, 0x14	; 20
     e86:	69 f4       	brne	.+26     	; 0xea2 <__vector_9+0x4a>
	{
		// Set Preload Value
		TCNT1_u16 = TMR1_PRELOAD_VALUE;
     e88:	80 ed       	ldi	r24, 0xD0	; 208
     e8a:	92 e1       	ldi	r25, 0x12	; 18
     e8c:	9d bd       	out	0x2d, r25	; 45
     e8e:	8c bd       	out	0x2c, r24	; 44
		
		// Clear Counter
		ovfCounter = 0;
     e90:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <ovfCounter.1622>
		
		//call action
		if(private_pCallBackOVF!=NULL)
     e94:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <private_pCallBackOVF>
     e98:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <private_pCallBackOVF+0x1>
     e9c:	30 97       	sbiw	r30, 0x00	; 0
     e9e:	09 f0       	breq	.+2      	; 0xea2 <__vector_9+0x4a>
		{
			private_pCallBackOVF();
     ea0:	09 95       	icall
		}
	}
}
     ea2:	ff 91       	pop	r31
     ea4:	ef 91       	pop	r30
     ea6:	bf 91       	pop	r27
     ea8:	af 91       	pop	r26
     eaa:	9f 91       	pop	r25
     eac:	8f 91       	pop	r24
     eae:	7f 91       	pop	r23
     eb0:	6f 91       	pop	r22
     eb2:	5f 91       	pop	r21
     eb4:	4f 91       	pop	r20
     eb6:	3f 91       	pop	r19
     eb8:	2f 91       	pop	r18
     eba:	0f 90       	pop	r0
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	0f 90       	pop	r0
     ec0:	1f 90       	pop	r1
     ec2:	18 95       	reti

00000ec4 <__vector_7>:


void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     ec4:	1f 92       	push	r1
     ec6:	0f 92       	push	r0
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	0f 92       	push	r0
     ecc:	11 24       	eor	r1, r1
     ece:	2f 93       	push	r18
     ed0:	3f 93       	push	r19
     ed2:	4f 93       	push	r20
     ed4:	5f 93       	push	r21
     ed6:	6f 93       	push	r22
     ed8:	7f 93       	push	r23
     eda:	8f 93       	push	r24
     edc:	9f 93       	push	r25
     ede:	af 93       	push	r26
     ee0:	bf 93       	push	r27
     ee2:	ef 93       	push	r30
     ee4:	ff 93       	push	r31
	static u8 ctcCounter = 0;
	ctcCounter++;
     ee6:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <ctcCounter.1628>
     eea:	8f 5f       	subi	r24, 0xFF	; 255
     eec:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <ctcCounter.1628>
	
	if(TMR1_CTC_COUNTER == ctcCounter)
     ef0:	88 32       	cpi	r24, 0x28	; 40
     ef2:	49 f4       	brne	.+18     	; 0xf06 <__vector_7+0x42>
	{
		// Clear Counter
		ctcCounter = 0;
     ef4:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <ctcCounter.1628>
		
		//call action
		if(private_pCallBackCTC!=NULL)
     ef8:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <private_pCallBackCTC>
     efc:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <private_pCallBackCTC+0x1>
     f00:	30 97       	sbiw	r30, 0x00	; 0
     f02:	09 f0       	breq	.+2      	; 0xf06 <__vector_7+0x42>
		{
			private_pCallBackCTC();
     f04:	09 95       	icall
		}
	}
     f06:	ff 91       	pop	r31
     f08:	ef 91       	pop	r30
     f0a:	bf 91       	pop	r27
     f0c:	af 91       	pop	r26
     f0e:	9f 91       	pop	r25
     f10:	8f 91       	pop	r24
     f12:	7f 91       	pop	r23
     f14:	6f 91       	pop	r22
     f16:	5f 91       	pop	r21
     f18:	4f 91       	pop	r20
     f1a:	3f 91       	pop	r19
     f1c:	2f 91       	pop	r18
     f1e:	0f 90       	pop	r0
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	0f 90       	pop	r0
     f24:	1f 90       	pop	r1
     f26:	18 95       	reti

00000f28 <TMR2_init>:

void TMR2_SetCallBackCTC(void (*PtrToFunc)(void))
{
	if( PtrToFunc!=NULL )
	{
		PRIVATE_PtrCallBackCTC=PtrToFunc;
     f28:	85 b5       	in	r24, 0x25	; 37
     f2a:	80 64       	ori	r24, 0x40	; 64
     f2c:	85 bd       	out	0x25, r24	; 37
     f2e:	85 b5       	in	r24, 0x25	; 37
     f30:	87 7f       	andi	r24, 0xF7	; 247
     f32:	85 bd       	out	0x25, r24	; 37
     f34:	85 b5       	in	r24, 0x25	; 37
     f36:	80 61       	ori	r24, 0x10	; 16
     f38:	85 bd       	out	0x25, r24	; 37
     f3a:	85 b5       	in	r24, 0x25	; 37
     f3c:	80 62       	ori	r24, 0x20	; 32
     f3e:	85 bd       	out	0x25, r24	; 37
     f40:	08 95       	ret

00000f42 <TMR2_Start>:
     f42:	85 b5       	in	r24, 0x25	; 37
     f44:	8e 7f       	andi	r24, 0xFE	; 254
     f46:	85 bd       	out	0x25, r24	; 37
     f48:	85 b5       	in	r24, 0x25	; 37
     f4a:	8d 7f       	andi	r24, 0xFD	; 253
     f4c:	85 bd       	out	0x25, r24	; 37
     f4e:	85 b5       	in	r24, 0x25	; 37
     f50:	84 60       	ori	r24, 0x04	; 4
     f52:	85 bd       	out	0x25, r24	; 37
     f54:	08 95       	ret

00000f56 <TMR2_SetDutyCycleValue_FastPWM>:
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	48 ec       	ldi	r20, 0xC8	; 200
     f5c:	52 e4       	ldi	r21, 0x42	; 66
     f5e:	0e 94 ad 08 	call	0x115a	; 0x115a <__divsf3>
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	40 e8       	ldi	r20, 0x80	; 128
     f68:	53 e4       	ldi	r21, 0x43	; 67
     f6a:	0e 94 05 0a 	call	0x140a	; 0x140a <__mulsf3>
     f6e:	9b 01       	movw	r18, r22
     f70:	ac 01       	movw	r20, r24
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	8f e7       	ldi	r24, 0x7F	; 127
     f78:	93 e4       	ldi	r25, 0x43	; 67
     f7a:	0e 94 3b 08 	call	0x1076	; 0x1076 <__subsf3>
     f7e:	0e 94 1f 09 	call	0x123e	; 0x123e <__fixunssfsi>
     f82:	63 bd       	out	0x23, r22	; 35
     f84:	08 95       	ret

00000f86 <__vector_5>:
	}
}

void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     f86:	1f 92       	push	r1
     f88:	0f 92       	push	r0
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	0f 92       	push	r0
     f8e:	11 24       	eor	r1, r1
     f90:	2f 93       	push	r18
     f92:	3f 93       	push	r19
     f94:	4f 93       	push	r20
     f96:	5f 93       	push	r21
     f98:	6f 93       	push	r22
     f9a:	7f 93       	push	r23
     f9c:	8f 93       	push	r24
     f9e:	9f 93       	push	r25
     fa0:	af 93       	push	r26
     fa2:	bf 93       	push	r27
     fa4:	ef 93       	push	r30
     fa6:	ff 93       	push	r31
	static u16 OverFlowCounter =0;
	OverFlowCounter++;
     fa8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <OverFlowCounter.1628>
     fac:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <OverFlowCounter.1628+0x1>
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <OverFlowCounter.1628+0x1>
     fb6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <OverFlowCounter.1628>
	
	if( TMR2_OverFlowCounter == OverFlowCounter)
     fba:	81 3d       	cpi	r24, 0xD1	; 209
     fbc:	93 40       	sbci	r25, 0x03	; 3
     fbe:	69 f4       	brne	.+26     	; 0xfda <__vector_5+0x54>
	{
		OverFlowCounter = 0;
     fc0:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <OverFlowCounter.1628+0x1>
     fc4:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <OverFlowCounter.1628>
		TCNT2 = TMR2_PreloadValue;
     fc8:	81 e7       	ldi	r24, 0x71	; 113
     fca:	84 bd       	out	0x24, r24	; 36
		if (PRIVATE_PtrCallBackOverFlowFlag != NULL)
     fcc:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <PRIVATE_PtrCallBackOverFlowFlag>
     fd0:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <PRIVATE_PtrCallBackOverFlowFlag+0x1>
     fd4:	30 97       	sbiw	r30, 0x00	; 0
     fd6:	09 f0       	breq	.+2      	; 0xfda <__vector_5+0x54>
		{
			PRIVATE_PtrCallBackOverFlowFlag();
     fd8:	09 95       	icall
		}
	}
	
}
     fda:	ff 91       	pop	r31
     fdc:	ef 91       	pop	r30
     fde:	bf 91       	pop	r27
     fe0:	af 91       	pop	r26
     fe2:	9f 91       	pop	r25
     fe4:	8f 91       	pop	r24
     fe6:	7f 91       	pop	r23
     fe8:	6f 91       	pop	r22
     fea:	5f 91       	pop	r21
     fec:	4f 91       	pop	r20
     fee:	3f 91       	pop	r19
     ff0:	2f 91       	pop	r18
     ff2:	0f 90       	pop	r0
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	0f 90       	pop	r0
     ff8:	1f 90       	pop	r1
     ffa:	18 95       	reti

00000ffc <__vector_4>:

void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     ffc:	1f 92       	push	r1
     ffe:	0f 92       	push	r0
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	0f 92       	push	r0
    1004:	11 24       	eor	r1, r1
    1006:	2f 93       	push	r18
    1008:	3f 93       	push	r19
    100a:	4f 93       	push	r20
    100c:	5f 93       	push	r21
    100e:	6f 93       	push	r22
    1010:	7f 93       	push	r23
    1012:	8f 93       	push	r24
    1014:	9f 93       	push	r25
    1016:	af 93       	push	r26
    1018:	bf 93       	push	r27
    101a:	ef 93       	push	r30
    101c:	ff 93       	push	r31
	static u16 CTC_Counter =0;
	CTC_Counter++;
    101e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <CTC_Counter.1634>
    1022:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <CTC_Counter.1634+0x1>
    1026:	01 96       	adiw	r24, 0x01	; 1
    1028:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <CTC_Counter.1634+0x1>
    102c:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <CTC_Counter.1634>
	
	if( Private_CTC_Counter == CTC_Counter)
    1030:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <Private_CTC_Counter>
    1034:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <Private_CTC_Counter+0x1>
    1038:	82 17       	cp	r24, r18
    103a:	93 07       	cpc	r25, r19
    103c:	59 f4       	brne	.+22     	; 0x1054 <__vector_4+0x58>
	{
		CTC_Counter = 0;
    103e:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <CTC_Counter.1634+0x1>
    1042:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <CTC_Counter.1634>
		if (PRIVATE_PtrCallBackCTC != NULL)
    1046:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <PRIVATE_PtrCallBackCTC>
    104a:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <PRIVATE_PtrCallBackCTC+0x1>
    104e:	30 97       	sbiw	r30, 0x00	; 0
    1050:	09 f0       	breq	.+2      	; 0x1054 <__vector_4+0x58>
		{
			PRIVATE_PtrCallBackCTC();
    1052:	09 95       	icall
		}
	}
    1054:	ff 91       	pop	r31
    1056:	ef 91       	pop	r30
    1058:	bf 91       	pop	r27
    105a:	af 91       	pop	r26
    105c:	9f 91       	pop	r25
    105e:	8f 91       	pop	r24
    1060:	7f 91       	pop	r23
    1062:	6f 91       	pop	r22
    1064:	5f 91       	pop	r21
    1066:	4f 91       	pop	r20
    1068:	3f 91       	pop	r19
    106a:	2f 91       	pop	r18
    106c:	0f 90       	pop	r0
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	0f 90       	pop	r0
    1072:	1f 90       	pop	r1
    1074:	18 95       	reti

00001076 <__subsf3>:
    1076:	50 58       	subi	r21, 0x80	; 128

00001078 <__addsf3>:
    1078:	bb 27       	eor	r27, r27
    107a:	aa 27       	eor	r26, r26
    107c:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__addsf3x>
    1080:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__fp_round>
    1084:	0e 94 b8 09 	call	0x1370	; 0x1370 <__fp_pscA>
    1088:	38 f0       	brcs	.+14     	; 0x1098 <__addsf3+0x20>
    108a:	0e 94 bf 09 	call	0x137e	; 0x137e <__fp_pscB>
    108e:	20 f0       	brcs	.+8      	; 0x1098 <__addsf3+0x20>
    1090:	39 f4       	brne	.+14     	; 0x10a0 <__addsf3+0x28>
    1092:	9f 3f       	cpi	r25, 0xFF	; 255
    1094:	19 f4       	brne	.+6      	; 0x109c <__addsf3+0x24>
    1096:	26 f4       	brtc	.+8      	; 0x10a0 <__addsf3+0x28>
    1098:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__fp_nan>
    109c:	0e f4       	brtc	.+2      	; 0x10a0 <__addsf3+0x28>
    109e:	e0 95       	com	r30
    10a0:	e7 fb       	bst	r30, 7
    10a2:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_inf>

000010a6 <__addsf3x>:
    10a6:	e9 2f       	mov	r30, r25
    10a8:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__fp_split3>
    10ac:	58 f3       	brcs	.-42     	; 0x1084 <__addsf3+0xc>
    10ae:	ba 17       	cp	r27, r26
    10b0:	62 07       	cpc	r22, r18
    10b2:	73 07       	cpc	r23, r19
    10b4:	84 07       	cpc	r24, r20
    10b6:	95 07       	cpc	r25, r21
    10b8:	20 f0       	brcs	.+8      	; 0x10c2 <__addsf3x+0x1c>
    10ba:	79 f4       	brne	.+30     	; 0x10da <__addsf3x+0x34>
    10bc:	a6 f5       	brtc	.+104    	; 0x1126 <__addsf3x+0x80>
    10be:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__fp_zero>
    10c2:	0e f4       	brtc	.+2      	; 0x10c6 <__addsf3x+0x20>
    10c4:	e0 95       	com	r30
    10c6:	0b 2e       	mov	r0, r27
    10c8:	ba 2f       	mov	r27, r26
    10ca:	a0 2d       	mov	r26, r0
    10cc:	0b 01       	movw	r0, r22
    10ce:	b9 01       	movw	r22, r18
    10d0:	90 01       	movw	r18, r0
    10d2:	0c 01       	movw	r0, r24
    10d4:	ca 01       	movw	r24, r20
    10d6:	a0 01       	movw	r20, r0
    10d8:	11 24       	eor	r1, r1
    10da:	ff 27       	eor	r31, r31
    10dc:	59 1b       	sub	r21, r25
    10de:	99 f0       	breq	.+38     	; 0x1106 <__addsf3x+0x60>
    10e0:	59 3f       	cpi	r21, 0xF9	; 249
    10e2:	50 f4       	brcc	.+20     	; 0x10f8 <__addsf3x+0x52>
    10e4:	50 3e       	cpi	r21, 0xE0	; 224
    10e6:	68 f1       	brcs	.+90     	; 0x1142 <__addsf3x+0x9c>
    10e8:	1a 16       	cp	r1, r26
    10ea:	f0 40       	sbci	r31, 0x00	; 0
    10ec:	a2 2f       	mov	r26, r18
    10ee:	23 2f       	mov	r18, r19
    10f0:	34 2f       	mov	r19, r20
    10f2:	44 27       	eor	r20, r20
    10f4:	58 5f       	subi	r21, 0xF8	; 248
    10f6:	f3 cf       	rjmp	.-26     	; 0x10de <__addsf3x+0x38>
    10f8:	46 95       	lsr	r20
    10fa:	37 95       	ror	r19
    10fc:	27 95       	ror	r18
    10fe:	a7 95       	ror	r26
    1100:	f0 40       	sbci	r31, 0x00	; 0
    1102:	53 95       	inc	r21
    1104:	c9 f7       	brne	.-14     	; 0x10f8 <__addsf3x+0x52>
    1106:	7e f4       	brtc	.+30     	; 0x1126 <__addsf3x+0x80>
    1108:	1f 16       	cp	r1, r31
    110a:	ba 0b       	sbc	r27, r26
    110c:	62 0b       	sbc	r22, r18
    110e:	73 0b       	sbc	r23, r19
    1110:	84 0b       	sbc	r24, r20
    1112:	ba f0       	brmi	.+46     	; 0x1142 <__addsf3x+0x9c>
    1114:	91 50       	subi	r25, 0x01	; 1
    1116:	a1 f0       	breq	.+40     	; 0x1140 <__addsf3x+0x9a>
    1118:	ff 0f       	add	r31, r31
    111a:	bb 1f       	adc	r27, r27
    111c:	66 1f       	adc	r22, r22
    111e:	77 1f       	adc	r23, r23
    1120:	88 1f       	adc	r24, r24
    1122:	c2 f7       	brpl	.-16     	; 0x1114 <__addsf3x+0x6e>
    1124:	0e c0       	rjmp	.+28     	; 0x1142 <__addsf3x+0x9c>
    1126:	ba 0f       	add	r27, r26
    1128:	62 1f       	adc	r22, r18
    112a:	73 1f       	adc	r23, r19
    112c:	84 1f       	adc	r24, r20
    112e:	48 f4       	brcc	.+18     	; 0x1142 <__addsf3x+0x9c>
    1130:	87 95       	ror	r24
    1132:	77 95       	ror	r23
    1134:	67 95       	ror	r22
    1136:	b7 95       	ror	r27
    1138:	f7 95       	ror	r31
    113a:	9e 3f       	cpi	r25, 0xFE	; 254
    113c:	08 f0       	brcs	.+2      	; 0x1140 <__addsf3x+0x9a>
    113e:	b0 cf       	rjmp	.-160    	; 0x10a0 <__addsf3+0x28>
    1140:	93 95       	inc	r25
    1142:	88 0f       	add	r24, r24
    1144:	08 f0       	brcs	.+2      	; 0x1148 <__addsf3x+0xa2>
    1146:	99 27       	eor	r25, r25
    1148:	ee 0f       	add	r30, r30
    114a:	97 95       	ror	r25
    114c:	87 95       	ror	r24
    114e:	08 95       	ret

00001150 <__cmpsf2>:
    1150:	0e 94 8b 09 	call	0x1316	; 0x1316 <__fp_cmp>
    1154:	08 f4       	brcc	.+2      	; 0x1158 <__cmpsf2+0x8>
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	08 95       	ret

0000115a <__divsf3>:
    115a:	0e 94 c1 08 	call	0x1182	; 0x1182 <__divsf3x>
    115e:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__fp_round>
    1162:	0e 94 bf 09 	call	0x137e	; 0x137e <__fp_pscB>
    1166:	58 f0       	brcs	.+22     	; 0x117e <__divsf3+0x24>
    1168:	0e 94 b8 09 	call	0x1370	; 0x1370 <__fp_pscA>
    116c:	40 f0       	brcs	.+16     	; 0x117e <__divsf3+0x24>
    116e:	29 f4       	brne	.+10     	; 0x117a <__divsf3+0x20>
    1170:	5f 3f       	cpi	r21, 0xFF	; 255
    1172:	29 f0       	breq	.+10     	; 0x117e <__divsf3+0x24>
    1174:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_inf>
    1178:	51 11       	cpse	r21, r1
    117a:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_szero>
    117e:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__fp_nan>

00001182 <__divsf3x>:
    1182:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__fp_split3>
    1186:	68 f3       	brcs	.-38     	; 0x1162 <__divsf3+0x8>

00001188 <__divsf3_pse>:
    1188:	99 23       	and	r25, r25
    118a:	b1 f3       	breq	.-20     	; 0x1178 <__divsf3+0x1e>
    118c:	55 23       	and	r21, r21
    118e:	91 f3       	breq	.-28     	; 0x1174 <__divsf3+0x1a>
    1190:	95 1b       	sub	r25, r21
    1192:	55 0b       	sbc	r21, r21
    1194:	bb 27       	eor	r27, r27
    1196:	aa 27       	eor	r26, r26
    1198:	62 17       	cp	r22, r18
    119a:	73 07       	cpc	r23, r19
    119c:	84 07       	cpc	r24, r20
    119e:	38 f0       	brcs	.+14     	; 0x11ae <__divsf3_pse+0x26>
    11a0:	9f 5f       	subi	r25, 0xFF	; 255
    11a2:	5f 4f       	sbci	r21, 0xFF	; 255
    11a4:	22 0f       	add	r18, r18
    11a6:	33 1f       	adc	r19, r19
    11a8:	44 1f       	adc	r20, r20
    11aa:	aa 1f       	adc	r26, r26
    11ac:	a9 f3       	breq	.-22     	; 0x1198 <__divsf3_pse+0x10>
    11ae:	35 d0       	rcall	.+106    	; 0x121a <__divsf3_pse+0x92>
    11b0:	0e 2e       	mov	r0, r30
    11b2:	3a f0       	brmi	.+14     	; 0x11c2 <__divsf3_pse+0x3a>
    11b4:	e0 e8       	ldi	r30, 0x80	; 128
    11b6:	32 d0       	rcall	.+100    	; 0x121c <__divsf3_pse+0x94>
    11b8:	91 50       	subi	r25, 0x01	; 1
    11ba:	50 40       	sbci	r21, 0x00	; 0
    11bc:	e6 95       	lsr	r30
    11be:	00 1c       	adc	r0, r0
    11c0:	ca f7       	brpl	.-14     	; 0x11b4 <__divsf3_pse+0x2c>
    11c2:	2b d0       	rcall	.+86     	; 0x121a <__divsf3_pse+0x92>
    11c4:	fe 2f       	mov	r31, r30
    11c6:	29 d0       	rcall	.+82     	; 0x121a <__divsf3_pse+0x92>
    11c8:	66 0f       	add	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	88 1f       	adc	r24, r24
    11ce:	bb 1f       	adc	r27, r27
    11d0:	26 17       	cp	r18, r22
    11d2:	37 07       	cpc	r19, r23
    11d4:	48 07       	cpc	r20, r24
    11d6:	ab 07       	cpc	r26, r27
    11d8:	b0 e8       	ldi	r27, 0x80	; 128
    11da:	09 f0       	breq	.+2      	; 0x11de <__divsf3_pse+0x56>
    11dc:	bb 0b       	sbc	r27, r27
    11de:	80 2d       	mov	r24, r0
    11e0:	bf 01       	movw	r22, r30
    11e2:	ff 27       	eor	r31, r31
    11e4:	93 58       	subi	r25, 0x83	; 131
    11e6:	5f 4f       	sbci	r21, 0xFF	; 255
    11e8:	3a f0       	brmi	.+14     	; 0x11f8 <__divsf3_pse+0x70>
    11ea:	9e 3f       	cpi	r25, 0xFE	; 254
    11ec:	51 05       	cpc	r21, r1
    11ee:	78 f0       	brcs	.+30     	; 0x120e <__divsf3_pse+0x86>
    11f0:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_inf>
    11f4:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_szero>
    11f8:	5f 3f       	cpi	r21, 0xFF	; 255
    11fa:	e4 f3       	brlt	.-8      	; 0x11f4 <__divsf3_pse+0x6c>
    11fc:	98 3e       	cpi	r25, 0xE8	; 232
    11fe:	d4 f3       	brlt	.-12     	; 0x11f4 <__divsf3_pse+0x6c>
    1200:	86 95       	lsr	r24
    1202:	77 95       	ror	r23
    1204:	67 95       	ror	r22
    1206:	b7 95       	ror	r27
    1208:	f7 95       	ror	r31
    120a:	9f 5f       	subi	r25, 0xFF	; 255
    120c:	c9 f7       	brne	.-14     	; 0x1200 <__divsf3_pse+0x78>
    120e:	88 0f       	add	r24, r24
    1210:	91 1d       	adc	r25, r1
    1212:	96 95       	lsr	r25
    1214:	87 95       	ror	r24
    1216:	97 f9       	bld	r25, 7
    1218:	08 95       	ret
    121a:	e1 e0       	ldi	r30, 0x01	; 1
    121c:	66 0f       	add	r22, r22
    121e:	77 1f       	adc	r23, r23
    1220:	88 1f       	adc	r24, r24
    1222:	bb 1f       	adc	r27, r27
    1224:	62 17       	cp	r22, r18
    1226:	73 07       	cpc	r23, r19
    1228:	84 07       	cpc	r24, r20
    122a:	ba 07       	cpc	r27, r26
    122c:	20 f0       	brcs	.+8      	; 0x1236 <__divsf3_pse+0xae>
    122e:	62 1b       	sub	r22, r18
    1230:	73 0b       	sbc	r23, r19
    1232:	84 0b       	sbc	r24, r20
    1234:	ba 0b       	sbc	r27, r26
    1236:	ee 1f       	adc	r30, r30
    1238:	88 f7       	brcc	.-30     	; 0x121c <__divsf3_pse+0x94>
    123a:	e0 95       	com	r30
    123c:	08 95       	ret

0000123e <__fixunssfsi>:
    123e:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_splitA>
    1242:	88 f0       	brcs	.+34     	; 0x1266 <__fixunssfsi+0x28>
    1244:	9f 57       	subi	r25, 0x7F	; 127
    1246:	98 f0       	brcs	.+38     	; 0x126e <__fixunssfsi+0x30>
    1248:	b9 2f       	mov	r27, r25
    124a:	99 27       	eor	r25, r25
    124c:	b7 51       	subi	r27, 0x17	; 23
    124e:	b0 f0       	brcs	.+44     	; 0x127c <__fixunssfsi+0x3e>
    1250:	e1 f0       	breq	.+56     	; 0x128a <__fixunssfsi+0x4c>
    1252:	66 0f       	add	r22, r22
    1254:	77 1f       	adc	r23, r23
    1256:	88 1f       	adc	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	1a f0       	brmi	.+6      	; 0x1262 <__fixunssfsi+0x24>
    125c:	ba 95       	dec	r27
    125e:	c9 f7       	brne	.-14     	; 0x1252 <__fixunssfsi+0x14>
    1260:	14 c0       	rjmp	.+40     	; 0x128a <__fixunssfsi+0x4c>
    1262:	b1 30       	cpi	r27, 0x01	; 1
    1264:	91 f0       	breq	.+36     	; 0x128a <__fixunssfsi+0x4c>
    1266:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fp_zero>
    126a:	b1 e0       	ldi	r27, 0x01	; 1
    126c:	08 95       	ret
    126e:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__fp_zero>
    1272:	67 2f       	mov	r22, r23
    1274:	78 2f       	mov	r23, r24
    1276:	88 27       	eor	r24, r24
    1278:	b8 5f       	subi	r27, 0xF8	; 248
    127a:	39 f0       	breq	.+14     	; 0x128a <__fixunssfsi+0x4c>
    127c:	b9 3f       	cpi	r27, 0xF9	; 249
    127e:	cc f3       	brlt	.-14     	; 0x1272 <__fixunssfsi+0x34>
    1280:	86 95       	lsr	r24
    1282:	77 95       	ror	r23
    1284:	67 95       	ror	r22
    1286:	b3 95       	inc	r27
    1288:	d9 f7       	brne	.-10     	; 0x1280 <__fixunssfsi+0x42>
    128a:	3e f4       	brtc	.+14     	; 0x129a <__fixunssfsi+0x5c>
    128c:	90 95       	com	r25
    128e:	80 95       	com	r24
    1290:	70 95       	com	r23
    1292:	61 95       	neg	r22
    1294:	7f 4f       	sbci	r23, 0xFF	; 255
    1296:	8f 4f       	sbci	r24, 0xFF	; 255
    1298:	9f 4f       	sbci	r25, 0xFF	; 255
    129a:	08 95       	ret

0000129c <__floatunsisf>:
    129c:	e8 94       	clt
    129e:	09 c0       	rjmp	.+18     	; 0x12b2 <__floatsisf+0x12>

000012a0 <__floatsisf>:
    12a0:	97 fb       	bst	r25, 7
    12a2:	3e f4       	brtc	.+14     	; 0x12b2 <__floatsisf+0x12>
    12a4:	90 95       	com	r25
    12a6:	80 95       	com	r24
    12a8:	70 95       	com	r23
    12aa:	61 95       	neg	r22
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	8f 4f       	sbci	r24, 0xFF	; 255
    12b0:	9f 4f       	sbci	r25, 0xFF	; 255
    12b2:	99 23       	and	r25, r25
    12b4:	a9 f0       	breq	.+42     	; 0x12e0 <__floatsisf+0x40>
    12b6:	f9 2f       	mov	r31, r25
    12b8:	96 e9       	ldi	r25, 0x96	; 150
    12ba:	bb 27       	eor	r27, r27
    12bc:	93 95       	inc	r25
    12be:	f6 95       	lsr	r31
    12c0:	87 95       	ror	r24
    12c2:	77 95       	ror	r23
    12c4:	67 95       	ror	r22
    12c6:	b7 95       	ror	r27
    12c8:	f1 11       	cpse	r31, r1
    12ca:	f8 cf       	rjmp	.-16     	; 0x12bc <__floatsisf+0x1c>
    12cc:	fa f4       	brpl	.+62     	; 0x130c <__floatsisf+0x6c>
    12ce:	bb 0f       	add	r27, r27
    12d0:	11 f4       	brne	.+4      	; 0x12d6 <__floatsisf+0x36>
    12d2:	60 ff       	sbrs	r22, 0
    12d4:	1b c0       	rjmp	.+54     	; 0x130c <__floatsisf+0x6c>
    12d6:	6f 5f       	subi	r22, 0xFF	; 255
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255
    12da:	8f 4f       	sbci	r24, 0xFF	; 255
    12dc:	9f 4f       	sbci	r25, 0xFF	; 255
    12de:	16 c0       	rjmp	.+44     	; 0x130c <__floatsisf+0x6c>
    12e0:	88 23       	and	r24, r24
    12e2:	11 f0       	breq	.+4      	; 0x12e8 <__floatsisf+0x48>
    12e4:	96 e9       	ldi	r25, 0x96	; 150
    12e6:	11 c0       	rjmp	.+34     	; 0x130a <__floatsisf+0x6a>
    12e8:	77 23       	and	r23, r23
    12ea:	21 f0       	breq	.+8      	; 0x12f4 <__floatsisf+0x54>
    12ec:	9e e8       	ldi	r25, 0x8E	; 142
    12ee:	87 2f       	mov	r24, r23
    12f0:	76 2f       	mov	r23, r22
    12f2:	05 c0       	rjmp	.+10     	; 0x12fe <__floatsisf+0x5e>
    12f4:	66 23       	and	r22, r22
    12f6:	71 f0       	breq	.+28     	; 0x1314 <__floatsisf+0x74>
    12f8:	96 e8       	ldi	r25, 0x86	; 134
    12fa:	86 2f       	mov	r24, r22
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	2a f0       	brmi	.+10     	; 0x130c <__floatsisf+0x6c>
    1302:	9a 95       	dec	r25
    1304:	66 0f       	add	r22, r22
    1306:	77 1f       	adc	r23, r23
    1308:	88 1f       	adc	r24, r24
    130a:	da f7       	brpl	.-10     	; 0x1302 <__floatsisf+0x62>
    130c:	88 0f       	add	r24, r24
    130e:	96 95       	lsr	r25
    1310:	87 95       	ror	r24
    1312:	97 f9       	bld	r25, 7
    1314:	08 95       	ret

00001316 <__fp_cmp>:
    1316:	99 0f       	add	r25, r25
    1318:	00 08       	sbc	r0, r0
    131a:	55 0f       	add	r21, r21
    131c:	aa 0b       	sbc	r26, r26
    131e:	e0 e8       	ldi	r30, 0x80	; 128
    1320:	fe ef       	ldi	r31, 0xFE	; 254
    1322:	16 16       	cp	r1, r22
    1324:	17 06       	cpc	r1, r23
    1326:	e8 07       	cpc	r30, r24
    1328:	f9 07       	cpc	r31, r25
    132a:	c0 f0       	brcs	.+48     	; 0x135c <__fp_cmp+0x46>
    132c:	12 16       	cp	r1, r18
    132e:	13 06       	cpc	r1, r19
    1330:	e4 07       	cpc	r30, r20
    1332:	f5 07       	cpc	r31, r21
    1334:	98 f0       	brcs	.+38     	; 0x135c <__fp_cmp+0x46>
    1336:	62 1b       	sub	r22, r18
    1338:	73 0b       	sbc	r23, r19
    133a:	84 0b       	sbc	r24, r20
    133c:	95 0b       	sbc	r25, r21
    133e:	39 f4       	brne	.+14     	; 0x134e <__fp_cmp+0x38>
    1340:	0a 26       	eor	r0, r26
    1342:	61 f0       	breq	.+24     	; 0x135c <__fp_cmp+0x46>
    1344:	23 2b       	or	r18, r19
    1346:	24 2b       	or	r18, r20
    1348:	25 2b       	or	r18, r21
    134a:	21 f4       	brne	.+8      	; 0x1354 <__fp_cmp+0x3e>
    134c:	08 95       	ret
    134e:	0a 26       	eor	r0, r26
    1350:	09 f4       	brne	.+2      	; 0x1354 <__fp_cmp+0x3e>
    1352:	a1 40       	sbci	r26, 0x01	; 1
    1354:	a6 95       	lsr	r26
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	81 1d       	adc	r24, r1
    135a:	81 1d       	adc	r24, r1
    135c:	08 95       	ret

0000135e <__fp_inf>:
    135e:	97 f9       	bld	r25, 7
    1360:	9f 67       	ori	r25, 0x7F	; 127
    1362:	80 e8       	ldi	r24, 0x80	; 128
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	08 95       	ret

0000136a <__fp_nan>:
    136a:	9f ef       	ldi	r25, 0xFF	; 255
    136c:	80 ec       	ldi	r24, 0xC0	; 192
    136e:	08 95       	ret

00001370 <__fp_pscA>:
    1370:	00 24       	eor	r0, r0
    1372:	0a 94       	dec	r0
    1374:	16 16       	cp	r1, r22
    1376:	17 06       	cpc	r1, r23
    1378:	18 06       	cpc	r1, r24
    137a:	09 06       	cpc	r0, r25
    137c:	08 95       	ret

0000137e <__fp_pscB>:
    137e:	00 24       	eor	r0, r0
    1380:	0a 94       	dec	r0
    1382:	12 16       	cp	r1, r18
    1384:	13 06       	cpc	r1, r19
    1386:	14 06       	cpc	r1, r20
    1388:	05 06       	cpc	r0, r21
    138a:	08 95       	ret

0000138c <__fp_round>:
    138c:	09 2e       	mov	r0, r25
    138e:	03 94       	inc	r0
    1390:	00 0c       	add	r0, r0
    1392:	11 f4       	brne	.+4      	; 0x1398 <__fp_round+0xc>
    1394:	88 23       	and	r24, r24
    1396:	52 f0       	brmi	.+20     	; 0x13ac <__fp_round+0x20>
    1398:	bb 0f       	add	r27, r27
    139a:	40 f4       	brcc	.+16     	; 0x13ac <__fp_round+0x20>
    139c:	bf 2b       	or	r27, r31
    139e:	11 f4       	brne	.+4      	; 0x13a4 <__fp_round+0x18>
    13a0:	60 ff       	sbrs	r22, 0
    13a2:	04 c0       	rjmp	.+8      	; 0x13ac <__fp_round+0x20>
    13a4:	6f 5f       	subi	r22, 0xFF	; 255
    13a6:	7f 4f       	sbci	r23, 0xFF	; 255
    13a8:	8f 4f       	sbci	r24, 0xFF	; 255
    13aa:	9f 4f       	sbci	r25, 0xFF	; 255
    13ac:	08 95       	ret

000013ae <__fp_split3>:
    13ae:	57 fd       	sbrc	r21, 7
    13b0:	90 58       	subi	r25, 0x80	; 128
    13b2:	44 0f       	add	r20, r20
    13b4:	55 1f       	adc	r21, r21
    13b6:	59 f0       	breq	.+22     	; 0x13ce <__fp_splitA+0x10>
    13b8:	5f 3f       	cpi	r21, 0xFF	; 255
    13ba:	71 f0       	breq	.+28     	; 0x13d8 <__fp_splitA+0x1a>
    13bc:	47 95       	ror	r20

000013be <__fp_splitA>:
    13be:	88 0f       	add	r24, r24
    13c0:	97 fb       	bst	r25, 7
    13c2:	99 1f       	adc	r25, r25
    13c4:	61 f0       	breq	.+24     	; 0x13de <__fp_splitA+0x20>
    13c6:	9f 3f       	cpi	r25, 0xFF	; 255
    13c8:	79 f0       	breq	.+30     	; 0x13e8 <__fp_splitA+0x2a>
    13ca:	87 95       	ror	r24
    13cc:	08 95       	ret
    13ce:	12 16       	cp	r1, r18
    13d0:	13 06       	cpc	r1, r19
    13d2:	14 06       	cpc	r1, r20
    13d4:	55 1f       	adc	r21, r21
    13d6:	f2 cf       	rjmp	.-28     	; 0x13bc <__fp_split3+0xe>
    13d8:	46 95       	lsr	r20
    13da:	f1 df       	rcall	.-30     	; 0x13be <__fp_splitA>
    13dc:	08 c0       	rjmp	.+16     	; 0x13ee <__fp_splitA+0x30>
    13de:	16 16       	cp	r1, r22
    13e0:	17 06       	cpc	r1, r23
    13e2:	18 06       	cpc	r1, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	f1 cf       	rjmp	.-30     	; 0x13ca <__fp_splitA+0xc>
    13e8:	86 95       	lsr	r24
    13ea:	71 05       	cpc	r23, r1
    13ec:	61 05       	cpc	r22, r1
    13ee:	08 94       	sec
    13f0:	08 95       	ret

000013f2 <__fp_zero>:
    13f2:	e8 94       	clt

000013f4 <__fp_szero>:
    13f4:	bb 27       	eor	r27, r27
    13f6:	66 27       	eor	r22, r22
    13f8:	77 27       	eor	r23, r23
    13fa:	cb 01       	movw	r24, r22
    13fc:	97 f9       	bld	r25, 7
    13fe:	08 95       	ret

00001400 <__gesf2>:
    1400:	0e 94 8b 09 	call	0x1316	; 0x1316 <__fp_cmp>
    1404:	08 f4       	brcc	.+2      	; 0x1408 <__gesf2+0x8>
    1406:	8f ef       	ldi	r24, 0xFF	; 255
    1408:	08 95       	ret

0000140a <__mulsf3>:
    140a:	0e 94 18 0a 	call	0x1430	; 0x1430 <__mulsf3x>
    140e:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__fp_round>
    1412:	0e 94 b8 09 	call	0x1370	; 0x1370 <__fp_pscA>
    1416:	38 f0       	brcs	.+14     	; 0x1426 <__mulsf3+0x1c>
    1418:	0e 94 bf 09 	call	0x137e	; 0x137e <__fp_pscB>
    141c:	20 f0       	brcs	.+8      	; 0x1426 <__mulsf3+0x1c>
    141e:	95 23       	and	r25, r21
    1420:	11 f0       	breq	.+4      	; 0x1426 <__mulsf3+0x1c>
    1422:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_inf>
    1426:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__fp_nan>
    142a:	11 24       	eor	r1, r1
    142c:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_szero>

00001430 <__mulsf3x>:
    1430:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__fp_split3>
    1434:	70 f3       	brcs	.-36     	; 0x1412 <__mulsf3+0x8>

00001436 <__mulsf3_pse>:
    1436:	95 9f       	mul	r25, r21
    1438:	c1 f3       	breq	.-16     	; 0x142a <__mulsf3+0x20>
    143a:	95 0f       	add	r25, r21
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	55 1f       	adc	r21, r21
    1440:	62 9f       	mul	r22, r18
    1442:	f0 01       	movw	r30, r0
    1444:	72 9f       	mul	r23, r18
    1446:	bb 27       	eor	r27, r27
    1448:	f0 0d       	add	r31, r0
    144a:	b1 1d       	adc	r27, r1
    144c:	63 9f       	mul	r22, r19
    144e:	aa 27       	eor	r26, r26
    1450:	f0 0d       	add	r31, r0
    1452:	b1 1d       	adc	r27, r1
    1454:	aa 1f       	adc	r26, r26
    1456:	64 9f       	mul	r22, r20
    1458:	66 27       	eor	r22, r22
    145a:	b0 0d       	add	r27, r0
    145c:	a1 1d       	adc	r26, r1
    145e:	66 1f       	adc	r22, r22
    1460:	82 9f       	mul	r24, r18
    1462:	22 27       	eor	r18, r18
    1464:	b0 0d       	add	r27, r0
    1466:	a1 1d       	adc	r26, r1
    1468:	62 1f       	adc	r22, r18
    146a:	73 9f       	mul	r23, r19
    146c:	b0 0d       	add	r27, r0
    146e:	a1 1d       	adc	r26, r1
    1470:	62 1f       	adc	r22, r18
    1472:	83 9f       	mul	r24, r19
    1474:	a0 0d       	add	r26, r0
    1476:	61 1d       	adc	r22, r1
    1478:	22 1f       	adc	r18, r18
    147a:	74 9f       	mul	r23, r20
    147c:	33 27       	eor	r19, r19
    147e:	a0 0d       	add	r26, r0
    1480:	61 1d       	adc	r22, r1
    1482:	23 1f       	adc	r18, r19
    1484:	84 9f       	mul	r24, r20
    1486:	60 0d       	add	r22, r0
    1488:	21 1d       	adc	r18, r1
    148a:	82 2f       	mov	r24, r18
    148c:	76 2f       	mov	r23, r22
    148e:	6a 2f       	mov	r22, r26
    1490:	11 24       	eor	r1, r1
    1492:	9f 57       	subi	r25, 0x7F	; 127
    1494:	50 40       	sbci	r21, 0x00	; 0
    1496:	9a f0       	brmi	.+38     	; 0x14be <__mulsf3_pse+0x88>
    1498:	f1 f0       	breq	.+60     	; 0x14d6 <__mulsf3_pse+0xa0>
    149a:	88 23       	and	r24, r24
    149c:	4a f0       	brmi	.+18     	; 0x14b0 <__mulsf3_pse+0x7a>
    149e:	ee 0f       	add	r30, r30
    14a0:	ff 1f       	adc	r31, r31
    14a2:	bb 1f       	adc	r27, r27
    14a4:	66 1f       	adc	r22, r22
    14a6:	77 1f       	adc	r23, r23
    14a8:	88 1f       	adc	r24, r24
    14aa:	91 50       	subi	r25, 0x01	; 1
    14ac:	50 40       	sbci	r21, 0x00	; 0
    14ae:	a9 f7       	brne	.-22     	; 0x149a <__mulsf3_pse+0x64>
    14b0:	9e 3f       	cpi	r25, 0xFE	; 254
    14b2:	51 05       	cpc	r21, r1
    14b4:	80 f0       	brcs	.+32     	; 0x14d6 <__mulsf3_pse+0xa0>
    14b6:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_inf>
    14ba:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_szero>
    14be:	5f 3f       	cpi	r21, 0xFF	; 255
    14c0:	e4 f3       	brlt	.-8      	; 0x14ba <__mulsf3_pse+0x84>
    14c2:	98 3e       	cpi	r25, 0xE8	; 232
    14c4:	d4 f3       	brlt	.-12     	; 0x14ba <__mulsf3_pse+0x84>
    14c6:	86 95       	lsr	r24
    14c8:	77 95       	ror	r23
    14ca:	67 95       	ror	r22
    14cc:	b7 95       	ror	r27
    14ce:	f7 95       	ror	r31
    14d0:	e7 95       	ror	r30
    14d2:	9f 5f       	subi	r25, 0xFF	; 255
    14d4:	c1 f7       	brne	.-16     	; 0x14c6 <__mulsf3_pse+0x90>
    14d6:	fe 2b       	or	r31, r30
    14d8:	88 0f       	add	r24, r24
    14da:	91 1d       	adc	r25, r1
    14dc:	96 95       	lsr	r25
    14de:	87 95       	ror	r24
    14e0:	97 f9       	bld	r25, 7
    14e2:	08 95       	ret

000014e4 <__udivmodsi4>:
    14e4:	a1 e2       	ldi	r26, 0x21	; 33
    14e6:	1a 2e       	mov	r1, r26
    14e8:	aa 1b       	sub	r26, r26
    14ea:	bb 1b       	sub	r27, r27
    14ec:	fd 01       	movw	r30, r26
    14ee:	0d c0       	rjmp	.+26     	; 0x150a <__udivmodsi4_ep>

000014f0 <__udivmodsi4_loop>:
    14f0:	aa 1f       	adc	r26, r26
    14f2:	bb 1f       	adc	r27, r27
    14f4:	ee 1f       	adc	r30, r30
    14f6:	ff 1f       	adc	r31, r31
    14f8:	a2 17       	cp	r26, r18
    14fa:	b3 07       	cpc	r27, r19
    14fc:	e4 07       	cpc	r30, r20
    14fe:	f5 07       	cpc	r31, r21
    1500:	20 f0       	brcs	.+8      	; 0x150a <__udivmodsi4_ep>
    1502:	a2 1b       	sub	r26, r18
    1504:	b3 0b       	sbc	r27, r19
    1506:	e4 0b       	sbc	r30, r20
    1508:	f5 0b       	sbc	r31, r21

0000150a <__udivmodsi4_ep>:
    150a:	66 1f       	adc	r22, r22
    150c:	77 1f       	adc	r23, r23
    150e:	88 1f       	adc	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	1a 94       	dec	r1
    1514:	69 f7       	brne	.-38     	; 0x14f0 <__udivmodsi4_loop>
    1516:	60 95       	com	r22
    1518:	70 95       	com	r23
    151a:	80 95       	com	r24
    151c:	90 95       	com	r25
    151e:	9b 01       	movw	r18, r22
    1520:	ac 01       	movw	r20, r24
    1522:	bd 01       	movw	r22, r26
    1524:	cf 01       	movw	r24, r30
    1526:	08 95       	ret

00001528 <__muluhisi3>:
    1528:	0e 94 9f 0a 	call	0x153e	; 0x153e <__umulhisi3>
    152c:	a5 9f       	mul	r26, r21
    152e:	90 0d       	add	r25, r0
    1530:	b4 9f       	mul	r27, r20
    1532:	90 0d       	add	r25, r0
    1534:	a4 9f       	mul	r26, r20
    1536:	80 0d       	add	r24, r0
    1538:	91 1d       	adc	r25, r1
    153a:	11 24       	eor	r1, r1
    153c:	08 95       	ret

0000153e <__umulhisi3>:
    153e:	a2 9f       	mul	r26, r18
    1540:	b0 01       	movw	r22, r0
    1542:	b3 9f       	mul	r27, r19
    1544:	c0 01       	movw	r24, r0
    1546:	a3 9f       	mul	r26, r19
    1548:	70 0d       	add	r23, r0
    154a:	81 1d       	adc	r24, r1
    154c:	11 24       	eor	r1, r1
    154e:	91 1d       	adc	r25, r1
    1550:	b2 9f       	mul	r27, r18
    1552:	70 0d       	add	r23, r0
    1554:	81 1d       	adc	r24, r1
    1556:	11 24       	eor	r1, r1
    1558:	91 1d       	adc	r25, r1
    155a:	08 95       	ret

0000155c <_exit>:
    155c:	f8 94       	cli

0000155e <__stop_program>:
    155e:	ff cf       	rjmp	.-2      	; 0x155e <__stop_program>
