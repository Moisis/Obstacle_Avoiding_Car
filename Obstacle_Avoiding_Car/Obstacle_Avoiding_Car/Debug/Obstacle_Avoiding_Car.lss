
Obstacle_Avoiding_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001072  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000010e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  00800060  00800060  000010e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001118  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ed2  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b17  00000000  00000000  0000324e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013f3  00000000  00000000  00003d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000558  00000000  00000000  00005158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ab8  00000000  00000000  000056b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001230  00000000  00000000  00006168  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00007398  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
       8:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
       c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
      10:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__vector_4>
      14:	0c 94 2c 04 	jmp	0x858	; 0x858 <__vector_5>
      18:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__vector_6>
      1c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
      20:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
      24:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
      28:	0c 94 b9 03 	jmp	0x772	; 0x772 <__vector_10>
      2c:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__vector_11>
      30:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
      34:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
      38:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
      3c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
      40:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
      44:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
      48:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
      4c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
      50:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
      54:	bb 04       	cpc	r11, r11
      56:	d4 04       	cpc	r13, r4
      58:	e4 04       	cpc	r14, r4
      5a:	f4 04       	cpc	r15, r4
      5c:	04 05       	cpc	r16, r4
      5e:	1d 05       	cpc	r17, r13
      60:	2d 05       	cpc	r18, r13
      62:	3d 05       	cpc	r19, r13
      64:	4d 05       	cpc	r20, r13
      66:	5a 05       	cpc	r21, r10
      68:	67 05       	cpc	r22, r7
      6a:	74 05       	cpc	r23, r4
      6c:	81 05       	cpc	r24, r1
      6e:	b3 05       	cpc	r27, r3
      70:	9a 05       	cpc	r25, r10
      72:	a7 05       	cpc	r26, r7

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf e5       	ldi	r28, 0x5F	; 95
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_clear_bss>:
      80:	20 e0       	ldi	r18, 0x00	; 0
      82:	a0 e6       	ldi	r26, 0x60	; 96
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	01 c0       	rjmp	.+2      	; 0x8a <.do_clear_bss_start>

00000088 <.do_clear_bss_loop>:
      88:	1d 92       	st	X+, r1

0000008a <.do_clear_bss_start>:
      8a:	ae 38       	cpi	r26, 0x8E	; 142
      8c:	b2 07       	cpc	r27, r18
      8e:	e1 f7       	brne	.-8      	; 0x88 <.do_clear_bss_loop>
      90:	0e 94 4f 02 	call	0x49e	; 0x49e <main>
      94:	0c 94 37 08 	jmp	0x106e	; 0x106e <_exit>

00000098 <__bad_interrupt>:
      98:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009c <SERVO_voidTimer1InitOCR1B>:
void SERVO_voidTimer1ServoSetAngleOCR1A(u32 Copy_u32Angle)
{
	TIMER_voidTimer1SetICR1 (19999);
	u32 Local_u32AnglePulse = (((Copy_u32Angle * 1840 )/180)+480);
	TIMER_voidTimer1SetOCR1A(Local_u32AnglePulse);
}
      9c:	41 e0       	ldi	r20, 0x01	; 1
      9e:	64 e0       	ldi	r22, 0x04	; 4
      a0:	83 e0       	ldi	r24, 0x03	; 3
      a2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_setPinDirection>
      a6:	42 e0       	ldi	r20, 0x02	; 2
      a8:	60 e0       	ldi	r22, 0x00	; 0
      aa:	8f e0       	ldi	r24, 0x0F	; 15
      ac:	0e 94 b1 04 	call	0x962	; 0x962 <TIMER_voidTimer1Enable>
      b0:	08 95       	ret

000000b2 <SERVO_voidTimer1ServoSetAngleOCR1B>:



void SERVO_voidTimer1ServoSetAngleOCR1B(u32 Copy_u32Angle)
{
      b2:	cf 92       	push	r12
      b4:	df 92       	push	r13
      b6:	ef 92       	push	r14
      b8:	ff 92       	push	r15
      ba:	6b 01       	movw	r12, r22
      bc:	7c 01       	movw	r14, r24
	TIMER_voidTimer1SetOCR1A (19999);
      be:	8f e1       	ldi	r24, 0x1F	; 31
      c0:	9e e4       	ldi	r25, 0x4E	; 78
      c2:	0e 94 03 06 	call	0xc06	; 0xc06 <TIMER_voidTimer1SetOCR1A>
	u32 Local_u32AnglePulse = (((Copy_u32Angle * 1840 )/180)+480);
      c6:	a0 e3       	ldi	r26, 0x30	; 48
      c8:	b7 e0       	ldi	r27, 0x07	; 7
      ca:	a7 01       	movw	r20, r14
      cc:	96 01       	movw	r18, r12
      ce:	0e 94 2c 08 	call	0x1058	; 0x1058 <__muluhisi3>
      d2:	24 eb       	ldi	r18, 0xB4	; 180
      d4:	30 e0       	ldi	r19, 0x00	; 0
      d6:	40 e0       	ldi	r20, 0x00	; 0
      d8:	50 e0       	ldi	r21, 0x00	; 0
      da:	0e 94 f5 07 	call	0xfea	; 0xfea <__udivmodsi4>
      de:	da 01       	movw	r26, r20
      e0:	c9 01       	movw	r24, r18
      e2:	80 52       	subi	r24, 0x20	; 32
      e4:	9e 4f       	sbci	r25, 0xFE	; 254
      e6:	af 4f       	sbci	r26, 0xFF	; 255
      e8:	bf 4f       	sbci	r27, 0xFF	; 255
	TIMER_voidTimer1SetOCR1B(Local_u32AnglePulse);
      ea:	0e 94 06 06 	call	0xc0c	; 0xc0c <TIMER_voidTimer1SetOCR1B>
}
      ee:	ff 90       	pop	r15
      f0:	ef 90       	pop	r14
      f2:	df 90       	pop	r13
      f4:	cf 90       	pop	r12
      f6:	08 95       	ret

000000f8 <ULTRASONIC_voidEdgeProcessing>:



void ULTRASONIC_voidEdgeProcessing(void)
{
	ULTRASONIC_EdgeCounter++;
      f8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ULTRASONIC_EdgeCounter>
      fc:	8f 5f       	subi	r24, 0xFF	; 255
      fe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <ULTRASONIC_EdgeCounter>
	if(ULTRASONIC_EdgeCounter == 1)
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	31 f4       	brne	.+12     	; 0x112 <ULTRASONIC_voidEdgeProcessing+0x1a>
	{
		TIMER_voidClearTimer1Value();
     106:	0e 94 2d 06 	call	0xc5a	; 0xc5a <TIMER_voidClearTimer1Value>
		TIMER_voidTimer1ICUSetTriggerEdge(TIMER1_ICU_FALLING_EDGY_TYPE_MODE);
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	0e 94 19 06 	call	0xc32	; 0xc32 <TIMER_voidTimer1ICUSetTriggerEdge>
     110:	08 95       	ret
	}
	else if(ULTRASONIC_EdgeCounter == 2)
     112:	82 30       	cpi	r24, 0x02	; 2
     114:	59 f4       	brne	.+22     	; 0x12c <ULTRASONIC_voidEdgeProcessing+0x34>
	{
		ULTRASONIC_EdgeCounter = TIMER_voidTimer1ICUGetInputCaptureValue();
     116:	0e 94 25 06 	call	0xc4a	; 0xc4a <TIMER_voidTimer1ICUGetInputCaptureValue>
     11a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <ULTRASONIC_EdgeCounter>
		TIMER_voidClearTimer1Value();
     11e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <TIMER_voidClearTimer1Value>
		ULTRASONIC_EdgeCounter=0;
     122:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <ULTRASONIC_EdgeCounter>
		TIMER_voidTimer1ICUSetTriggerEdge(TIMER1_ICU_RISING_EDGY_TYPE_MODE);
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	0e 94 19 06 	call	0xc32	; 0xc32 <TIMER_voidTimer1ICUSetTriggerEdge>
     12c:	08 95       	ret

0000012e <ULTRASONIC_voidInit>:
u8 ULTRASONIC_EdgeCounter = 0;
u16 ULTRASONIC_TimeON = 0;

void ULTRASONIC_voidInit(void)
{
	GI_enable();
     12e:	0e 94 3f 03 	call	0x67e	; 0x67e <GI_enable>
	TIMER_voidTimer1ICUInit();
     132:	0e 94 09 06 	call	0xc12	; 0xc12 <TIMER_voidTimer1ICUInit>
	TIMER_voidTimer1ICUSetCallBack(&ULTRASONIC_voidEdgeProcessing);
     136:	8c e7       	ldi	r24, 0x7C	; 124
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 28 06 	call	0xc50	; 0xc50 <TIMER_voidTimer1ICUSetCallBack>
	DIO_setPinDirection(ULTRASONIC_ECHO_PORT,ULTRASONIC_ECHO_PIN,DIO_PIN_INPUT);
     13e:	40 e0       	ldi	r20, 0x00	; 0
     140:	66 e0       	ldi	r22, 0x06	; 6
     142:	83 e0       	ldi	r24, 0x03	; 3
     144:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_setPinDirection>
	DIO_setPinDirection(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_PIN_OUTPUT);
     148:	41 e0       	ldi	r20, 0x01	; 1
     14a:	65 e0       	ldi	r22, 0x05	; 5
     14c:	83 e0       	ldi	r24, 0x03	; 3
     14e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_setPinDirection>
	DIO_setPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_PIN_LOW);
     152:	40 e0       	ldi	r20, 0x00	; 0
     154:	65 e0       	ldi	r22, 0x05	; 5
     156:	83 e0       	ldi	r24, 0x03	; 3
     158:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     15c:	08 95       	ret

0000015e <ULTRASONIC_Trigger>:
	
}
void ULTRASONIC_Trigger(void)
{
	DIO_setPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_PIN_HIGH);
     15e:	41 e0       	ldi	r20, 0x01	; 1
     160:	65 e0       	ldi	r22, 0x05	; 5
     162:	83 e0       	ldi	r24, 0x03	; 3
     164:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     168:	8a e1       	ldi	r24, 0x1A	; 26
     16a:	8a 95       	dec	r24
     16c:	f1 f7       	brne	.-4      	; 0x16a <ULTRASONIC_Trigger+0xc>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <ULTRASONIC_Trigger+0x12>
	_delay_us(10);
	DIO_setPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_PIN_LOW);
     170:	40 e0       	ldi	r20, 0x00	; 0
     172:	65 e0       	ldi	r22, 0x05	; 5
     174:	83 e0       	ldi	r24, 0x03	; 3
     176:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     17a:	08 95       	ret

0000017c <ULTRASONIC_u16GetDistance>:
	
}
u16 ULTRASONIC_u16GetDistance(void)
{
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
	u16 Local_u16Distance;
	for (int Local_u8Couter=0;Local_u8Couter<16;Local_u8Couter++)
     180:	c0 e0       	ldi	r28, 0x00	; 0
     182:	d0 e0       	ldi	r29, 0x00	; 0
     184:	14 c0       	rjmp	.+40     	; 0x1ae <ULTRASONIC_u16GetDistance+0x32>
	{
		 ULTRASONIC_Trigger();
     186:	0e 94 af 00 	call	0x15e	; 0x15e <ULTRASONIC_Trigger>
		  * Prescaler F_CPU/8 for timer frequency.
		  * The timer gets incremented after 1 us time elapse.
		  * Distance (cm)= 17000 x (TIMER value) x 1 x 10^-6 cm
	      * Distance (cm)= (TIMER value) / 58 cm
	      * */
	     Local_u16Distance=(ULTRASONIC_TimeON/(57.828125)); /* Calculating Distance In cm */
     18a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     18e:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__floatunsisf>
     19a:	20 e0       	ldi	r18, 0x00	; 0
     19c:	30 e5       	ldi	r19, 0x50	; 80
     19e:	47 e6       	ldi	r20, 0x67	; 103
     1a0:	52 e4       	ldi	r21, 0x42	; 66
     1a2:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__divsf3>
     1a6:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fixunssfsi>
     1aa:	cb 01       	movw	r24, r22
	
}
u16 ULTRASONIC_u16GetDistance(void)
{
	u16 Local_u16Distance;
	for (int Local_u8Couter=0;Local_u8Couter<16;Local_u8Couter++)
     1ac:	21 96       	adiw	r28, 0x01	; 1
     1ae:	c0 31       	cpi	r28, 0x10	; 16
     1b0:	d1 05       	cpc	r29, r1
     1b2:	4c f3       	brlt	.-46     	; 0x186 <ULTRASONIC_u16GetDistance+0xa>
	      * Distance (cm)= (TIMER value) / 58 cm
	      * */
	     Local_u16Distance=(ULTRASONIC_TimeON/(57.828125)); /* Calculating Distance In cm */
	}
	return Local_u16Distance;
}
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <Set_Car_Speed>:
	DIO_setPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN3,DIO_PIN_LOW);
	DIO_setPinValue(DIO_PORTB,DIO_PIN0,DIO_PIN_HIGH);
	/* value of delay will change by change (voltage and arena) */
	_delay_ms(100);
	Car_Stop();
	Set_Car_Speed(Robot_u8_INIT_SPEED);
     1ba:	cf 92       	push	r12
     1bc:	df 92       	push	r13
     1be:	ef 92       	push	r14
     1c0:	ff 92       	push	r15
     1c2:	68 2f       	mov	r22, r24
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__floatunsisf>
     1ce:	6b 01       	movw	r12, r22
     1d0:	7c 01       	movw	r14, r24
     1d2:	0e 94 65 03 	call	0x6ca	; 0x6ca <TIMER_voidTimer0GeneratePWM>
     1d6:	c7 01       	movw	r24, r14
     1d8:	b6 01       	movw	r22, r12
     1da:	0e 94 1c 04 	call	0x838	; 0x838 <TIMER_voidTimer2GeneratePWM>
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	df 90       	pop	r13
     1e4:	cf 90       	pop	r12
     1e6:	08 95       	ret

000001e8 <Car_Stop>:
     1e8:	40 e0       	ldi	r20, 0x00	; 0
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     1fc:	40 e0       	ldi	r20, 0x00	; 0
     1fe:	62 e0       	ldi	r22, 0x02	; 2
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	64 e0       	ldi	r22, 0x04	; 4
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     210:	08 95       	ret

00000212 <Car_Forward>:
     212:	40 e0       	ldi	r20, 0x00	; 0
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     21c:	41 e0       	ldi	r20, 0x01	; 1
     21e:	61 e0       	ldi	r22, 0x01	; 1
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	62 e0       	ldi	r22, 0x02	; 2
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     230:	41 e0       	ldi	r20, 0x01	; 1
     232:	64 e0       	ldi	r22, 0x04	; 4
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     23a:	08 95       	ret

0000023c <Car_Backward>:
     23c:	41 e0       	ldi	r20, 0x01	; 1
     23e:	60 e0       	ldi	r22, 0x00	; 0
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     246:	40 e0       	ldi	r20, 0x00	; 0
     248:	61 e0       	ldi	r22, 0x01	; 1
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     250:	41 e0       	ldi	r20, 0x01	; 1
     252:	62 e0       	ldi	r22, 0x02	; 2
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	64 e0       	ldi	r22, 0x04	; 4
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     264:	08 95       	ret

00000266 <Car_Left>:
     266:	41 e0       	ldi	r20, 0x01	; 1
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     270:	40 e0       	ldi	r20, 0x00	; 0
     272:	61 e0       	ldi	r22, 0x01	; 1
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     27a:	40 e0       	ldi	r20, 0x00	; 0
     27c:	62 e0       	ldi	r22, 0x02	; 2
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     284:	41 e0       	ldi	r20, 0x01	; 1
     286:	64 e0       	ldi	r22, 0x04	; 4
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     28e:	08 95       	ret

00000290 <Car_Right>:
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     29a:	41 e0       	ldi	r20, 0x01	; 1
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     2a4:	41 e0       	ldi	r20, 0x01	; 1
     2a6:	62 e0       	ldi	r22, 0x02	; 2
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     2ae:	40 e0       	ldi	r20, 0x00	; 0
     2b0:	64 e0       	ldi	r22, 0x04	; 4
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
     2b8:	08 95       	ret

000002ba <Car_Reverse>:
}
void Car_Reverse(void)
{
	/* turn 180 degree  */
	Set_Car_Speed(60);
     2ba:	8c e3       	ldi	r24, 0x3C	; 60
     2bc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <Set_Car_Speed>
	DIO_setPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN1,DIO_PIN_HIGH);
     2c0:	41 e0       	ldi	r20, 0x01	; 1
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
	DIO_setPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN2,DIO_PIN_LOW);
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	61 e0       	ldi	r22, 0x01	; 1
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
	DIO_setPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN3,DIO_PIN_LOW);
     2d4:	40 e0       	ldi	r20, 0x00	; 0
     2d6:	62 e0       	ldi	r22, 0x02	; 2
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTB,DIO_PIN0,DIO_PIN_HIGH);
     2de:	41 e0       	ldi	r20, 0x01	; 1
     2e0:	60 e0       	ldi	r22, 0x00	; 0
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	0e 94 c9 02 	call	0x592	; 0x592 <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2e8:	2f ef       	ldi	r18, 0xFF	; 255
     2ea:	82 e5       	ldi	r24, 0x52	; 82
     2ec:	97 e0       	ldi	r25, 0x07	; 7
     2ee:	21 50       	subi	r18, 0x01	; 1
     2f0:	80 40       	sbci	r24, 0x00	; 0
     2f2:	90 40       	sbci	r25, 0x00	; 0
     2f4:	e1 f7       	brne	.-8      	; 0x2ee <Car_Reverse+0x34>
     2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <Car_Reverse+0x3e>
     2f8:	00 00       	nop
	/* value of delay will change by change (voltage and arena) */
	_delay_ms(300);
	Car_Stop();
     2fa:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Car_Stop>
	Set_Car_Speed(Robot_u8_INIT_SPEED);
     2fe:	8c e3       	ldi	r24, 0x3C	; 60
     300:	0e 94 dd 00 	call	0x1ba	; 0x1ba <Set_Car_Speed>
     304:	08 95       	ret

00000306 <Car_Compare>:
}

void Car_Compare(u16 LeftObject,u16 RightObject)
{
	  /* Comparison between two directions and set Orientation */
	  if (LeftObject > RightObject)
     306:	68 17       	cp	r22, r24
     308:	79 07       	cpc	r23, r25
     30a:	28 f4       	brcc	.+10     	; 0x316 <Car_Compare+0x10>
	  {
		  Car_Left();
     30c:	0e 94 33 01 	call	0x266	; 0x266 <Car_Left>
		  Car_Left();
     310:	0e 94 33 01 	call	0x266	; 0x266 <Car_Left>
     314:	08 95       	ret
	  }
	  else if (LeftObject <= RightObject)
     316:	68 17       	cp	r22, r24
     318:	79 07       	cpc	r23, r25
     31a:	28 f0       	brcs	.+10     	; 0x326 <Car_Compare+0x20>
	  {
		  Car_Right();
     31c:	0e 94 48 01 	call	0x290	; 0x290 <Car_Right>
		  Car_Right();
     320:	0e 94 48 01 	call	0x290	; 0x290 <Car_Right>
     324:	08 95       	ret
	  }
	  else if (LeftObject < 10 && RightObject < 10)
     326:	0a 97       	sbiw	r24, 0x0a	; 10
     328:	38 f4       	brcc	.+14     	; 0x338 <Car_Compare+0x32>
     32a:	6a 30       	cpi	r22, 0x0A	; 10
     32c:	71 05       	cpc	r23, r1
     32e:	20 f4       	brcc	.+8      	; 0x338 <Car_Compare+0x32>
	  {
		  Car_Reverse();
     330:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Car_Reverse>
		  Car_Reverse();
     334:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Car_Reverse>
     338:	08 95       	ret

0000033a <Start_AutoMode_Car>:


void Start_AutoMode_Car(void)
{
  u16 Local_u16LeftObject = 0, Local_u16RightObject = 0, Local_u16DistanceObject = 0;
    Set_Car_Speed(Robot_u8_ObstacleAvoidingMode_SPEED);
     33a:	8c e3       	ldi	r24, 0x3C	; 60
     33c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <Set_Car_Speed>

    while (1)
    {
        /* Read distance -->if no object go forward */
        Local_u16DistanceObject = ULTRASONIC_u16GetDistance();
     340:	0e 94 be 00 	call	0x17c	; 0x17c <ULTRASONIC_u16GetDistance>
		
        if (Local_u16DistanceObject == 0)
     344:	00 97       	sbiw	r24, 0x00	; 0
     346:	11 f4       	brne	.+4      	; 0x34c <Start_AutoMode_Car+0x12>
        {
            Local_u16DistanceObject = 250;
     348:	8a ef       	ldi	r24, 0xFA	; 250
     34a:	90 e0       	ldi	r25, 0x00	; 0
        }
        if (Local_u16DistanceObject <= 15)
     34c:	40 97       	sbiw	r24, 0x10	; 16
     34e:	08 f0       	brcs	.+2      	; 0x352 <Start_AutoMode_Car+0x18>
     350:	60 c0       	rjmp	.+192    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
        {
            /* if find object stop
             * Read left and right
             * and Orientation to open road
             *   */
            Car_Backward();
     352:	0e 94 1e 01 	call	0x23c	; 0x23c <Car_Backward>
     356:	2f ef       	ldi	r18, 0xFF	; 255
     358:	82 e5       	ldi	r24, 0x52	; 82
     35a:	97 e0       	ldi	r25, 0x07	; 7
     35c:	21 50       	subi	r18, 0x01	; 1
     35e:	80 40       	sbci	r24, 0x00	; 0
     360:	90 40       	sbci	r25, 0x00	; 0
     362:	e1 f7       	brne	.-8      	; 0x35c <Start_AutoMode_Car+0x22>
     364:	00 c0       	rjmp	.+0      	; 0x366 <Start_AutoMode_Car+0x2c>
     366:	00 00       	nop
            _delay_ms(300);
            /* Stop motors*/
            Car_Stop();
     368:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Car_Stop>
     36c:	2f ef       	ldi	r18, 0xFF	; 255
     36e:	82 e5       	ldi	r24, 0x52	; 82
     370:	97 e0       	ldi	r25, 0x07	; 7
     372:	21 50       	subi	r18, 0x01	; 1
     374:	80 40       	sbci	r24, 0x00	; 0
     376:	90 40       	sbci	r25, 0x00	; 0
     378:	e1 f7       	brne	.-8      	; 0x372 <Start_AutoMode_Car+0x38>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <Start_AutoMode_Car+0x42>
     37c:	00 00       	nop
            _delay_ms(300);
            /* Servo turn to Left  then read distance*/
            SERVO_voidTimer1ServoSetAngleOCR1B(135);
     37e:	67 e8       	ldi	r22, 0x87	; 135
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 59 00 	call	0xb2	; 0xb2 <SERVO_voidTimer1ServoSetAngleOCR1B>
     38a:	2f ef       	ldi	r18, 0xFF	; 255
     38c:	82 e5       	ldi	r24, 0x52	; 82
     38e:	97 e0       	ldi	r25, 0x07	; 7
     390:	21 50       	subi	r18, 0x01	; 1
     392:	80 40       	sbci	r24, 0x00	; 0
     394:	90 40       	sbci	r25, 0x00	; 0
     396:	e1 f7       	brne	.-8      	; 0x390 <Start_AutoMode_Car+0x56>
     398:	00 c0       	rjmp	.+0      	; 0x39a <Start_AutoMode_Car+0x60>
     39a:	00 00       	nop
			 _delay_ms(300);
            Local_u16LeftObject = ULTRASONIC_u16GetDistance();
     39c:	0e 94 be 00 	call	0x17c	; 0x17c <ULTRASONIC_u16GetDistance>
     3a0:	ec 01       	movw	r28, r24
     3a2:	2f ef       	ldi	r18, 0xFF	; 255
     3a4:	82 e5       	ldi	r24, 0x52	; 82
     3a6:	97 e0       	ldi	r25, 0x07	; 7
     3a8:	21 50       	subi	r18, 0x01	; 1
     3aa:	80 40       	sbci	r24, 0x00	; 0
     3ac:	90 40       	sbci	r25, 0x00	; 0
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <Start_AutoMode_Car+0x6e>
     3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <Start_AutoMode_Car+0x78>
     3b2:	00 00       	nop
			_delay_ms(300);
     
            /* Servo turn to Right then read distance*/
	
            SERVO_voidTimer1ServoSetAngleOCR1B(360);
     3b4:	68 e6       	ldi	r22, 0x68	; 104
     3b6:	71 e0       	ldi	r23, 0x01	; 1
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 59 00 	call	0xb2	; 0xb2 <SERVO_voidTimer1ServoSetAngleOCR1B>
     3c0:	2f ef       	ldi	r18, 0xFF	; 255
     3c2:	82 e5       	ldi	r24, 0x52	; 82
     3c4:	97 e0       	ldi	r25, 0x07	; 7
     3c6:	21 50       	subi	r18, 0x01	; 1
     3c8:	80 40       	sbci	r24, 0x00	; 0
     3ca:	90 40       	sbci	r25, 0x00	; 0
     3cc:	e1 f7       	brne	.-8      	; 0x3c6 <Start_AutoMode_Car+0x8c>
     3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <Start_AutoMode_Car+0x96>
     3d0:	00 00       	nop
          _delay_ms(300);
           Local_u16RightObject = ULTRASONIC_u16GetDistance();
     3d2:	0e 94 be 00 	call	0x17c	; 0x17c <ULTRASONIC_u16GetDistance>
     3d6:	8c 01       	movw	r16, r24
     3d8:	2f ef       	ldi	r18, 0xFF	; 255
     3da:	82 e5       	ldi	r24, 0x52	; 82
     3dc:	97 e0       	ldi	r25, 0x07	; 7
     3de:	21 50       	subi	r18, 0x01	; 1
     3e0:	80 40       	sbci	r24, 0x00	; 0
     3e2:	90 40       	sbci	r25, 0x00	; 0
     3e4:	e1 f7       	brne	.-8      	; 0x3de <Start_AutoMode_Car+0xa4>
     3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <Start_AutoMode_Car+0xae>
     3e8:	00 00       	nop
           _delay_ms(300);
            /* Set Servo direction */

            SERVO_voidTimer1ServoSetAngleOCR1B(270);
     3ea:	6e e0       	ldi	r22, 0x0E	; 14
     3ec:	71 e0       	ldi	r23, 0x01	; 1
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 59 00 	call	0xb2	; 0xb2 <SERVO_voidTimer1ServoSetAngleOCR1B>
     3f6:	2f ef       	ldi	r18, 0xFF	; 255
     3f8:	82 e5       	ldi	r24, 0x52	; 82
     3fa:	97 e0       	ldi	r25, 0x07	; 7
     3fc:	21 50       	subi	r18, 0x01	; 1
     3fe:	80 40       	sbci	r24, 0x00	; 0
     400:	90 40       	sbci	r25, 0x00	; 0
     402:	e1 f7       	brne	.-8      	; 0x3fc <Start_AutoMode_Car+0xc2>
     404:	00 c0       	rjmp	.+0      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     406:	00 00       	nop
            _delay_ms(300);
			
            /* Comparison between to direction and set Orientation*/
            Car_Compare(Local_u16LeftObject, Local_u16RightObject);
     408:	b8 01       	movw	r22, r16
     40a:	ce 01       	movw	r24, r28
     40c:	0e 94 83 01 	call	0x306	; 0x306 <Car_Compare>
     410:	97 cf       	rjmp	.-210    	; 0x340 <Start_AutoMode_Car+0x6>
        }
        else
        {
            /* if no object go forward */
		
           Car_Forward();
     412:	0e 94 09 01 	call	0x212	; 0x212 <Car_Forward>
     416:	2f ef       	ldi	r18, 0xFF	; 255
     418:	89 e6       	ldi	r24, 0x69	; 105
     41a:	98 e1       	ldi	r25, 0x18	; 24
     41c:	21 50       	subi	r18, 0x01	; 1
     41e:	80 40       	sbci	r24, 0x00	; 0
     420:	90 40       	sbci	r25, 0x00	; 0
     422:	e1 f7       	brne	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     424:	00 c0       	rjmp	.+0      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     426:	00 00       	nop
     428:	8b cf       	rjmp	.-234    	; 0x340 <Start_AutoMode_Car+0x6>

0000042a <Robot_voidInit>:
/*********************************************************** Initialization ****************************************************************/
void Robot_voidInit(void)
{

	/************************** Init Timer ************************************/
	TIMER_voidTimer0Init();
     42a:	0e 94 43 03 	call	0x686	; 0x686 <TIMER_voidTimer0Init>
	DIO_setPinDirection(DIO_PORTB , DIO_PIN3 , DIO_PIN_OUTPUT);
     42e:	41 e0       	ldi	r20, 0x01	; 1
     430:	63 e0       	ldi	r22, 0x03	; 3
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_setPinDirection>
	TIMER_voidTimer2Init();
     438:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <TIMER_voidTimer2Init>
	DIO_setPinDirection(DIO_PORTD , DIO_PIN7 , DIO_PIN_OUTPUT);
     43c:	41 e0       	ldi	r20, 0x01	; 1
     43e:	67 e0       	ldi	r22, 0x07	; 7
     440:	83 e0       	ldi	r24, 0x03	; 3
     442:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_setPinDirection>
	/**************************** Init Servo **********************************/
	SERVO_voidTimer1InitOCR1B();
     446:	0e 94 4e 00 	call	0x9c	; 0x9c <SERVO_voidTimer1InitOCR1B>
	SERVO_voidTimer1ServoSetAngleOCR1B(270);
     44a:	6e e0       	ldi	r22, 0x0E	; 14
     44c:	71 e0       	ldi	r23, 0x01	; 1
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 59 00 	call	0xb2	; 0xb2 <SERVO_voidTimer1ServoSetAngleOCR1B>
//
	/**************************** Init ULTRASONIC *****************************/
	ULTRASONIC_voidInit();
     456:	0e 94 97 00 	call	0x12e	; 0x12e <ULTRASONIC_voidInit>
	
/***************************** INIT SPEAD ****************************/
	Set_Car_Speed(Robot_u8_INIT_SPEED);
     45a:	8c e3       	ldi	r24, 0x3C	; 60
     45c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <Set_Car_Speed>
/************************************** MOTOR DRIVER L298******************************************************/
	DIO_setPinDirection(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN1,DIO_PIN_OUTPUT);
     460:	41 e0       	ldi	r20, 0x01	; 1
     462:	60 e0       	ldi	r22, 0x00	; 0
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_setPinDirection>
	DIO_setPinDirection(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN2,DIO_PIN_OUTPUT);
     46a:	41 e0       	ldi	r20, 0x01	; 1
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_setPinDirection>
	DIO_setPinDirection(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN3,DIO_PIN_OUTPUT);
     474:	41 e0       	ldi	r20, 0x01	; 1
     476:	62 e0       	ldi	r22, 0x02	; 2
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN0,DIO_PIN_OUTPUT);
     47e:	41 e0       	ldi	r20, 0x01	; 1
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_setPinDirection>
	
	DIO_setPinDirection( DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT);
     488:	41 e0       	ldi	r20, 0x01	; 1
     48a:	62 e0       	ldi	r22, 0x02	; 2
     48c:	82 e0       	ldi	r24, 0x02	; 2
     48e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_setPinDirection>
	DIO_setPinDirection( DIO_PORTC,DIO_PIN7,DIO_PIN_OUTPUT);
     492:	41 e0       	ldi	r20, 0x01	; 1
     494:	67 e0       	ldi	r22, 0x07	; 7
     496:	82 e0       	ldi	r24, 0x02	; 2
     498:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_setPinDirection>
     49c:	08 95       	ret

0000049e <main>:
/*                         Main                                          */
/************************************************************************/
int main(void){
	
	/* Initialization Robot */
	Robot_voidInit();	
     49e:	0e 94 15 02 	call	0x42a	; 0x42a <Robot_voidInit>
    while(1)
    {         
		Start_AutoMode_Car();
     4a2:	0e 94 9d 01 	call	0x33a	; 0x33a <Start_AutoMode_Car>

000004a6 <DIO_setPinDirection>:
#include "../../MCAL/DIO/DIO_interface.h"
#include "../../MCAL/DIO/DIO_private.h"

void DIO_setPinDirection(u8 PortId, u8 PinId, u8 PinDirection)
{
	if((PortId<=3)&&(PinId<=7)&&((PinDirection == DIO_PIN_INPUT)||(PinDirection == DIO_PIN_OUTPUT)))
     4a6:	84 30       	cpi	r24, 0x04	; 4
     4a8:	08 f0       	brcs	.+2      	; 0x4ac <DIO_setPinDirection+0x6>
     4aa:	72 c0       	rjmp	.+228    	; 0x590 <DIO_setPinDirection+0xea>
     4ac:	68 30       	cpi	r22, 0x08	; 8
     4ae:	08 f0       	brcs	.+2      	; 0x4b2 <DIO_setPinDirection+0xc>
     4b0:	6f c0       	rjmp	.+222    	; 0x590 <DIO_setPinDirection+0xea>
     4b2:	42 30       	cpi	r20, 0x02	; 2
     4b4:	08 f0       	brcs	.+2      	; 0x4b8 <DIO_setPinDirection+0x12>
     4b6:	6c c0       	rjmp	.+216    	; 0x590 <DIO_setPinDirection+0xea>
	{
		switch(PortId)
     4b8:	81 30       	cpi	r24, 0x01	; 1
     4ba:	01 f1       	breq	.+64     	; 0x4fc <DIO_setPinDirection+0x56>
     4bc:	30 f0       	brcs	.+12     	; 0x4ca <DIO_setPinDirection+0x24>
     4be:	82 30       	cpi	r24, 0x02	; 2
     4c0:	b1 f1       	breq	.+108    	; 0x52e <DIO_setPinDirection+0x88>
     4c2:	83 30       	cpi	r24, 0x03	; 3
     4c4:	09 f4       	brne	.+2      	; 0x4c8 <DIO_setPinDirection+0x22>
     4c6:	4c c0       	rjmp	.+152    	; 0x560 <DIO_setPinDirection+0xba>
     4c8:	08 95       	ret
		{
			case DIO_PORTA:
			if(DIO_PIN_OUTPUT == PinDirection) 
     4ca:	41 30       	cpi	r20, 0x01	; 1
     4cc:	59 f4       	brne	.+22     	; 0x4e4 <DIO_setPinDirection+0x3e>
			{
				SET_BIT(DDRA,PinId);
     4ce:	2a b3       	in	r18, 0x1a	; 26
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_setPinDirection+0x34>
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	6a 95       	dec	r22
     4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_setPinDirection+0x30>
     4de:	82 2b       	or	r24, r18
     4e0:	8a bb       	out	0x1a, r24	; 26
     4e2:	08 95       	ret
			}
			else 
			{
				CLR_BIT(DDRA,PinId);
     4e4:	2a b3       	in	r18, 0x1a	; 26
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_setPinDirection+0x4a>
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	6a 95       	dec	r22
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_setPinDirection+0x46>
     4f4:	80 95       	com	r24
     4f6:	82 23       	and	r24, r18
     4f8:	8a bb       	out	0x1a, r24	; 26
     4fa:	08 95       	ret
			}
			break;
			
			case DIO_PORTB:
			if(DIO_PIN_OUTPUT == PinDirection) 
     4fc:	41 30       	cpi	r20, 0x01	; 1
     4fe:	59 f4       	brne	.+22     	; 0x516 <DIO_setPinDirection+0x70>
			{
				SET_BIT(DDRB,PinId);
     500:	27 b3       	in	r18, 0x17	; 23
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_setPinDirection+0x66>
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	6a 95       	dec	r22
     50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_setPinDirection+0x62>
     510:	82 2b       	or	r24, r18
     512:	87 bb       	out	0x17, r24	; 23
     514:	08 95       	ret
			}
			else 
			{
				CLR_BIT(DDRB,PinId);
     516:	27 b3       	in	r18, 0x17	; 23
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_setPinDirection+0x7c>
     51e:	88 0f       	add	r24, r24
     520:	99 1f       	adc	r25, r25
     522:	6a 95       	dec	r22
     524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_setPinDirection+0x78>
     526:	80 95       	com	r24
     528:	82 23       	and	r24, r18
     52a:	87 bb       	out	0x17, r24	; 23
     52c:	08 95       	ret
			}
			break;
			
			case DIO_PORTC:
			if(DIO_PIN_OUTPUT == PinDirection) 
     52e:	41 30       	cpi	r20, 0x01	; 1
     530:	59 f4       	brne	.+22     	; 0x548 <DIO_setPinDirection+0xa2>
			{
				SET_BIT(DDRC,PinId);
     532:	24 b3       	in	r18, 0x14	; 20
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_setPinDirection+0x98>
     53a:	88 0f       	add	r24, r24
     53c:	99 1f       	adc	r25, r25
     53e:	6a 95       	dec	r22
     540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_setPinDirection+0x94>
     542:	82 2b       	or	r24, r18
     544:	84 bb       	out	0x14, r24	; 20
     546:	08 95       	ret
			}
			else 
			{
				CLR_BIT(DDRC,PinId);
     548:	24 b3       	in	r18, 0x14	; 20
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_setPinDirection+0xae>
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	6a 95       	dec	r22
     556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_setPinDirection+0xaa>
     558:	80 95       	com	r24
     55a:	82 23       	and	r24, r18
     55c:	84 bb       	out	0x14, r24	; 20
     55e:	08 95       	ret
			}
			break;
			
			case DIO_PORTD:
			if(DIO_PIN_OUTPUT == PinDirection) 
     560:	41 30       	cpi	r20, 0x01	; 1
     562:	59 f4       	brne	.+22     	; 0x57a <DIO_setPinDirection+0xd4>
			{
				SET_BIT(DDRD,PinId);
     564:	21 b3       	in	r18, 0x11	; 17
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_setPinDirection+0xca>
     56c:	88 0f       	add	r24, r24
     56e:	99 1f       	adc	r25, r25
     570:	6a 95       	dec	r22
     572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_setPinDirection+0xc6>
     574:	82 2b       	or	r24, r18
     576:	81 bb       	out	0x11, r24	; 17
     578:	08 95       	ret
			}
			else 
			{
				CLR_BIT(DDRD,PinId);
     57a:	21 b3       	in	r18, 0x11	; 17
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_setPinDirection+0xe0>
     582:	88 0f       	add	r24, r24
     584:	99 1f       	adc	r25, r25
     586:	6a 95       	dec	r22
     588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_setPinDirection+0xdc>
     58a:	80 95       	com	r24
     58c:	82 23       	and	r24, r18
     58e:	81 bb       	out	0x11, r24	; 17
     590:	08 95       	ret

00000592 <DIO_setPinValue>:
}


void DIO_setPinValue(u8 PortId, u8 PinId, u8 PinValue)
{
	if((PortId<=3)&&(PinId<=7)&&((PinValue == DIO_PIN_HIGH)||(PinValue == DIO_PIN_LOW)))
     592:	84 30       	cpi	r24, 0x04	; 4
     594:	08 f0       	brcs	.+2      	; 0x598 <DIO_setPinValue+0x6>
     596:	72 c0       	rjmp	.+228    	; 0x67c <DIO_setPinValue+0xea>
     598:	68 30       	cpi	r22, 0x08	; 8
     59a:	08 f0       	brcs	.+2      	; 0x59e <DIO_setPinValue+0xc>
     59c:	6f c0       	rjmp	.+222    	; 0x67c <DIO_setPinValue+0xea>
     59e:	42 30       	cpi	r20, 0x02	; 2
     5a0:	08 f0       	brcs	.+2      	; 0x5a4 <DIO_setPinValue+0x12>
     5a2:	6c c0       	rjmp	.+216    	; 0x67c <DIO_setPinValue+0xea>
	{
		switch(PortId)
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	01 f1       	breq	.+64     	; 0x5e8 <DIO_setPinValue+0x56>
     5a8:	30 f0       	brcs	.+12     	; 0x5b6 <DIO_setPinValue+0x24>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	b1 f1       	breq	.+108    	; 0x61a <DIO_setPinValue+0x88>
     5ae:	83 30       	cpi	r24, 0x03	; 3
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <DIO_setPinValue+0x22>
     5b2:	4c c0       	rjmp	.+152    	; 0x64c <DIO_setPinValue+0xba>
     5b4:	08 95       	ret
		{
			case DIO_PORTA:
			if(PinValue == DIO_PIN_HIGH)
     5b6:	41 30       	cpi	r20, 0x01	; 1
     5b8:	59 f4       	brne	.+22     	; 0x5d0 <DIO_setPinValue+0x3e>
			{
				SET_BIT(PORTA,PinId);
     5ba:	2b b3       	in	r18, 0x1b	; 27
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_setPinValue+0x34>
     5c2:	88 0f       	add	r24, r24
     5c4:	99 1f       	adc	r25, r25
     5c6:	6a 95       	dec	r22
     5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_setPinValue+0x30>
     5ca:	82 2b       	or	r24, r18
     5cc:	8b bb       	out	0x1b, r24	; 27
     5ce:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA,PinId);
     5d0:	2b b3       	in	r18, 0x1b	; 27
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_setPinValue+0x4a>
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	6a 95       	dec	r22
     5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_setPinValue+0x46>
     5e0:	80 95       	com	r24
     5e2:	82 23       	and	r24, r18
     5e4:	8b bb       	out	0x1b, r24	; 27
     5e6:	08 95       	ret
			}
			break;
			
			case DIO_PORTB:
			if(PinValue == DIO_PIN_HIGH)
     5e8:	41 30       	cpi	r20, 0x01	; 1
     5ea:	59 f4       	brne	.+22     	; 0x602 <DIO_setPinValue+0x70>
			{
				SET_BIT(PORTB,PinId);
     5ec:	28 b3       	in	r18, 0x18	; 24
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <DIO_setPinValue+0x66>
     5f4:	88 0f       	add	r24, r24
     5f6:	99 1f       	adc	r25, r25
     5f8:	6a 95       	dec	r22
     5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <DIO_setPinValue+0x62>
     5fc:	82 2b       	or	r24, r18
     5fe:	88 bb       	out	0x18, r24	; 24
     600:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB,PinId);
     602:	28 b3       	in	r18, 0x18	; 24
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_setPinValue+0x7c>
     60a:	88 0f       	add	r24, r24
     60c:	99 1f       	adc	r25, r25
     60e:	6a 95       	dec	r22
     610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_setPinValue+0x78>
     612:	80 95       	com	r24
     614:	82 23       	and	r24, r18
     616:	88 bb       	out	0x18, r24	; 24
     618:	08 95       	ret
			}
			break;
			
			case DIO_PORTC:
			if(PinValue == DIO_PIN_HIGH)
     61a:	41 30       	cpi	r20, 0x01	; 1
     61c:	59 f4       	brne	.+22     	; 0x634 <DIO_setPinValue+0xa2>
			{
				SET_BIT(PORTC,PinId);
     61e:	25 b3       	in	r18, 0x15	; 21
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_setPinValue+0x98>
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	6a 95       	dec	r22
     62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_setPinValue+0x94>
     62e:	82 2b       	or	r24, r18
     630:	85 bb       	out	0x15, r24	; 21
     632:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC,PinId);
     634:	25 b3       	in	r18, 0x15	; 21
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_setPinValue+0xae>
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	6a 95       	dec	r22
     642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_setPinValue+0xaa>
     644:	80 95       	com	r24
     646:	82 23       	and	r24, r18
     648:	85 bb       	out	0x15, r24	; 21
     64a:	08 95       	ret
			}
			break;
			
			case DIO_PORTD:
			if(PinValue == DIO_PIN_HIGH)
     64c:	41 30       	cpi	r20, 0x01	; 1
     64e:	59 f4       	brne	.+22     	; 0x666 <DIO_setPinValue+0xd4>
			{
				SET_BIT(PORTD,PinId);
     650:	22 b3       	in	r18, 0x12	; 18
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_setPinValue+0xca>
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	6a 95       	dec	r22
     65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_setPinValue+0xc6>
     660:	82 2b       	or	r24, r18
     662:	82 bb       	out	0x12, r24	; 18
     664:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTD,PinId);
     666:	22 b3       	in	r18, 0x12	; 18
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	02 c0       	rjmp	.+4      	; 0x672 <DIO_setPinValue+0xe0>
     66e:	88 0f       	add	r24, r24
     670:	99 1f       	adc	r25, r25
     672:	6a 95       	dec	r22
     674:	e2 f7       	brpl	.-8      	; 0x66e <DIO_setPinValue+0xdc>
     676:	80 95       	com	r24
     678:	82 23       	and	r24, r18
     67a:	82 bb       	out	0x12, r24	; 18
     67c:	08 95       	ret

0000067e <GI_enable>:
#include "../../MCAL/GI/GI_private.h"


void GI_enable(void)
{
	SET_BIT(SREG,I);
     67e:	8f b7       	in	r24, 0x3f	; 63
     680:	80 68       	ori	r24, 0x80	; 128
     682:	8f bf       	out	0x3f, r24	; 63
     684:	08 95       	ret

00000686 <TIMER_voidTimer0Init>:
	TIMER_u16_OCR1B_REG = Copy_u16OCR1B ;
}
void TIMER_voidTimer1SetICR1(u16 Copy_u16ICR1)
{
	  TIMER_u8_ICR1H_REG = (u8)(Copy_u16ICR1>>8);
	  TIMER_u8_ICR1L_REG = (u8)(Copy_u16ICR1);
     686:	83 b7       	in	r24, 0x33	; 51
     688:	80 64       	ori	r24, 0x40	; 64
     68a:	83 bf       	out	0x33, r24	; 51
     68c:	83 b7       	in	r24, 0x33	; 51
     68e:	87 7f       	andi	r24, 0xF7	; 247
     690:	83 bf       	out	0x33, r24	; 51
     692:	83 b7       	in	r24, 0x33	; 51
     694:	8f 7e       	andi	r24, 0xEF	; 239
     696:	83 bf       	out	0x33, r24	; 51
     698:	83 b7       	in	r24, 0x33	; 51
     69a:	80 62       	ori	r24, 0x20	; 32
     69c:	83 bf       	out	0x33, r24	; 51
     69e:	83 b7       	in	r24, 0x33	; 51
     6a0:	81 60       	ori	r24, 0x01	; 1
     6a2:	83 bf       	out	0x33, r24	; 51
     6a4:	83 b7       	in	r24, 0x33	; 51
     6a6:	8d 7f       	andi	r24, 0xFD	; 253
     6a8:	83 bf       	out	0x33, r24	; 51
     6aa:	83 b7       	in	r24, 0x33	; 51
     6ac:	84 60       	ori	r24, 0x04	; 4
     6ae:	83 bf       	out	0x33, r24	; 51
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	a0 e8       	ldi	r26, 0x80	; 128
     6b6:	b4 e4       	ldi	r27, 0x44	; 68
     6b8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <TIMER0_u16Prescaller>
     6bc:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <TIMER0_u16Prescaller+0x1>
     6c0:	a0 93 78 00 	sts	0x0078, r26	; 0x800078 <TIMER0_u16Prescaller+0x2>
     6c4:	b0 93 79 00 	sts	0x0079, r27	; 0x800079 <TIMER0_u16Prescaller+0x3>
     6c8:	08 95       	ret

000006ca <TIMER_voidTimer0GeneratePWM>:
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	4f ef       	ldi	r20, 0xFF	; 255
     6d0:	53 e4       	ldi	r21, 0x43	; 67
     6d2:	0e 94 88 07 	call	0xf10	; 0xf10 <__mulsf3>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	48 e4       	ldi	r20, 0x48	; 72
     6dc:	53 e4       	ldi	r21, 0x43	; 67
     6de:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__divsf3>
     6e2:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fixunssfsi>
     6e6:	6c bf       	out	0x3c, r22	; 60
     6e8:	08 95       	ret

000006ea <__vector_11>:
     6ea:	1f 92       	push	r1
     6ec:	0f 92       	push	r0
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	0f 92       	push	r0
     6f2:	11 24       	eor	r1, r1
     6f4:	2f 93       	push	r18
     6f6:	3f 93       	push	r19
     6f8:	4f 93       	push	r20
     6fa:	5f 93       	push	r21
     6fc:	6f 93       	push	r22
     6fe:	7f 93       	push	r23
     700:	8f 93       	push	r24
     702:	9f 93       	push	r25
     704:	af 93       	push	r26
     706:	bf 93       	push	r27
     708:	ef 93       	push	r30
     70a:	ff 93       	push	r31
     70c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Local_u16Counter.1651>
     710:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Local_u16Counter.1651+0x1>
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Local_u16Counter.1651+0x1>
     71a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Local_u16Counter.1651>
     71e:	a0 e0       	ldi	r26, 0x00	; 0
     720:	b0 e0       	ldi	r27, 0x00	; 0
     722:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <TIMER0_f32OVCounterTmp>
     726:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <TIMER0_f32OVCounterTmp+0x1>
     72a:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <TIMER0_f32OVCounterTmp+0x2>
     72e:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <TIMER0_f32OVCounterTmp+0x3>
     732:	84 17       	cp	r24, r20
     734:	95 07       	cpc	r25, r21
     736:	a6 07       	cpc	r26, r22
     738:	b7 07       	cpc	r27, r23
     73a:	51 f4       	brne	.+20     	; 0x750 <__vector_11+0x66>
     73c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <TIMER0_f32PreloodValue>
     740:	82 bf       	out	0x32, r24	; 50
     742:	e0 e0       	ldi	r30, 0x00	; 0
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	09 95       	icall
     748:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <Local_u16Counter.1651+0x1>
     74c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <Local_u16Counter.1651>
     750:	ff 91       	pop	r31
     752:	ef 91       	pop	r30
     754:	bf 91       	pop	r27
     756:	af 91       	pop	r26
     758:	9f 91       	pop	r25
     75a:	8f 91       	pop	r24
     75c:	7f 91       	pop	r23
     75e:	6f 91       	pop	r22
     760:	5f 91       	pop	r21
     762:	4f 91       	pop	r20
     764:	3f 91       	pop	r19
     766:	2f 91       	pop	r18
     768:	0f 90       	pop	r0
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	0f 90       	pop	r0
     76e:	1f 90       	pop	r1
     770:	18 95       	reti

00000772 <__vector_10>:
     772:	1f 92       	push	r1
     774:	0f 92       	push	r0
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	0f 92       	push	r0
     77a:	11 24       	eor	r1, r1
     77c:	2f 93       	push	r18
     77e:	3f 93       	push	r19
     780:	4f 93       	push	r20
     782:	5f 93       	push	r21
     784:	6f 93       	push	r22
     786:	7f 93       	push	r23
     788:	8f 93       	push	r24
     78a:	9f 93       	push	r25
     78c:	af 93       	push	r26
     78e:	bf 93       	push	r27
     790:	ef 93       	push	r30
     792:	ff 93       	push	r31
     794:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Local_u8Counter.1655>
     798:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Local_u8Counter.1655+0x1>
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <Local_u8Counter.1655+0x1>
     7a2:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Local_u8Counter.1655>
     7a6:	a0 e0       	ldi	r26, 0x00	; 0
     7a8:	b0 e0       	ldi	r27, 0x00	; 0
     7aa:	40 91 82 00 	lds	r20, 0x0082	; 0x800082 <TIMER0_f32CounterCTC>
     7ae:	50 91 83 00 	lds	r21, 0x0083	; 0x800083 <TIMER0_f32CounterCTC+0x1>
     7b2:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <TIMER0_f32CounterCTC+0x2>
     7b6:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <TIMER0_f32CounterCTC+0x3>
     7ba:	84 17       	cp	r24, r20
     7bc:	95 07       	cpc	r25, r21
     7be:	a6 07       	cpc	r26, r22
     7c0:	b7 07       	cpc	r27, r23
     7c2:	39 f4       	brne	.+14     	; 0x7d2 <__vector_10+0x60>
     7c4:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <Local_u8Counter.1655+0x1>
     7c8:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Local_u8Counter.1655>
     7cc:	e0 e0       	ldi	r30, 0x00	; 0
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	09 95       	icall
     7d2:	ff 91       	pop	r31
     7d4:	ef 91       	pop	r30
     7d6:	bf 91       	pop	r27
     7d8:	af 91       	pop	r26
     7da:	9f 91       	pop	r25
     7dc:	8f 91       	pop	r24
     7de:	7f 91       	pop	r23
     7e0:	6f 91       	pop	r22
     7e2:	5f 91       	pop	r21
     7e4:	4f 91       	pop	r20
     7e6:	3f 91       	pop	r19
     7e8:	2f 91       	pop	r18
     7ea:	0f 90       	pop	r0
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	0f 90       	pop	r0
     7f0:	1f 90       	pop	r1
     7f2:	18 95       	reti

000007f4 <TIMER_voidTimer2Init>:
     7f4:	85 b5       	in	r24, 0x25	; 37
     7f6:	80 64       	ori	r24, 0x40	; 64
     7f8:	85 bd       	out	0x25, r24	; 37
     7fa:	85 b5       	in	r24, 0x25	; 37
     7fc:	87 7f       	andi	r24, 0xF7	; 247
     7fe:	85 bd       	out	0x25, r24	; 37
     800:	85 b5       	in	r24, 0x25	; 37
     802:	8f 7e       	andi	r24, 0xEF	; 239
     804:	85 bd       	out	0x25, r24	; 37
     806:	85 b5       	in	r24, 0x25	; 37
     808:	80 62       	ori	r24, 0x20	; 32
     80a:	85 bd       	out	0x25, r24	; 37
     80c:	85 b5       	in	r24, 0x25	; 37
     80e:	81 60       	ori	r24, 0x01	; 1
     810:	85 bd       	out	0x25, r24	; 37
     812:	85 b5       	in	r24, 0x25	; 37
     814:	8d 7f       	andi	r24, 0xFD	; 253
     816:	85 bd       	out	0x25, r24	; 37
     818:	85 b5       	in	r24, 0x25	; 37
     81a:	84 60       	ori	r24, 0x04	; 4
     81c:	85 bd       	out	0x25, r24	; 37
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	a0 e8       	ldi	r26, 0x80	; 128
     824:	b4 e4       	ldi	r27, 0x44	; 68
     826:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <TIMER2_u16Prescaller>
     82a:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <TIMER2_u16Prescaller+0x1>
     82e:	a0 93 80 00 	sts	0x0080, r26	; 0x800080 <TIMER2_u16Prescaller+0x2>
     832:	b0 93 81 00 	sts	0x0081, r27	; 0x800081 <TIMER2_u16Prescaller+0x3>
     836:	08 95       	ret

00000838 <TIMER_voidTimer2GeneratePWM>:
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	4f ef       	ldi	r20, 0xFF	; 255
     83e:	53 e4       	ldi	r21, 0x43	; 67
     840:	0e 94 88 07 	call	0xf10	; 0xf10 <__mulsf3>
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	48 e4       	ldi	r20, 0x48	; 72
     84a:	53 e4       	ldi	r21, 0x43	; 67
     84c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__divsf3>
     850:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fixunssfsi>
     854:	63 bd       	out	0x23, r22	; 35
     856:	08 95       	ret

00000858 <__vector_5>:
     858:	1f 92       	push	r1
     85a:	0f 92       	push	r0
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	0f 92       	push	r0
     860:	11 24       	eor	r1, r1
     862:	2f 93       	push	r18
     864:	3f 93       	push	r19
     866:	4f 93       	push	r20
     868:	5f 93       	push	r21
     86a:	6f 93       	push	r22
     86c:	7f 93       	push	r23
     86e:	8f 93       	push	r24
     870:	9f 93       	push	r25
     872:	af 93       	push	r26
     874:	bf 93       	push	r27
     876:	ef 93       	push	r30
     878:	ff 93       	push	r31
     87a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Local_u16Counter.1677>
     87e:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Local_u16Counter.1677+0x1>
     882:	01 96       	adiw	r24, 0x01	; 1
     884:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <Local_u16Counter.1677+0x1>
     888:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Local_u16Counter.1677>
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <TIMER2_f32OVCounter>
     894:	50 91 7b 00 	lds	r21, 0x007B	; 0x80007b <TIMER2_f32OVCounter+0x1>
     898:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <TIMER2_f32OVCounter+0x2>
     89c:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <TIMER2_f32OVCounter+0x3>
     8a0:	84 17       	cp	r24, r20
     8a2:	95 07       	cpc	r25, r21
     8a4:	a6 07       	cpc	r26, r22
     8a6:	b7 07       	cpc	r27, r23
     8a8:	51 f4       	brne	.+20     	; 0x8be <__stack+0x5f>
     8aa:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <TIMER2_f32PreloodValue>
     8ae:	84 bd       	out	0x24, r24	; 36
     8b0:	e0 e0       	ldi	r30, 0x00	; 0
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	09 95       	icall
     8b6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Local_u16Counter.1677+0x1>
     8ba:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Local_u16Counter.1677>
     8be:	ff 91       	pop	r31
     8c0:	ef 91       	pop	r30
     8c2:	bf 91       	pop	r27
     8c4:	af 91       	pop	r26
     8c6:	9f 91       	pop	r25
     8c8:	8f 91       	pop	r24
     8ca:	7f 91       	pop	r23
     8cc:	6f 91       	pop	r22
     8ce:	5f 91       	pop	r21
     8d0:	4f 91       	pop	r20
     8d2:	3f 91       	pop	r19
     8d4:	2f 91       	pop	r18
     8d6:	0f 90       	pop	r0
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	0f 90       	pop	r0
     8dc:	1f 90       	pop	r1
     8de:	18 95       	reti

000008e0 <__vector_4>:
     8e0:	1f 92       	push	r1
     8e2:	0f 92       	push	r0
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	0f 92       	push	r0
     8e8:	11 24       	eor	r1, r1
     8ea:	2f 93       	push	r18
     8ec:	3f 93       	push	r19
     8ee:	4f 93       	push	r20
     8f0:	5f 93       	push	r21
     8f2:	6f 93       	push	r22
     8f4:	7f 93       	push	r23
     8f6:	8f 93       	push	r24
     8f8:	9f 93       	push	r25
     8fa:	af 93       	push	r26
     8fc:	bf 93       	push	r27
     8fe:	ef 93       	push	r30
     900:	ff 93       	push	r31
     902:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Local_u8Counter.1681>
     906:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <Local_u8Counter.1681+0x1>
     90a:	01 96       	adiw	r24, 0x01	; 1
     90c:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <Local_u8Counter.1681+0x1>
     910:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <Local_u8Counter.1681>
     914:	a0 e0       	ldi	r26, 0x00	; 0
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <TIMER2_f32CounterCTC>
     91c:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <TIMER2_f32CounterCTC+0x1>
     920:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <TIMER2_f32CounterCTC+0x2>
     924:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <TIMER2_f32CounterCTC+0x3>
     928:	84 17       	cp	r24, r20
     92a:	95 07       	cpc	r25, r21
     92c:	a6 07       	cpc	r26, r22
     92e:	b7 07       	cpc	r27, r23
     930:	39 f4       	brne	.+14     	; 0x940 <__vector_4+0x60>
     932:	e0 e0       	ldi	r30, 0x00	; 0
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	09 95       	icall
     938:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Local_u8Counter.1681+0x1>
     93c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Local_u8Counter.1681>
     940:	ff 91       	pop	r31
     942:	ef 91       	pop	r30
     944:	bf 91       	pop	r27
     946:	af 91       	pop	r26
     948:	9f 91       	pop	r25
     94a:	8f 91       	pop	r24
     94c:	7f 91       	pop	r23
     94e:	6f 91       	pop	r22
     950:	5f 91       	pop	r21
     952:	4f 91       	pop	r20
     954:	3f 91       	pop	r19
     956:	2f 91       	pop	r18
     958:	0f 90       	pop	r0
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	0f 90       	pop	r0
     95e:	1f 90       	pop	r1
     960:	18 95       	reti

00000962 <TIMER_voidTimer1Enable>:
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	80 31       	cpi	r24, 0x10	; 16
     966:	91 05       	cpc	r25, r1
     968:	08 f0       	brcs	.+2      	; 0x96c <TIMER_voidTimer1Enable+0xa>
     96a:	fd c0       	rjmp	.+506    	; 0xb66 <TIMER_voidTimer1Enable+0x204>
     96c:	fc 01       	movw	r30, r24
     96e:	e6 5d       	subi	r30, 0xD6	; 214
     970:	ff 4f       	sbci	r31, 0xFF	; 255
     972:	0c 94 17 08 	jmp	0x102e	; 0x102e <__tablejump2__>
     976:	8f b5       	in	r24, 0x2f	; 47
     978:	8e 7f       	andi	r24, 0xFE	; 254
     97a:	8f bd       	out	0x2f, r24	; 47
     97c:	8f b5       	in	r24, 0x2f	; 47
     97e:	8d 7f       	andi	r24, 0xFD	; 253
     980:	8f bd       	out	0x2f, r24	; 47
     982:	8e b5       	in	r24, 0x2e	; 46
     984:	87 7f       	andi	r24, 0xF7	; 247
     986:	8e bd       	out	0x2e, r24	; 46
     988:	8e b5       	in	r24, 0x2e	; 46
     98a:	8f 7e       	andi	r24, 0xEF	; 239
     98c:	8e bd       	out	0x2e, r24	; 46
     98e:	89 b7       	in	r24, 0x39	; 57
     990:	84 60       	ori	r24, 0x04	; 4
     992:	89 bf       	out	0x39, r24	; 57
     994:	89 b7       	in	r24, 0x39	; 57
     996:	87 7f       	andi	r24, 0xF7	; 247
     998:	89 bf       	out	0x39, r24	; 57
     99a:	89 b7       	in	r24, 0x39	; 57
     99c:	8f 7e       	andi	r24, 0xEF	; 239
     99e:	89 bf       	out	0x39, r24	; 57
     9a0:	89 b7       	in	r24, 0x39	; 57
     9a2:	8f 7d       	andi	r24, 0xDF	; 223
     9a4:	89 bf       	out	0x39, r24	; 57
     9a6:	df c0       	rjmp	.+446    	; 0xb66 <TIMER_voidTimer1Enable+0x204>
     9a8:	8f b5       	in	r24, 0x2f	; 47
     9aa:	81 60       	ori	r24, 0x01	; 1
     9ac:	8f bd       	out	0x2f, r24	; 47
     9ae:	8f b5       	in	r24, 0x2f	; 47
     9b0:	8d 7f       	andi	r24, 0xFD	; 253
     9b2:	8f bd       	out	0x2f, r24	; 47
     9b4:	8e b5       	in	r24, 0x2e	; 46
     9b6:	87 7f       	andi	r24, 0xF7	; 247
     9b8:	8e bd       	out	0x2e, r24	; 46
     9ba:	8e b5       	in	r24, 0x2e	; 46
     9bc:	8f 7e       	andi	r24, 0xEF	; 239
     9be:	8e bd       	out	0x2e, r24	; 46
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <TIMER1_u8MODEPWM>
     9c6:	cf c0       	rjmp	.+414    	; 0xb66 <TIMER_voidTimer1Enable+0x204>
     9c8:	8f b5       	in	r24, 0x2f	; 47
     9ca:	8e 7f       	andi	r24, 0xFE	; 254
     9cc:	8f bd       	out	0x2f, r24	; 47
     9ce:	8f b5       	in	r24, 0x2f	; 47
     9d0:	82 60       	ori	r24, 0x02	; 2
     9d2:	8f bd       	out	0x2f, r24	; 47
     9d4:	8e b5       	in	r24, 0x2e	; 46
     9d6:	87 7f       	andi	r24, 0xF7	; 247
     9d8:	8e bd       	out	0x2e, r24	; 46
     9da:	8e b5       	in	r24, 0x2e	; 46
     9dc:	8f 7e       	andi	r24, 0xEF	; 239
     9de:	8e bd       	out	0x2e, r24	; 46
     9e0:	82 e0       	ldi	r24, 0x02	; 2
     9e2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <TIMER1_u8MODEPWM>
     9e6:	bf c0       	rjmp	.+382    	; 0xb66 <TIMER_voidTimer1Enable+0x204>
     9e8:	8f b5       	in	r24, 0x2f	; 47
     9ea:	81 60       	ori	r24, 0x01	; 1
     9ec:	8f bd       	out	0x2f, r24	; 47
     9ee:	8f b5       	in	r24, 0x2f	; 47
     9f0:	82 60       	ori	r24, 0x02	; 2
     9f2:	8f bd       	out	0x2f, r24	; 47
     9f4:	8e b5       	in	r24, 0x2e	; 46
     9f6:	87 7f       	andi	r24, 0xF7	; 247
     9f8:	8e bd       	out	0x2e, r24	; 46
     9fa:	8e b5       	in	r24, 0x2e	; 46
     9fc:	8f 7e       	andi	r24, 0xEF	; 239
     9fe:	8e bd       	out	0x2e, r24	; 46
     a00:	83 e0       	ldi	r24, 0x03	; 3
     a02:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <TIMER1_u8MODEPWM>
     a06:	af c0       	rjmp	.+350    	; 0xb66 <TIMER_voidTimer1Enable+0x204>
     a08:	8f b5       	in	r24, 0x2f	; 47
     a0a:	8e 7f       	andi	r24, 0xFE	; 254
     a0c:	8f bd       	out	0x2f, r24	; 47
     a0e:	8f b5       	in	r24, 0x2f	; 47
     a10:	8d 7f       	andi	r24, 0xFD	; 253
     a12:	8f bd       	out	0x2f, r24	; 47
     a14:	8e b5       	in	r24, 0x2e	; 46
     a16:	88 60       	ori	r24, 0x08	; 8
     a18:	8e bd       	out	0x2e, r24	; 46
     a1a:	8e b5       	in	r24, 0x2e	; 46
     a1c:	8f 7e       	andi	r24, 0xEF	; 239
     a1e:	8e bd       	out	0x2e, r24	; 46
     a20:	89 b7       	in	r24, 0x39	; 57
     a22:	8b 7f       	andi	r24, 0xFB	; 251
     a24:	89 bf       	out	0x39, r24	; 57
     a26:	89 b7       	in	r24, 0x39	; 57
     a28:	87 7f       	andi	r24, 0xF7	; 247
     a2a:	89 bf       	out	0x39, r24	; 57
     a2c:	89 b7       	in	r24, 0x39	; 57
     a2e:	80 61       	ori	r24, 0x10	; 16
     a30:	89 bf       	out	0x39, r24	; 57
     a32:	89 b7       	in	r24, 0x39	; 57
     a34:	8f 7d       	andi	r24, 0xDF	; 223
     a36:	89 bf       	out	0x39, r24	; 57
     a38:	96 c0       	rjmp	.+300    	; 0xb66 <TIMER_voidTimer1Enable+0x204>
     a3a:	8f b5       	in	r24, 0x2f	; 47
     a3c:	81 60       	ori	r24, 0x01	; 1
     a3e:	8f bd       	out	0x2f, r24	; 47
     a40:	8f b5       	in	r24, 0x2f	; 47
     a42:	8d 7f       	andi	r24, 0xFD	; 253
     a44:	8f bd       	out	0x2f, r24	; 47
     a46:	8e b5       	in	r24, 0x2e	; 46
     a48:	88 60       	ori	r24, 0x08	; 8
     a4a:	8e bd       	out	0x2e, r24	; 46
     a4c:	8e b5       	in	r24, 0x2e	; 46
     a4e:	8f 7e       	andi	r24, 0xEF	; 239
     a50:	8e bd       	out	0x2e, r24	; 46
     a52:	85 e0       	ldi	r24, 0x05	; 5
     a54:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <TIMER1_u8MODEPWM>
     a58:	86 c0       	rjmp	.+268    	; 0xb66 <TIMER_voidTimer1Enable+0x204>
     a5a:	8f b5       	in	r24, 0x2f	; 47
     a5c:	8e 7f       	andi	r24, 0xFE	; 254
     a5e:	8f bd       	out	0x2f, r24	; 47
     a60:	8f b5       	in	r24, 0x2f	; 47
     a62:	82 60       	ori	r24, 0x02	; 2
     a64:	8f bd       	out	0x2f, r24	; 47
     a66:	8e b5       	in	r24, 0x2e	; 46
     a68:	88 60       	ori	r24, 0x08	; 8
     a6a:	8e bd       	out	0x2e, r24	; 46
     a6c:	8e b5       	in	r24, 0x2e	; 46
     a6e:	8f 7e       	andi	r24, 0xEF	; 239
     a70:	8e bd       	out	0x2e, r24	; 46
     a72:	86 e0       	ldi	r24, 0x06	; 6
     a74:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <TIMER1_u8MODEPWM>
     a78:	76 c0       	rjmp	.+236    	; 0xb66 <TIMER_voidTimer1Enable+0x204>
     a7a:	8f b5       	in	r24, 0x2f	; 47
     a7c:	81 60       	ori	r24, 0x01	; 1
     a7e:	8f bd       	out	0x2f, r24	; 47
     a80:	8f b5       	in	r24, 0x2f	; 47
     a82:	82 60       	ori	r24, 0x02	; 2
     a84:	8f bd       	out	0x2f, r24	; 47
     a86:	8e b5       	in	r24, 0x2e	; 46
     a88:	88 60       	ori	r24, 0x08	; 8
     a8a:	8e bd       	out	0x2e, r24	; 46
     a8c:	8e b5       	in	r24, 0x2e	; 46
     a8e:	8f 7e       	andi	r24, 0xEF	; 239
     a90:	8e bd       	out	0x2e, r24	; 46
     a92:	87 e0       	ldi	r24, 0x07	; 7
     a94:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <TIMER1_u8MODEPWM>
     a98:	66 c0       	rjmp	.+204    	; 0xb66 <TIMER_voidTimer1Enable+0x204>
     a9a:	8f b5       	in	r24, 0x2f	; 47
     a9c:	8e 7f       	andi	r24, 0xFE	; 254
     a9e:	8f bd       	out	0x2f, r24	; 47
     aa0:	8f b5       	in	r24, 0x2f	; 47
     aa2:	8d 7f       	andi	r24, 0xFD	; 253
     aa4:	8f bd       	out	0x2f, r24	; 47
     aa6:	8e b5       	in	r24, 0x2e	; 46
     aa8:	87 7f       	andi	r24, 0xF7	; 247
     aaa:	8e bd       	out	0x2e, r24	; 46
     aac:	8e b5       	in	r24, 0x2e	; 46
     aae:	80 61       	ori	r24, 0x10	; 16
     ab0:	8e bd       	out	0x2e, r24	; 46
     ab2:	59 c0       	rjmp	.+178    	; 0xb66 <TIMER_voidTimer1Enable+0x204>
     ab4:	8f b5       	in	r24, 0x2f	; 47
     ab6:	81 60       	ori	r24, 0x01	; 1
     ab8:	8f bd       	out	0x2f, r24	; 47
     aba:	8f b5       	in	r24, 0x2f	; 47
     abc:	8d 7f       	andi	r24, 0xFD	; 253
     abe:	8f bd       	out	0x2f, r24	; 47
     ac0:	8e b5       	in	r24, 0x2e	; 46
     ac2:	87 7f       	andi	r24, 0xF7	; 247
     ac4:	8e bd       	out	0x2e, r24	; 46
     ac6:	8e b5       	in	r24, 0x2e	; 46
     ac8:	80 61       	ori	r24, 0x10	; 16
     aca:	8e bd       	out	0x2e, r24	; 46
     acc:	4c c0       	rjmp	.+152    	; 0xb66 <TIMER_voidTimer1Enable+0x204>
     ace:	8f b5       	in	r24, 0x2f	; 47
     ad0:	8e 7f       	andi	r24, 0xFE	; 254
     ad2:	8f bd       	out	0x2f, r24	; 47
     ad4:	8f b5       	in	r24, 0x2f	; 47
     ad6:	82 60       	ori	r24, 0x02	; 2
     ad8:	8f bd       	out	0x2f, r24	; 47
     ada:	8e b5       	in	r24, 0x2e	; 46
     adc:	87 7f       	andi	r24, 0xF7	; 247
     ade:	8e bd       	out	0x2e, r24	; 46
     ae0:	8e b5       	in	r24, 0x2e	; 46
     ae2:	80 61       	ori	r24, 0x10	; 16
     ae4:	8e bd       	out	0x2e, r24	; 46
     ae6:	3f c0       	rjmp	.+126    	; 0xb66 <TIMER_voidTimer1Enable+0x204>
     ae8:	8f b5       	in	r24, 0x2f	; 47
     aea:	81 60       	ori	r24, 0x01	; 1
     aec:	8f bd       	out	0x2f, r24	; 47
     aee:	8f b5       	in	r24, 0x2f	; 47
     af0:	82 60       	ori	r24, 0x02	; 2
     af2:	8f bd       	out	0x2f, r24	; 47
     af4:	8e b5       	in	r24, 0x2e	; 46
     af6:	87 7f       	andi	r24, 0xF7	; 247
     af8:	8e bd       	out	0x2e, r24	; 46
     afa:	8e b5       	in	r24, 0x2e	; 46
     afc:	80 61       	ori	r24, 0x10	; 16
     afe:	8e bd       	out	0x2e, r24	; 46
     b00:	32 c0       	rjmp	.+100    	; 0xb66 <TIMER_voidTimer1Enable+0x204>
     b02:	8f b5       	in	r24, 0x2f	; 47
     b04:	8e 7f       	andi	r24, 0xFE	; 254
     b06:	8f bd       	out	0x2f, r24	; 47
     b08:	8f b5       	in	r24, 0x2f	; 47
     b0a:	82 60       	ori	r24, 0x02	; 2
     b0c:	8f bd       	out	0x2f, r24	; 47
     b0e:	8e b5       	in	r24, 0x2e	; 46
     b10:	88 60       	ori	r24, 0x08	; 8
     b12:	8e bd       	out	0x2e, r24	; 46
     b14:	8e b5       	in	r24, 0x2e	; 46
     b16:	8f 7e       	andi	r24, 0xEF	; 239
     b18:	8e bd       	out	0x2e, r24	; 46
     b1a:	89 b7       	in	r24, 0x39	; 57
     b1c:	8b 7f       	andi	r24, 0xFB	; 251
     b1e:	89 bf       	out	0x39, r24	; 57
     b20:	89 b7       	in	r24, 0x39	; 57
     b22:	88 60       	ori	r24, 0x08	; 8
     b24:	89 bf       	out	0x39, r24	; 57
     b26:	89 b7       	in	r24, 0x39	; 57
     b28:	80 61       	ori	r24, 0x10	; 16
     b2a:	89 bf       	out	0x39, r24	; 57
     b2c:	89 b7       	in	r24, 0x39	; 57
     b2e:	8f 7d       	andi	r24, 0xDF	; 223
     b30:	89 bf       	out	0x39, r24	; 57
     b32:	19 c0       	rjmp	.+50     	; 0xb66 <TIMER_voidTimer1Enable+0x204>
     b34:	8f b5       	in	r24, 0x2f	; 47
     b36:	8e 7f       	andi	r24, 0xFE	; 254
     b38:	8f bd       	out	0x2f, r24	; 47
     b3a:	8f b5       	in	r24, 0x2f	; 47
     b3c:	82 60       	ori	r24, 0x02	; 2
     b3e:	8f bd       	out	0x2f, r24	; 47
     b40:	8e b5       	in	r24, 0x2e	; 46
     b42:	88 60       	ori	r24, 0x08	; 8
     b44:	8e bd       	out	0x2e, r24	; 46
     b46:	8e b5       	in	r24, 0x2e	; 46
     b48:	80 61       	ori	r24, 0x10	; 16
     b4a:	8e bd       	out	0x2e, r24	; 46
     b4c:	0c c0       	rjmp	.+24     	; 0xb66 <TIMER_voidTimer1Enable+0x204>
     b4e:	8f b5       	in	r24, 0x2f	; 47
     b50:	81 60       	ori	r24, 0x01	; 1
     b52:	8f bd       	out	0x2f, r24	; 47
     b54:	8f b5       	in	r24, 0x2f	; 47
     b56:	82 60       	ori	r24, 0x02	; 2
     b58:	8f bd       	out	0x2f, r24	; 47
     b5a:	8e b5       	in	r24, 0x2e	; 46
     b5c:	88 60       	ori	r24, 0x08	; 8
     b5e:	8e bd       	out	0x2e, r24	; 46
     b60:	8e b5       	in	r24, 0x2e	; 46
     b62:	80 61       	ori	r24, 0x10	; 16
     b64:	8e bd       	out	0x2e, r24	; 46
     b66:	61 30       	cpi	r22, 0x01	; 1
     b68:	69 f0       	breq	.+26     	; 0xb84 <TIMER_voidTimer1Enable+0x222>
     b6a:	28 f0       	brcs	.+10     	; 0xb76 <TIMER_voidTimer1Enable+0x214>
     b6c:	62 30       	cpi	r22, 0x02	; 2
     b6e:	89 f0       	breq	.+34     	; 0xb92 <TIMER_voidTimer1Enable+0x230>
     b70:	63 30       	cpi	r22, 0x03	; 3
     b72:	b1 f0       	breq	.+44     	; 0xba0 <TIMER_voidTimer1Enable+0x23e>
     b74:	1b c0       	rjmp	.+54     	; 0xbac <TIMER_voidTimer1Enable+0x24a>
     b76:	8f b5       	in	r24, 0x2f	; 47
     b78:	8f 7b       	andi	r24, 0xBF	; 191
     b7a:	8f bd       	out	0x2f, r24	; 47
     b7c:	8f b5       	in	r24, 0x2f	; 47
     b7e:	8f 77       	andi	r24, 0x7F	; 127
     b80:	8f bd       	out	0x2f, r24	; 47
     b82:	14 c0       	rjmp	.+40     	; 0xbac <TIMER_voidTimer1Enable+0x24a>
     b84:	8f b5       	in	r24, 0x2f	; 47
     b86:	80 64       	ori	r24, 0x40	; 64
     b88:	8f bd       	out	0x2f, r24	; 47
     b8a:	8f b5       	in	r24, 0x2f	; 47
     b8c:	8f 77       	andi	r24, 0x7F	; 127
     b8e:	8f bd       	out	0x2f, r24	; 47
     b90:	0d c0       	rjmp	.+26     	; 0xbac <TIMER_voidTimer1Enable+0x24a>
     b92:	8f b5       	in	r24, 0x2f	; 47
     b94:	8f 7b       	andi	r24, 0xBF	; 191
     b96:	8f bd       	out	0x2f, r24	; 47
     b98:	8f b5       	in	r24, 0x2f	; 47
     b9a:	80 68       	ori	r24, 0x80	; 128
     b9c:	8f bd       	out	0x2f, r24	; 47
     b9e:	06 c0       	rjmp	.+12     	; 0xbac <TIMER_voidTimer1Enable+0x24a>
     ba0:	8f b5       	in	r24, 0x2f	; 47
     ba2:	80 64       	ori	r24, 0x40	; 64
     ba4:	8f bd       	out	0x2f, r24	; 47
     ba6:	8f b5       	in	r24, 0x2f	; 47
     ba8:	80 68       	ori	r24, 0x80	; 128
     baa:	8f bd       	out	0x2f, r24	; 47
     bac:	41 30       	cpi	r20, 0x01	; 1
     bae:	69 f0       	breq	.+26     	; 0xbca <TIMER_voidTimer1Enable+0x268>
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <TIMER_voidTimer1Enable+0x25a>
     bb2:	42 30       	cpi	r20, 0x02	; 2
     bb4:	89 f0       	breq	.+34     	; 0xbd8 <TIMER_voidTimer1Enable+0x276>
     bb6:	43 30       	cpi	r20, 0x03	; 3
     bb8:	b1 f0       	breq	.+44     	; 0xbe6 <TIMER_voidTimer1Enable+0x284>
     bba:	1b c0       	rjmp	.+54     	; 0xbf2 <TIMER_voidTimer1Enable+0x290>
     bbc:	8f b5       	in	r24, 0x2f	; 47
     bbe:	8f 7e       	andi	r24, 0xEF	; 239
     bc0:	8f bd       	out	0x2f, r24	; 47
     bc2:	8f b5       	in	r24, 0x2f	; 47
     bc4:	8f 7d       	andi	r24, 0xDF	; 223
     bc6:	8f bd       	out	0x2f, r24	; 47
     bc8:	14 c0       	rjmp	.+40     	; 0xbf2 <TIMER_voidTimer1Enable+0x290>
     bca:	8f b5       	in	r24, 0x2f	; 47
     bcc:	80 61       	ori	r24, 0x10	; 16
     bce:	8f bd       	out	0x2f, r24	; 47
     bd0:	8f b5       	in	r24, 0x2f	; 47
     bd2:	8f 7d       	andi	r24, 0xDF	; 223
     bd4:	8f bd       	out	0x2f, r24	; 47
     bd6:	0d c0       	rjmp	.+26     	; 0xbf2 <TIMER_voidTimer1Enable+0x290>
     bd8:	8f b5       	in	r24, 0x2f	; 47
     bda:	8f 7e       	andi	r24, 0xEF	; 239
     bdc:	8f bd       	out	0x2f, r24	; 47
     bde:	8f b5       	in	r24, 0x2f	; 47
     be0:	80 62       	ori	r24, 0x20	; 32
     be2:	8f bd       	out	0x2f, r24	; 47
     be4:	06 c0       	rjmp	.+12     	; 0xbf2 <TIMER_voidTimer1Enable+0x290>
     be6:	8f b5       	in	r24, 0x2f	; 47
     be8:	80 61       	ori	r24, 0x10	; 16
     bea:	8f bd       	out	0x2f, r24	; 47
     bec:	8f b5       	in	r24, 0x2f	; 47
     bee:	80 62       	ori	r24, 0x20	; 32
     bf0:	8f bd       	out	0x2f, r24	; 47
     bf2:	8e b5       	in	r24, 0x2e	; 46
     bf4:	8e 7f       	andi	r24, 0xFE	; 254
     bf6:	8e bd       	out	0x2e, r24	; 46
     bf8:	8e b5       	in	r24, 0x2e	; 46
     bfa:	82 60       	ori	r24, 0x02	; 2
     bfc:	8e bd       	out	0x2e, r24	; 46
     bfe:	8e b5       	in	r24, 0x2e	; 46
     c00:	8b 7f       	andi	r24, 0xFB	; 251
     c02:	8e bd       	out	0x2e, r24	; 46
     c04:	08 95       	ret

00000c06 <TIMER_voidTimer1SetOCR1A>:
     c06:	9b bd       	out	0x2b, r25	; 43
     c08:	8a bd       	out	0x2a, r24	; 42
     c0a:	08 95       	ret

00000c0c <TIMER_voidTimer1SetOCR1B>:
     c0c:	99 bd       	out	0x29, r25	; 41
     c0e:	88 bd       	out	0x28, r24	; 40
     c10:	08 95       	ret

00000c12 <TIMER_voidTimer1ICUInit>:
 **************************************************************************************************************************************/
static void(*Timer1_pICUSetCallBack)(void);
/************************************************************************************************************************************/
void TIMER_voidTimer1ICUInit(void)
{
	 SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_ICES1_BIT);
     c12:	8e b5       	in	r24, 0x2e	; 46
     c14:	80 64       	ori	r24, 0x40	; 64
     c16:	8e bd       	out	0x2e, r24	; 46
	 SET_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_TICIE1_BIT);
     c18:	89 b7       	in	r24, 0x39	; 57
     c1a:	80 62       	ori	r24, 0x20	; 32
     c1c:	89 bf       	out	0x39, r24	; 57

	 CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS10_BIT);
     c1e:	8e b5       	in	r24, 0x2e	; 46
     c20:	8e 7f       	andi	r24, 0xFE	; 254
     c22:	8e bd       	out	0x2e, r24	; 46
	 SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS11_BIT);
     c24:	8e b5       	in	r24, 0x2e	; 46
     c26:	82 60       	ori	r24, 0x02	; 2
     c28:	8e bd       	out	0x2e, r24	; 46
	 CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS12_BIT);
     c2a:	8e b5       	in	r24, 0x2e	; 46
     c2c:	8b 7f       	andi	r24, 0xFB	; 251
     c2e:	8e bd       	out	0x2e, r24	; 46
     c30:	08 95       	ret

00000c32 <TIMER_voidTimer1ICUSetTriggerEdge>:
}
void TIMER_voidTimer1ICUSetTriggerEdge(u8 Copy_u8ICUEdgeType)
{
   if(Copy_u8ICUEdgeType==TIMER1_ICU_RISING_EDGY_TYPE_MODE)
     c32:	81 30       	cpi	r24, 0x01	; 1
     c34:	21 f4       	brne	.+8      	; 0xc3e <TIMER_voidTimer1ICUSetTriggerEdge+0xc>
   {
	  SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_ICES1_BIT);
     c36:	8e b5       	in	r24, 0x2e	; 46
     c38:	80 64       	ori	r24, 0x40	; 64
     c3a:	8e bd       	out	0x2e, r24	; 46
     c3c:	08 95       	ret
   }
   else if(Copy_u8ICUEdgeType==TIMER1_ICU_FALLING_EDGY_TYPE_MODE)
     c3e:	81 11       	cpse	r24, r1
     c40:	03 c0       	rjmp	.+6      	; 0xc48 <TIMER_voidTimer1ICUSetTriggerEdge+0x16>
   {
	  CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_ICES1_BIT);
     c42:	8e b5       	in	r24, 0x2e	; 46
     c44:	8f 7b       	andi	r24, 0xBF	; 191
     c46:	8e bd       	out	0x2e, r24	; 46
     c48:	08 95       	ret

00000c4a <TIMER_voidTimer1ICUGetInputCaptureValue>:
   }
}
u16 TIMER_voidTimer1ICUGetInputCaptureValue(void)
{
	 return TIMER_u16_ICR1_REG;
     c4a:	86 b5       	in	r24, 0x26	; 38
     c4c:	97 b5       	in	r25, 0x27	; 39
}
     c4e:	08 95       	ret

00000c50 <TIMER_voidTimer1ICUSetCallBack>:
void TIMER_voidTimer1ICUSetCallBack(void (*Copy_pFun) (void))
{
	 Timer1_pICUSetCallBack = Copy_pFun;
     c50:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <Timer1_pICUSetCallBack+0x1>
     c54:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Timer1_pICUSetCallBack>
     c58:	08 95       	ret

00000c5a <TIMER_voidClearTimer1Value>:
}
void TIMER_voidClearTimer1Value(void)
{
	 TIMER_u16_TCNT1_REG = 0;
     c5a:	1d bc       	out	0x2d, r1	; 45
     c5c:	1c bc       	out	0x2c, r1	; 44
     c5e:	08 95       	ret

00000c60 <__vector_6>:
}
void __vector_6 (void)
{
     c60:	1f 92       	push	r1
     c62:	0f 92       	push	r0
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	0f 92       	push	r0
     c68:	11 24       	eor	r1, r1
     c6a:	2f 93       	push	r18
     c6c:	3f 93       	push	r19
     c6e:	4f 93       	push	r20
     c70:	5f 93       	push	r21
     c72:	6f 93       	push	r22
     c74:	7f 93       	push	r23
     c76:	8f 93       	push	r24
     c78:	9f 93       	push	r25
     c7a:	af 93       	push	r26
     c7c:	bf 93       	push	r27
     c7e:	ef 93       	push	r30
     c80:	ff 93       	push	r31
	if (Timer1_pICUSetCallBack!=NULL)
     c82:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <Timer1_pICUSetCallBack>
     c86:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <Timer1_pICUSetCallBack+0x1>
     c8a:	30 97       	sbiw	r30, 0x00	; 0
     c8c:	09 f0       	breq	.+2      	; 0xc90 <__vector_6+0x30>
	{
		Timer1_pICUSetCallBack();
     c8e:	09 95       	icall
	}
}
     c90:	ff 91       	pop	r31
     c92:	ef 91       	pop	r30
     c94:	bf 91       	pop	r27
     c96:	af 91       	pop	r26
     c98:	9f 91       	pop	r25
     c9a:	8f 91       	pop	r24
     c9c:	7f 91       	pop	r23
     c9e:	6f 91       	pop	r22
     ca0:	5f 91       	pop	r21
     ca2:	4f 91       	pop	r20
     ca4:	3f 91       	pop	r19
     ca6:	2f 91       	pop	r18
     ca8:	0f 90       	pop	r0
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	0f 90       	pop	r0
     cae:	1f 90       	pop	r1
     cb0:	18 95       	reti

00000cb2 <__divsf3>:
     cb2:	0e 94 6d 06 	call	0xcda	; 0xcda <__divsf3x>
     cb6:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__fp_round>
     cba:	0e 94 47 07 	call	0xe8e	; 0xe8e <__fp_pscB>
     cbe:	58 f0       	brcs	.+22     	; 0xcd6 <__divsf3+0x24>
     cc0:	0e 94 40 07 	call	0xe80	; 0xe80 <__fp_pscA>
     cc4:	40 f0       	brcs	.+16     	; 0xcd6 <__divsf3+0x24>
     cc6:	29 f4       	brne	.+10     	; 0xcd2 <__divsf3+0x20>
     cc8:	5f 3f       	cpi	r21, 0xFF	; 255
     cca:	29 f0       	breq	.+10     	; 0xcd6 <__divsf3+0x24>
     ccc:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__fp_inf>
     cd0:	51 11       	cpse	r21, r1
     cd2:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__fp_szero>
     cd6:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__fp_nan>

00000cda <__divsf3x>:
     cda:	0e 94 5f 07 	call	0xebe	; 0xebe <__fp_split3>
     cde:	68 f3       	brcs	.-38     	; 0xcba <__divsf3+0x8>

00000ce0 <__divsf3_pse>:
     ce0:	99 23       	and	r25, r25
     ce2:	b1 f3       	breq	.-20     	; 0xcd0 <__divsf3+0x1e>
     ce4:	55 23       	and	r21, r21
     ce6:	91 f3       	breq	.-28     	; 0xccc <__divsf3+0x1a>
     ce8:	95 1b       	sub	r25, r21
     cea:	55 0b       	sbc	r21, r21
     cec:	bb 27       	eor	r27, r27
     cee:	aa 27       	eor	r26, r26
     cf0:	62 17       	cp	r22, r18
     cf2:	73 07       	cpc	r23, r19
     cf4:	84 07       	cpc	r24, r20
     cf6:	38 f0       	brcs	.+14     	; 0xd06 <__divsf3_pse+0x26>
     cf8:	9f 5f       	subi	r25, 0xFF	; 255
     cfa:	5f 4f       	sbci	r21, 0xFF	; 255
     cfc:	22 0f       	add	r18, r18
     cfe:	33 1f       	adc	r19, r19
     d00:	44 1f       	adc	r20, r20
     d02:	aa 1f       	adc	r26, r26
     d04:	a9 f3       	breq	.-22     	; 0xcf0 <__divsf3_pse+0x10>
     d06:	35 d0       	rcall	.+106    	; 0xd72 <__divsf3_pse+0x92>
     d08:	0e 2e       	mov	r0, r30
     d0a:	3a f0       	brmi	.+14     	; 0xd1a <__divsf3_pse+0x3a>
     d0c:	e0 e8       	ldi	r30, 0x80	; 128
     d0e:	32 d0       	rcall	.+100    	; 0xd74 <__divsf3_pse+0x94>
     d10:	91 50       	subi	r25, 0x01	; 1
     d12:	50 40       	sbci	r21, 0x00	; 0
     d14:	e6 95       	lsr	r30
     d16:	00 1c       	adc	r0, r0
     d18:	ca f7       	brpl	.-14     	; 0xd0c <__divsf3_pse+0x2c>
     d1a:	2b d0       	rcall	.+86     	; 0xd72 <__divsf3_pse+0x92>
     d1c:	fe 2f       	mov	r31, r30
     d1e:	29 d0       	rcall	.+82     	; 0xd72 <__divsf3_pse+0x92>
     d20:	66 0f       	add	r22, r22
     d22:	77 1f       	adc	r23, r23
     d24:	88 1f       	adc	r24, r24
     d26:	bb 1f       	adc	r27, r27
     d28:	26 17       	cp	r18, r22
     d2a:	37 07       	cpc	r19, r23
     d2c:	48 07       	cpc	r20, r24
     d2e:	ab 07       	cpc	r26, r27
     d30:	b0 e8       	ldi	r27, 0x80	; 128
     d32:	09 f0       	breq	.+2      	; 0xd36 <__divsf3_pse+0x56>
     d34:	bb 0b       	sbc	r27, r27
     d36:	80 2d       	mov	r24, r0
     d38:	bf 01       	movw	r22, r30
     d3a:	ff 27       	eor	r31, r31
     d3c:	93 58       	subi	r25, 0x83	; 131
     d3e:	5f 4f       	sbci	r21, 0xFF	; 255
     d40:	3a f0       	brmi	.+14     	; 0xd50 <__divsf3_pse+0x70>
     d42:	9e 3f       	cpi	r25, 0xFE	; 254
     d44:	51 05       	cpc	r21, r1
     d46:	78 f0       	brcs	.+30     	; 0xd66 <__divsf3_pse+0x86>
     d48:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__fp_inf>
     d4c:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__fp_szero>
     d50:	5f 3f       	cpi	r21, 0xFF	; 255
     d52:	e4 f3       	brlt	.-8      	; 0xd4c <__divsf3_pse+0x6c>
     d54:	98 3e       	cpi	r25, 0xE8	; 232
     d56:	d4 f3       	brlt	.-12     	; 0xd4c <__divsf3_pse+0x6c>
     d58:	86 95       	lsr	r24
     d5a:	77 95       	ror	r23
     d5c:	67 95       	ror	r22
     d5e:	b7 95       	ror	r27
     d60:	f7 95       	ror	r31
     d62:	9f 5f       	subi	r25, 0xFF	; 255
     d64:	c9 f7       	brne	.-14     	; 0xd58 <__divsf3_pse+0x78>
     d66:	88 0f       	add	r24, r24
     d68:	91 1d       	adc	r25, r1
     d6a:	96 95       	lsr	r25
     d6c:	87 95       	ror	r24
     d6e:	97 f9       	bld	r25, 7
     d70:	08 95       	ret
     d72:	e1 e0       	ldi	r30, 0x01	; 1
     d74:	66 0f       	add	r22, r22
     d76:	77 1f       	adc	r23, r23
     d78:	88 1f       	adc	r24, r24
     d7a:	bb 1f       	adc	r27, r27
     d7c:	62 17       	cp	r22, r18
     d7e:	73 07       	cpc	r23, r19
     d80:	84 07       	cpc	r24, r20
     d82:	ba 07       	cpc	r27, r26
     d84:	20 f0       	brcs	.+8      	; 0xd8e <__divsf3_pse+0xae>
     d86:	62 1b       	sub	r22, r18
     d88:	73 0b       	sbc	r23, r19
     d8a:	84 0b       	sbc	r24, r20
     d8c:	ba 0b       	sbc	r27, r26
     d8e:	ee 1f       	adc	r30, r30
     d90:	88 f7       	brcc	.-30     	; 0xd74 <__divsf3_pse+0x94>
     d92:	e0 95       	com	r30
     d94:	08 95       	ret

00000d96 <__fixunssfsi>:
     d96:	0e 94 67 07 	call	0xece	; 0xece <__fp_splitA>
     d9a:	88 f0       	brcs	.+34     	; 0xdbe <__fixunssfsi+0x28>
     d9c:	9f 57       	subi	r25, 0x7F	; 127
     d9e:	98 f0       	brcs	.+38     	; 0xdc6 <__fixunssfsi+0x30>
     da0:	b9 2f       	mov	r27, r25
     da2:	99 27       	eor	r25, r25
     da4:	b7 51       	subi	r27, 0x17	; 23
     da6:	b0 f0       	brcs	.+44     	; 0xdd4 <__fixunssfsi+0x3e>
     da8:	e1 f0       	breq	.+56     	; 0xde2 <__fixunssfsi+0x4c>
     daa:	66 0f       	add	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	88 1f       	adc	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	1a f0       	brmi	.+6      	; 0xdba <__fixunssfsi+0x24>
     db4:	ba 95       	dec	r27
     db6:	c9 f7       	brne	.-14     	; 0xdaa <__fixunssfsi+0x14>
     db8:	14 c0       	rjmp	.+40     	; 0xde2 <__fixunssfsi+0x4c>
     dba:	b1 30       	cpi	r27, 0x01	; 1
     dbc:	91 f0       	breq	.+36     	; 0xde2 <__fixunssfsi+0x4c>
     dbe:	0e 94 81 07 	call	0xf02	; 0xf02 <__fp_zero>
     dc2:	b1 e0       	ldi	r27, 0x01	; 1
     dc4:	08 95       	ret
     dc6:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_zero>
     dca:	67 2f       	mov	r22, r23
     dcc:	78 2f       	mov	r23, r24
     dce:	88 27       	eor	r24, r24
     dd0:	b8 5f       	subi	r27, 0xF8	; 248
     dd2:	39 f0       	breq	.+14     	; 0xde2 <__fixunssfsi+0x4c>
     dd4:	b9 3f       	cpi	r27, 0xF9	; 249
     dd6:	cc f3       	brlt	.-14     	; 0xdca <__fixunssfsi+0x34>
     dd8:	86 95       	lsr	r24
     dda:	77 95       	ror	r23
     ddc:	67 95       	ror	r22
     dde:	b3 95       	inc	r27
     de0:	d9 f7       	brne	.-10     	; 0xdd8 <__fixunssfsi+0x42>
     de2:	3e f4       	brtc	.+14     	; 0xdf2 <__fixunssfsi+0x5c>
     de4:	90 95       	com	r25
     de6:	80 95       	com	r24
     de8:	70 95       	com	r23
     dea:	61 95       	neg	r22
     dec:	7f 4f       	sbci	r23, 0xFF	; 255
     dee:	8f 4f       	sbci	r24, 0xFF	; 255
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	08 95       	ret

00000df4 <__floatunsisf>:
     df4:	e8 94       	clt
     df6:	09 c0       	rjmp	.+18     	; 0xe0a <__floatsisf+0x12>

00000df8 <__floatsisf>:
     df8:	97 fb       	bst	r25, 7
     dfa:	3e f4       	brtc	.+14     	; 0xe0a <__floatsisf+0x12>
     dfc:	90 95       	com	r25
     dfe:	80 95       	com	r24
     e00:	70 95       	com	r23
     e02:	61 95       	neg	r22
     e04:	7f 4f       	sbci	r23, 0xFF	; 255
     e06:	8f 4f       	sbci	r24, 0xFF	; 255
     e08:	9f 4f       	sbci	r25, 0xFF	; 255
     e0a:	99 23       	and	r25, r25
     e0c:	a9 f0       	breq	.+42     	; 0xe38 <__floatsisf+0x40>
     e0e:	f9 2f       	mov	r31, r25
     e10:	96 e9       	ldi	r25, 0x96	; 150
     e12:	bb 27       	eor	r27, r27
     e14:	93 95       	inc	r25
     e16:	f6 95       	lsr	r31
     e18:	87 95       	ror	r24
     e1a:	77 95       	ror	r23
     e1c:	67 95       	ror	r22
     e1e:	b7 95       	ror	r27
     e20:	f1 11       	cpse	r31, r1
     e22:	f8 cf       	rjmp	.-16     	; 0xe14 <__floatsisf+0x1c>
     e24:	fa f4       	brpl	.+62     	; 0xe64 <__floatsisf+0x6c>
     e26:	bb 0f       	add	r27, r27
     e28:	11 f4       	brne	.+4      	; 0xe2e <__floatsisf+0x36>
     e2a:	60 ff       	sbrs	r22, 0
     e2c:	1b c0       	rjmp	.+54     	; 0xe64 <__floatsisf+0x6c>
     e2e:	6f 5f       	subi	r22, 0xFF	; 255
     e30:	7f 4f       	sbci	r23, 0xFF	; 255
     e32:	8f 4f       	sbci	r24, 0xFF	; 255
     e34:	9f 4f       	sbci	r25, 0xFF	; 255
     e36:	16 c0       	rjmp	.+44     	; 0xe64 <__floatsisf+0x6c>
     e38:	88 23       	and	r24, r24
     e3a:	11 f0       	breq	.+4      	; 0xe40 <__floatsisf+0x48>
     e3c:	96 e9       	ldi	r25, 0x96	; 150
     e3e:	11 c0       	rjmp	.+34     	; 0xe62 <__floatsisf+0x6a>
     e40:	77 23       	and	r23, r23
     e42:	21 f0       	breq	.+8      	; 0xe4c <__floatsisf+0x54>
     e44:	9e e8       	ldi	r25, 0x8E	; 142
     e46:	87 2f       	mov	r24, r23
     e48:	76 2f       	mov	r23, r22
     e4a:	05 c0       	rjmp	.+10     	; 0xe56 <__floatsisf+0x5e>
     e4c:	66 23       	and	r22, r22
     e4e:	71 f0       	breq	.+28     	; 0xe6c <__floatsisf+0x74>
     e50:	96 e8       	ldi	r25, 0x86	; 134
     e52:	86 2f       	mov	r24, r22
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	2a f0       	brmi	.+10     	; 0xe64 <__floatsisf+0x6c>
     e5a:	9a 95       	dec	r25
     e5c:	66 0f       	add	r22, r22
     e5e:	77 1f       	adc	r23, r23
     e60:	88 1f       	adc	r24, r24
     e62:	da f7       	brpl	.-10     	; 0xe5a <__floatsisf+0x62>
     e64:	88 0f       	add	r24, r24
     e66:	96 95       	lsr	r25
     e68:	87 95       	ror	r24
     e6a:	97 f9       	bld	r25, 7
     e6c:	08 95       	ret

00000e6e <__fp_inf>:
     e6e:	97 f9       	bld	r25, 7
     e70:	9f 67       	ori	r25, 0x7F	; 127
     e72:	80 e8       	ldi	r24, 0x80	; 128
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	08 95       	ret

00000e7a <__fp_nan>:
     e7a:	9f ef       	ldi	r25, 0xFF	; 255
     e7c:	80 ec       	ldi	r24, 0xC0	; 192
     e7e:	08 95       	ret

00000e80 <__fp_pscA>:
     e80:	00 24       	eor	r0, r0
     e82:	0a 94       	dec	r0
     e84:	16 16       	cp	r1, r22
     e86:	17 06       	cpc	r1, r23
     e88:	18 06       	cpc	r1, r24
     e8a:	09 06       	cpc	r0, r25
     e8c:	08 95       	ret

00000e8e <__fp_pscB>:
     e8e:	00 24       	eor	r0, r0
     e90:	0a 94       	dec	r0
     e92:	12 16       	cp	r1, r18
     e94:	13 06       	cpc	r1, r19
     e96:	14 06       	cpc	r1, r20
     e98:	05 06       	cpc	r0, r21
     e9a:	08 95       	ret

00000e9c <__fp_round>:
     e9c:	09 2e       	mov	r0, r25
     e9e:	03 94       	inc	r0
     ea0:	00 0c       	add	r0, r0
     ea2:	11 f4       	brne	.+4      	; 0xea8 <__fp_round+0xc>
     ea4:	88 23       	and	r24, r24
     ea6:	52 f0       	brmi	.+20     	; 0xebc <__fp_round+0x20>
     ea8:	bb 0f       	add	r27, r27
     eaa:	40 f4       	brcc	.+16     	; 0xebc <__fp_round+0x20>
     eac:	bf 2b       	or	r27, r31
     eae:	11 f4       	brne	.+4      	; 0xeb4 <__fp_round+0x18>
     eb0:	60 ff       	sbrs	r22, 0
     eb2:	04 c0       	rjmp	.+8      	; 0xebc <__fp_round+0x20>
     eb4:	6f 5f       	subi	r22, 0xFF	; 255
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	8f 4f       	sbci	r24, 0xFF	; 255
     eba:	9f 4f       	sbci	r25, 0xFF	; 255
     ebc:	08 95       	ret

00000ebe <__fp_split3>:
     ebe:	57 fd       	sbrc	r21, 7
     ec0:	90 58       	subi	r25, 0x80	; 128
     ec2:	44 0f       	add	r20, r20
     ec4:	55 1f       	adc	r21, r21
     ec6:	59 f0       	breq	.+22     	; 0xede <__fp_splitA+0x10>
     ec8:	5f 3f       	cpi	r21, 0xFF	; 255
     eca:	71 f0       	breq	.+28     	; 0xee8 <__fp_splitA+0x1a>
     ecc:	47 95       	ror	r20

00000ece <__fp_splitA>:
     ece:	88 0f       	add	r24, r24
     ed0:	97 fb       	bst	r25, 7
     ed2:	99 1f       	adc	r25, r25
     ed4:	61 f0       	breq	.+24     	; 0xeee <__fp_splitA+0x20>
     ed6:	9f 3f       	cpi	r25, 0xFF	; 255
     ed8:	79 f0       	breq	.+30     	; 0xef8 <__fp_splitA+0x2a>
     eda:	87 95       	ror	r24
     edc:	08 95       	ret
     ede:	12 16       	cp	r1, r18
     ee0:	13 06       	cpc	r1, r19
     ee2:	14 06       	cpc	r1, r20
     ee4:	55 1f       	adc	r21, r21
     ee6:	f2 cf       	rjmp	.-28     	; 0xecc <__fp_split3+0xe>
     ee8:	46 95       	lsr	r20
     eea:	f1 df       	rcall	.-30     	; 0xece <__fp_splitA>
     eec:	08 c0       	rjmp	.+16     	; 0xefe <__fp_splitA+0x30>
     eee:	16 16       	cp	r1, r22
     ef0:	17 06       	cpc	r1, r23
     ef2:	18 06       	cpc	r1, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	f1 cf       	rjmp	.-30     	; 0xeda <__fp_splitA+0xc>
     ef8:	86 95       	lsr	r24
     efa:	71 05       	cpc	r23, r1
     efc:	61 05       	cpc	r22, r1
     efe:	08 94       	sec
     f00:	08 95       	ret

00000f02 <__fp_zero>:
     f02:	e8 94       	clt

00000f04 <__fp_szero>:
     f04:	bb 27       	eor	r27, r27
     f06:	66 27       	eor	r22, r22
     f08:	77 27       	eor	r23, r23
     f0a:	cb 01       	movw	r24, r22
     f0c:	97 f9       	bld	r25, 7
     f0e:	08 95       	ret

00000f10 <__mulsf3>:
     f10:	0e 94 9b 07 	call	0xf36	; 0xf36 <__mulsf3x>
     f14:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__fp_round>
     f18:	0e 94 40 07 	call	0xe80	; 0xe80 <__fp_pscA>
     f1c:	38 f0       	brcs	.+14     	; 0xf2c <__mulsf3+0x1c>
     f1e:	0e 94 47 07 	call	0xe8e	; 0xe8e <__fp_pscB>
     f22:	20 f0       	brcs	.+8      	; 0xf2c <__mulsf3+0x1c>
     f24:	95 23       	and	r25, r21
     f26:	11 f0       	breq	.+4      	; 0xf2c <__mulsf3+0x1c>
     f28:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__fp_inf>
     f2c:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__fp_nan>
     f30:	11 24       	eor	r1, r1
     f32:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__fp_szero>

00000f36 <__mulsf3x>:
     f36:	0e 94 5f 07 	call	0xebe	; 0xebe <__fp_split3>
     f3a:	70 f3       	brcs	.-36     	; 0xf18 <__mulsf3+0x8>

00000f3c <__mulsf3_pse>:
     f3c:	95 9f       	mul	r25, r21
     f3e:	c1 f3       	breq	.-16     	; 0xf30 <__mulsf3+0x20>
     f40:	95 0f       	add	r25, r21
     f42:	50 e0       	ldi	r21, 0x00	; 0
     f44:	55 1f       	adc	r21, r21
     f46:	62 9f       	mul	r22, r18
     f48:	f0 01       	movw	r30, r0
     f4a:	72 9f       	mul	r23, r18
     f4c:	bb 27       	eor	r27, r27
     f4e:	f0 0d       	add	r31, r0
     f50:	b1 1d       	adc	r27, r1
     f52:	63 9f       	mul	r22, r19
     f54:	aa 27       	eor	r26, r26
     f56:	f0 0d       	add	r31, r0
     f58:	b1 1d       	adc	r27, r1
     f5a:	aa 1f       	adc	r26, r26
     f5c:	64 9f       	mul	r22, r20
     f5e:	66 27       	eor	r22, r22
     f60:	b0 0d       	add	r27, r0
     f62:	a1 1d       	adc	r26, r1
     f64:	66 1f       	adc	r22, r22
     f66:	82 9f       	mul	r24, r18
     f68:	22 27       	eor	r18, r18
     f6a:	b0 0d       	add	r27, r0
     f6c:	a1 1d       	adc	r26, r1
     f6e:	62 1f       	adc	r22, r18
     f70:	73 9f       	mul	r23, r19
     f72:	b0 0d       	add	r27, r0
     f74:	a1 1d       	adc	r26, r1
     f76:	62 1f       	adc	r22, r18
     f78:	83 9f       	mul	r24, r19
     f7a:	a0 0d       	add	r26, r0
     f7c:	61 1d       	adc	r22, r1
     f7e:	22 1f       	adc	r18, r18
     f80:	74 9f       	mul	r23, r20
     f82:	33 27       	eor	r19, r19
     f84:	a0 0d       	add	r26, r0
     f86:	61 1d       	adc	r22, r1
     f88:	23 1f       	adc	r18, r19
     f8a:	84 9f       	mul	r24, r20
     f8c:	60 0d       	add	r22, r0
     f8e:	21 1d       	adc	r18, r1
     f90:	82 2f       	mov	r24, r18
     f92:	76 2f       	mov	r23, r22
     f94:	6a 2f       	mov	r22, r26
     f96:	11 24       	eor	r1, r1
     f98:	9f 57       	subi	r25, 0x7F	; 127
     f9a:	50 40       	sbci	r21, 0x00	; 0
     f9c:	9a f0       	brmi	.+38     	; 0xfc4 <__mulsf3_pse+0x88>
     f9e:	f1 f0       	breq	.+60     	; 0xfdc <__mulsf3_pse+0xa0>
     fa0:	88 23       	and	r24, r24
     fa2:	4a f0       	brmi	.+18     	; 0xfb6 <__mulsf3_pse+0x7a>
     fa4:	ee 0f       	add	r30, r30
     fa6:	ff 1f       	adc	r31, r31
     fa8:	bb 1f       	adc	r27, r27
     faa:	66 1f       	adc	r22, r22
     fac:	77 1f       	adc	r23, r23
     fae:	88 1f       	adc	r24, r24
     fb0:	91 50       	subi	r25, 0x01	; 1
     fb2:	50 40       	sbci	r21, 0x00	; 0
     fb4:	a9 f7       	brne	.-22     	; 0xfa0 <__mulsf3_pse+0x64>
     fb6:	9e 3f       	cpi	r25, 0xFE	; 254
     fb8:	51 05       	cpc	r21, r1
     fba:	80 f0       	brcs	.+32     	; 0xfdc <__mulsf3_pse+0xa0>
     fbc:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__fp_inf>
     fc0:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__fp_szero>
     fc4:	5f 3f       	cpi	r21, 0xFF	; 255
     fc6:	e4 f3       	brlt	.-8      	; 0xfc0 <__mulsf3_pse+0x84>
     fc8:	98 3e       	cpi	r25, 0xE8	; 232
     fca:	d4 f3       	brlt	.-12     	; 0xfc0 <__mulsf3_pse+0x84>
     fcc:	86 95       	lsr	r24
     fce:	77 95       	ror	r23
     fd0:	67 95       	ror	r22
     fd2:	b7 95       	ror	r27
     fd4:	f7 95       	ror	r31
     fd6:	e7 95       	ror	r30
     fd8:	9f 5f       	subi	r25, 0xFF	; 255
     fda:	c1 f7       	brne	.-16     	; 0xfcc <__mulsf3_pse+0x90>
     fdc:	fe 2b       	or	r31, r30
     fde:	88 0f       	add	r24, r24
     fe0:	91 1d       	adc	r25, r1
     fe2:	96 95       	lsr	r25
     fe4:	87 95       	ror	r24
     fe6:	97 f9       	bld	r25, 7
     fe8:	08 95       	ret

00000fea <__udivmodsi4>:
     fea:	a1 e2       	ldi	r26, 0x21	; 33
     fec:	1a 2e       	mov	r1, r26
     fee:	aa 1b       	sub	r26, r26
     ff0:	bb 1b       	sub	r27, r27
     ff2:	fd 01       	movw	r30, r26
     ff4:	0d c0       	rjmp	.+26     	; 0x1010 <__udivmodsi4_ep>

00000ff6 <__udivmodsi4_loop>:
     ff6:	aa 1f       	adc	r26, r26
     ff8:	bb 1f       	adc	r27, r27
     ffa:	ee 1f       	adc	r30, r30
     ffc:	ff 1f       	adc	r31, r31
     ffe:	a2 17       	cp	r26, r18
    1000:	b3 07       	cpc	r27, r19
    1002:	e4 07       	cpc	r30, r20
    1004:	f5 07       	cpc	r31, r21
    1006:	20 f0       	brcs	.+8      	; 0x1010 <__udivmodsi4_ep>
    1008:	a2 1b       	sub	r26, r18
    100a:	b3 0b       	sbc	r27, r19
    100c:	e4 0b       	sbc	r30, r20
    100e:	f5 0b       	sbc	r31, r21

00001010 <__udivmodsi4_ep>:
    1010:	66 1f       	adc	r22, r22
    1012:	77 1f       	adc	r23, r23
    1014:	88 1f       	adc	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	1a 94       	dec	r1
    101a:	69 f7       	brne	.-38     	; 0xff6 <__udivmodsi4_loop>
    101c:	60 95       	com	r22
    101e:	70 95       	com	r23
    1020:	80 95       	com	r24
    1022:	90 95       	com	r25
    1024:	9b 01       	movw	r18, r22
    1026:	ac 01       	movw	r20, r24
    1028:	bd 01       	movw	r22, r26
    102a:	cf 01       	movw	r24, r30
    102c:	08 95       	ret

0000102e <__tablejump2__>:
    102e:	ee 0f       	add	r30, r30
    1030:	ff 1f       	adc	r31, r31
    1032:	05 90       	lpm	r0, Z+
    1034:	f4 91       	lpm	r31, Z
    1036:	e0 2d       	mov	r30, r0
    1038:	09 94       	ijmp

0000103a <__umulhisi3>:
    103a:	a2 9f       	mul	r26, r18
    103c:	b0 01       	movw	r22, r0
    103e:	b3 9f       	mul	r27, r19
    1040:	c0 01       	movw	r24, r0
    1042:	a3 9f       	mul	r26, r19
    1044:	70 0d       	add	r23, r0
    1046:	81 1d       	adc	r24, r1
    1048:	11 24       	eor	r1, r1
    104a:	91 1d       	adc	r25, r1
    104c:	b2 9f       	mul	r27, r18
    104e:	70 0d       	add	r23, r0
    1050:	81 1d       	adc	r24, r1
    1052:	11 24       	eor	r1, r1
    1054:	91 1d       	adc	r25, r1
    1056:	08 95       	ret

00001058 <__muluhisi3>:
    1058:	0e 94 1d 08 	call	0x103a	; 0x103a <__umulhisi3>
    105c:	a5 9f       	mul	r26, r21
    105e:	90 0d       	add	r25, r0
    1060:	b4 9f       	mul	r27, r20
    1062:	90 0d       	add	r25, r0
    1064:	a4 9f       	mul	r26, r20
    1066:	80 0d       	add	r24, r0
    1068:	91 1d       	adc	r25, r1
    106a:	11 24       	eor	r1, r1
    106c:	08 95       	ret

0000106e <_exit>:
    106e:	f8 94       	cli

00001070 <__stop_program>:
    1070:	ff cf       	rjmp	.-2      	; 0x1070 <__stop_program>
